openapi: 3.0.3
info:
  title: Embedded Payments
  description: >-
    Embedding payments into your software platform can be one of the most
    powerful value drivers for your customers and your top line. Imagine your
    software delivering the entire order-to-cash cycle including funding right
    into the customer's bank account. We provide low code integration- With just
    a single API, you can go live with Exact Payments. Onboard customers,
    automated underwriting, receive webhook notifications when your customers is
    live and ready to take payments. We have all the payment types your
    customers want and their buyers need. Credit and debit cards plus ACH
    payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file
    and more. Dive into our API Reference and add embedded payments with Exact
    today!
  version: 1.0.4
  contact: {}
tags:
  - name: API Health Check
  - name: Authentication
  - name: Underwriting Workflow
  - name: Merchant Onboarding
  - name: Document Management
  - name: Account Management
  - name: Admin Tools
  - name: Payments
    description: Authorize payments and capture funds.
  - name: Payment Methods
    description: Tokenize payment details and manage those payment methods.
  - name: Customers
    description: Store customer details.
  - name: Orders
    description: Handle payments from your payment form with Exact.JS
  - name: Reporting
  - name: Webhooks
servers:
  - url: https://api.exactpaysandbox.com
    description: Exact Payments Sandbox
  - url: https://api-p2.exactpay.com
    description: Exact Payments API
paths:
  /status:
    get:
      tags:
        - API Health Check
      summary: Retrieve Status
      description: >-
        A method in which you can check wether or not the Exact Payments service
        is operational.  Used correctly, this can proactively notify your
        merchants on the very rare occasion that the Exact Payments service is
        not operational
      responses:
        '200':
          description: The status of the API.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: ''
  /token:
    post:
      tags:
        - Authentication
      operationId: createUserToken
      summary: Create User Token
      description: >-
        Creates a User Token that can be used to authorize calls to other API
        endpoints in our application.
      parameters:
        - name: x-application-id
          in: header
          description: >-
            Application ID calling the API. Specify your assigned Application
            ID, otherwise, use the default value or leave it empty if you aren't
            assigned any Application ID. It can be specified in the header or in
            the body. If you're building your own application, refer to our
            [guide](https://developer.exactpay.com/docs/authentication) on how
            to get an Application ID.
          schema:
            type: string
            default: admin-pwa
            example: admin-pwa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserToken'
                - required:
                    - email
                    - password
      responses:
        '201':
          description: |
            **Created**
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToken'
        '400':
          $ref: '#/components/responses/BadRequestZodError'
        '401':
          description: |
            **Unauthorized**\
            \
            When you'll get `401 Unauthorized` response:
            - The Organization or Account the User belongs to is disabled.
            - Invalid User Credentials are supplied.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |
            **Forbidden**\
            \
            When you'll get `403 Forbidden` response:
            - The User's password expired.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The provided Application doesn't exist.
            - User Credential doesn't exist.
            - The User Role doesn't exist.
            - The User's Organization or Account doesn't exist.
            - The User Invitation has not been accepted yet.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '423':
          description: >-
            **Locked**\

            \

            When you'll get `423 Locked` response:

            - User Credentials are locked due to more than five consecutive
            failed login attempts.

            - A Manager User has locked the User.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Locked'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /application/{applicationId}/token:
    post:
      tags:
        - Authentication
      operationId: createApplicationToken
      summary: Create Application Token
      description: >-
        Create a new Application Token for non-human users, like external APIs
        or User Interfaces to access our API under the session account.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/applicationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ApplicationToken'
                - required:
                    - label
                    - permissions
      responses:
        '201':
          description: '**Created**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationToken'
        '400':
          $ref: '#/components/responses/BadRequestZodError'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to create
            Application Tokens.

            - The User's Organization or Account is disabled.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Application doesn't exist.
            - The User's Organization or Account doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Authentication
      operationId: queryApplicationToken
      summary: Query Application Tokens
      description: >-
        Query Application Tokens for non-human users, like external APIs or User
        Interfaces to access our API under the session account.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sortV2'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              $ref: '#/components/headers/x-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationTokenResponse'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to read
            Application Tokens.
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Application doesn't exist.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /application/{applicationId}/token/{tokenId}:
    delete:
      tags:
        - Authentication
      operationId: deleteApplicationToken
      summary: Delete Application Token
      description: >-
        Delete a specific Application Token by the given Application Identifier
        under the session account.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - name: tokenId
          required: true
          in: path
          description: Application Token Identifier .
          schema:
            type: string
          example: 623cddcad82a8effbb0b9845
      responses:
        '204':
          description: |-
            **No Content**\
            \
            The Application Token has been successfully deleted.
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to delete
            Application Tokens.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Application doesn't exist.
            - The Application Token doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding-workflow:
    post:
      tags:
        - Underwriting Workflow
      summary: Create Workflow
      description: >-
        Create a new Underwriting Workflow for the Organization to evaluate
        Onboarding Applications.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnderwritingWorkflowRequestCreateWorkflow'
        required: true
      responses:
        '201':
          description: '**Created**'
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: >-
                      The unique identifier assigned to the newly created
                      Underwriting Workflow.
                    example: 61523709444c51fa997257fe
        '400':
          $ref: '#/components/responses/BadRequestCreateAndUpdateWorkflowResponse'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to create
            Underwriting Workflows.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The User's Organization doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Underwriting Workflow
      summary: List Workflows
      description: >-
        Retrieve a list of active underwriting workflows associated with your
        organization.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of the active underwriting workflows of the PayFac.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnderwritingWorkflowResponse'
          headers:
            x-total-count:
              schema:
                type: number
              description: Total items in the list
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding-workflow/{workflowId}/default:
    put:
      tags:
        - Underwriting Workflow
      operationId: setDefaultWorkflowById
      summary: Set Default Workflow
      description: >-
        Set a specific Workflow as the default to process the new Onboarding for
        the given Organization and Workflow identifiers. The current default
        Workflow will lose the defaulted assignment.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/workflowId'
      responses:
        '204':
          description: >-
            **No Content**\

            \

            The Workflow has been successfully set as the default Underwriting
            Workflow.
        '304':
          description: |
            **Not Modified**\
            \
            When you'll get `304 Not Modified` response:
            - The Workflow is disabled.
            - The Workflow is already the default.
            - It isn't possible to update the current default Workflow.
        '401':
          description: >-
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to update
            the Workflow.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Workflow doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding-workflow/{workflowId}/enable:
    put:
      tags:
        - Underwriting Workflow
      operationId: enableWorkflowById
      summary: Enable Workflow
      description: Enable a specific Workflow by Organization and Workflow identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/workflowId'
      responses:
        '204':
          description: |-
            **No Content**\
            \
            The Workflow has been successfully enabled.
        '304':
          description: |
            **Not Modified**\
            \
            When you'll get `304 Not Modified` response:
            - The Workflow was already enabled.
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to enable
            Workflows.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Workflow doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding-workflow/{workflowId}/disable:
    put:
      tags:
        - Underwriting Workflow
      operationId: disableWorkflowById
      summary: Disable Workflow
      description: Disable a specific Workflow by Organization and Workflow identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/workflowId'
      responses:
        '204':
          description: |-
            **No Content**\
            \
            The Workflow has been successfully disabled.
        '304':
          description: |
            **Not Modified**\
            \
            The Workflow was already disabled.
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to disable
            Workflows.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Workflow doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding-workflow/{workflowId}:
    put:
      tags:
        - Underwriting Workflow
      summary: Update Workflow
      description: >-
        Update Underwriting Workflow properties for the given Organization and
        Workflow identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/workflowId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnderwritingWorkflowRequestUpdateWorkflow'
        required: true
      responses:
        '204':
          description: '**No Content**'
        '400':
          $ref: '#/components/responses/BadRequestCreateAndUpdateWorkflowResponse'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to update
            Underwriting Workflows.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The User's Organization doesn't exist.
            - The Underwriting Workflow doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Underwriting Workflow
      summary: Retrieve Workflow
      description: Retrieve a list of properties associated with a specific workflow ID.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/workflowId'
      responses:
        '200':
          description: The underwriting workflow indicated by the ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnderwritingWorkflowResponse'
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.\
            When the workflow ID is not valid.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Underwriting Workflow
      operationId: deleteWorkflowById
      summary: Delete Workflow
      description: Delete a specific Workflow by Organization and Workflow identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/workflowId'
      responses:
        '204':
          description: |-
            **No Content**\
            \
            The Workflow has been successfully deleted.
        '400':
          description: |-
            **Bad Request**\
            \
            The Workflow is default and cannot be deleted.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to delete
            Workflows.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Workflow doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding:
    post:
      tags:
        - Merchant Onboarding
      operationId: createOnboarding
      summary: Create Onboarding Application
      description: >-
        Create a new Onboarding Application for the new Account or Sub
        Organization.
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingRequest'
        required: true
      responses:
        '201':
          description: '**Created**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingCreateResponse'
        '400':
          description: |
            **Bad Request**\
            \
            The request body contains a malformed request or is incomplete.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BadRequestX2ErrorV4.1.0'
                  - $ref: '#/components/schemas/contextErrorResponseCreateOnboarding'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The default Workflow doesn't exist.
            - The system token associated to the Workflow doesn't exist.
            - The Organization doesn't exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    description: Format Type.
                    enum:
                      - not-found
                    example: not-found
                  message:
                    type: string
                    description: Error Message.
                    enum:
                      - Onboarding Workflow Not Found
                      - System Token Not Found
                      - Organization Not Found
                    example: Onboarding Workflow Not Found
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Merchant Onboarding
      operationId: listOnboardingByOrganization
      summary: List Onboardings by Organization
      description: >-
        Retrieve the list of Onboarding Applications associated for the given
        Organization Identifier.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sortV2'
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              $ref: '#/components/headers/x-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OnboardingWithoutPrincipal'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token Or Application doesn't have
            permission to view Onboardings.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}:
    get:
      tags:
        - Merchant Onboarding
      operationId: retrieveOnboardingById
      summary: Retrieve Onboarding
      description: >-
        Retrieve a specific Onboarding Application for the given Organization
        and Onboarding identifier.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
      responses:
        '200':
          description: '**OK**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingWithPrincipalResponse'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have the permission to view
            the onboarding.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |-
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist. 
            - The Onboarding not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Merchant Onboarding
      operationId: deleteOnboardingById
      summary: Delete Onboarding
      description: >-
        Delete a specific Onboarding Application for the given Organization and
        Onboarding Identifiers.
      security:
        - apiKey: []
      parameters:
        - name: organizationId
          in: path
          description: >-
            The Identifier of the Organization that created the specific
            Onboarding.
          required: true
          example: 63efb229903e470516491e7c
          schema:
            type: string
        - name: onboardingId
          in: path
          description: >-
            The Identifier of the Onboarding Application which you want to
            delete.
          required: true
          example: 6154ce01387b94001cd87ada
          schema:
            type: string
      responses:
        '204':
          description: |-
            **No Content**\
            \
            The Onboarding Application has been successfully deleted.
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have the permission to
            delete the Onboarding.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Onboarding Application doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /mcc:
    get:
      tags:
        - Merchant Onboarding
      operationId: listMerchantCategoryCodes
      summary: List Merchant Category Codes
      description: >-
        Retrieve the list of Merchant Category Codes supported by Exact
        Payments.
      responses:
        '200':
          description: '**OK**'
          content:
            application/json:
              schema:
                type: array
                description: List of Merchant Category Codes.
                items:
                  $ref: '#/components/schemas/Mcc'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /onboarding:
    get:
      tags:
        - Merchant Onboarding
      operationId: listOnboardings
      summary: List Onboardings
      description: Retrieve the list of Onboarding Applications under the session account.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sortV2'
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              $ref: '#/components/headers/x-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OnboardingWithoutPrincipal'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have the permission to view
            the Onboardings.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: >
            **Not Found**\

            \

            When you'll get `404 Not Found` response:

            - The Organization or Account associated to the session User or
            Application doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /onboarding/search/{businessName}:
    get:
      tags:
        - Merchant Onboarding
      operationId: searchOnboardingByBusinessName
      summary: Search Onboarding by Business Name
      description: >-
        Retrieve the list of Onboarding Applications submitted under your
        Organization matching the Business Name provided as a search parameter.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/OrganizationAccountName'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sortV2'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              $ref: '#/components/headers/x-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OnboardingWithoutPrincipal'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have the permission to view
            the Onboardings.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: >
            **Not Found**\

            \

            When you'll get `404 Not Found` response:

            - The Organization associated to the session User or Application
            doesn't exist. 
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/search/{businessName}:
    get:
      tags:
        - Merchant Onboarding
      operationId: searchOnboardingByOrganizationIdAndBusinessName
      summary: Search Onboarding by Organization identifier and Business Name
      description: >-
        Retrieve the list of Onboarding Applications matching the Business Name
        provided as a search parameter for the given Organization identifier.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/OrganizationAccountName'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sortV2'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              $ref: '#/components/headers/x-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OnboardingWithoutPrincipal'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have the permission to view
            the Onboardings.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The  Organization doesn't exist. 
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/filters:
    get:
      tags:
        - Merchant Onboarding
      operationId: listFilterOptions
      summary: List Filter Options
      description: >-
        Retrieve a list of options that can be used as a filter when retrieving
        the Onboarding Applications associated to the given Organization
        Identifier.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - name: isDeleted
          in: query
          description: >-
            Indicates whether to bring the allowed Organizations for deleted
            Onboarding or not. If not sent, it will bring the allowed
            Organizations for currently active Onboardings under your
            Organization into the system.
          required: false
          schema:
            type: boolean
            default: false
            example: false
      responses:
        '200':
          description: '**OK**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterOnboardings'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - User or Application Token doesn't have the permission to view the
            Accounts.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/note:
    post:
      tags:
        - Admin Tools
      operationId: post-create-notes
      summary: Add Note
      description: >-
        Create a Note for a specific Onboarding Application for the given
        Organization and Onboarding Application identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OnboardingNote'
                - required:
                    - note
      responses:
        '201':
          description: '**Created**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingNote'
        '400':
          description: |-
            **Bad Request**\
            When you'll get `400 Bad Request` response:
            - The request body contains a malformed request or is incomplete.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to create
            Notes.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Onboarding Application doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrorTextOrJSON'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Admin Tools
      operationId: get-list-notes
      summary: List Notes
      description: >-
        Retrieve a list of Notes for the given Organization and Onboarding
        identifier.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sortV2'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              $ref: '#/components/headers/x-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OnboardingNote'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to read
            Notes.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrorTextOrJSON'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/document-request:
    post:
      tags:
        - Document Management
      operationId: createDocumentRequest
      summary: Request Document
      description: >-
        Create a Document Request asking the Organization or Account for
        additional verification.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OnboardingDocumentRequestCreate'
                - required:
                    - subject
                    - body
                    - type
      responses:
        '201':
          description: '**Created**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingDocumentRequestCreate'
        '400':
          $ref: '#/components/responses/BadRequestMinifiedZodError'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to create
            Document Requests.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: >
            **Not Found**\

            \

            When you'll get `404 Not Found` response:

            - The Organization doesn't exist.

            - None of the Onboarding Applications matches the provided deletion
            status.

            - The Onboarding Application doesn't exist.

            - The Application belonging to the User or Application Token doesn't
            exist.

            - The User of the email sender doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Document Management
      summary: List Document Requests
      description: >-
        Retrieve a list of Document Requests for the given Organization and
        Onboarding Application identifiers.
      operationId: get-list-document-requests
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sortV2'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              $ref: '#/components/headers/x-total-count'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingDocumentRequestsResponse'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to list
            Document Requests.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: '**Internal Server Error**'
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/InternalServerError'
            application/json:
              schema:
                $ref: '#/components/schemas/contextErrorResponseSystemError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /document-request/{documentRequestToken}:
    get:
      tags:
        - Document Management
      operationId: listDocumentRequestByToken
      summary: List Document Requests by Token
      description: >-
        List the Document Requests associated with the Token found in the Upload
        Document link URL sent via the Document Request email using [Request
        Document](/operations/createDocumentRequest) API endpoint.
      parameters:
        - $ref: '#/components/parameters/documentRequestToken'
      responses:
        '200':
          description: '**OK**'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Document Request identifier.
                      example: 64c9983041f25a1ae3511d14
                    type:
                      type: string
                      description: The Template used for the Document Request.
                      enum:
                        - application-received
                        - onboarding-pended
                        - onboarding-document-request
                        - onboarding-approved
                        - onboarding-declined
                        - verify-email
                        - password-reset
                      example: onboarding-document-request
        '401':
          description: |
            **Unauthorized**\
            \
            When you'll get `401 Unauthorized` response:
            - The Document Request Token is invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/document-request/{documentRequestId}:
    put:
      tags:
        - Document Management
      operationId: updateDocumentRequest
      summary: Update Document Request
      description: >-
        Update a Document Request for an Onboarding Application for the given
        Organization, Onboarding, and Document Request identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/documentRequestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingDocumentRequestUpdate'
      responses:
        '204':
          description: |-
            **No Content**\
            \
            The Document Request has been successfully updated.
        '304':
          description: >
            **Not Modified**\

            \

            When you'll get `304 Not Modified` response:

            - No changes applied to the Document Request; it was already updated
            with same information.
        '400':
          $ref: '#/components/responses/BadRequestMinifiedZodError'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to update
            Document Requests.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The provided Document Request doesn't exist.
            - The provided Onboarding Application doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Document Management
      summary: Retrieve Document Request
      description: >-
        Retrieve a specific Document Request for the given Organization and
        Onboarding Application identifiers.
      operationId: get-retrieve-document-request
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/documentRequestId'
      responses:
        '200':
          description: '**OK**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingDocumentRequestResponse'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to retrieve
            Document Requests.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Onboarding Application doesn't exist.
            - The Document Request doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: '**Internal Server Error**'
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/InternalServerError'
            application/json:
              schema:
                $ref: '#/components/schemas/contextErrorResponseSystemError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Document Management
      operationId: deleteDocumentRequestById
      summary: Delete Document Request
      description: >-
        Delete a Document Request for an Onboarding Application for the given
        Organization, Onboarding, and Document Request identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/documentRequestId'
      responses:
        '204':
          description: |
            **No Content**\
            \
            The Document Request has been successfully deleted.
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have the permission to
            delete the Document Request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Onboarding Application doesn't exist.
            - The Document Request Identifier doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/document:
    post:
      tags:
        - Document Management
      operationId: uploadDocument
      summary: Upload Document
      description: >-
        Upload a Document for an Onboarding Application for the given
        Organization and Onboarding identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OnboardingDocumentUploadRequest'
      responses:
        '201':
          description: '**Created**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDocumentResponse'
        '400':
          description: |
            **Bad Request**\
            \
            The request body contains a malformed request or is incomplete.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMinifiedZodError'
            plain/text:
              schema:
                $ref: '#/components/schemas/BadRequestUploadDocument'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to upload
            Documents.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The provided Onboarding Application doesn't exist.
            - The Principal doesn't exist on the Onboarding Application.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/NotFound'
            application/json:
              schema:
                $ref: '#/components/schemas/contextErrorResponseUploadDocument'
        '413':
          description: |
            **Payload Too Large**\
            \
            When you'll get `413 Payload Too Large` response:
            - The Document size is > 14 MB.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/PayloadTooLarge'
        '415':
          description: |
            **Unsupported Media Type**\
            \
            When you'll get `415 Unsupported Media Type` response:
            - Unable to identify the Document type.
            - Document type not supported.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
        '500':
          description: |
            **Internal Server Error**
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/InternalServerError'
            application/json:
              schema:
                $ref: '#/components/schemas/contextErrorResponseSystemError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Document Management
      summary: List Uploaded Documents
      description: >-
        Retrieve a list of Documents for the given Organization and Onboarding
        Application identifiers.
      operationId: get-documents
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sortV2'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              $ref: '#/components/headers/x-total-count'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Documents'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to list
            uploaded Documents.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrorTextOrJSON'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /document/{token}:
    post:
      tags:
        - Document Management
      operationId: uploadDocumentByToken
      summary: Upload Document using Token
      description: >-
        Upload a Document for an Onboarding Application using the Token value
        returned in [Create Onboarding](/operations/createOnboarding) response.
      parameters:
        - $ref: '#/components/parameters/onboardingToken'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OnboardingDocumentUploadTokenRequest'
      responses:
        '201':
          description: '**Created**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDocumentResponse'
        '400':
          description: |
            **Bad Request**\
            \
            The request body contains a malformed request or is incomplete.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMinifiedZodError'
            plain/text:
              schema:
                $ref: '#/components/schemas/BadRequestUploadDocument'
        '401':
          description: |
            **Unauthorized**\
            \
            When you'll get `401 Unauthorized` response:
            - The Onboarding Token is invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: >
            **Not Found**\

            \

            When you'll get `404 Not Found` response:

            - The Onboarding Application associated to the Onboarding Token
            doesn't exist.

            - The Principal doesn't exist on the Onboarding Application.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/NotFound'
            application/json:
              schema:
                $ref: '#/components/schemas/contextErrorResponseUploadDocument'
        '413':
          description: |
            **Payload Too Large**\
            \
            When you'll get `413 Payload Too Large` response:
            - The Document size is > 14 MB.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/PayloadTooLarge'
        '415':
          description: |
            **Unsupported Media Type**\
            \
            When you'll get `415 Unsupported Media Type` response:
            - Unable to identify the Document type.
            - Document type not supported.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerErrorTextOrJSON'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}:
    put:
      operationId: put-update-document-type-by-id
      tags:
        - Document Management
      summary: Update Document Type
      description: >-
        Update the `type` of a specific Document for the given Organization,
        Onboarding Application, and Document identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/documentId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  allOf:
                    - $ref: '#/components/schemas/DocumentUploadType'
                    - example: drivers-license
                      description: The new `type` to be updated for the Document.
              required:
                - type
      responses:
        '204':
          description: '**No Content**'
        '304':
          description: >
            **Not Modified**\

            \

            When you'll get `304 Not Modified` response:

            - The Document is not updated. The System is unable to update the
            Document at this time.
        '400':
          description: |
            **Bad Request**\
            \
            The request body contains a malformed request or is incomplete.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/BadRequestUpdateDocumentType'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to update
            Documents.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Onboarding Application doesn't exist.
            - The Document doesn't exist.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrorTextOrJSON'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Document Management
      summary: Retrieve Document
      description: >-
        Retrieve a specific uploaded Document for the given Organization and
        Onboarding Application identifiers.
      operationId: get-retrieve-document
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: '**OK**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to retrieve
            uploaded Document.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Onboarding Application doesn't exist.
            - The Document doesn't exist.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Document Management
      summary: Delete Document
      description: Delete an uploaded document associated with a specific document ID.
      operationId: deleteDocumentById
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/documentId'
      responses:
        '204':
          description: |
            **No content**\
            Indicates that the document has been successfully deleted.
        '304':
          description: |
            **Not Modified**\
            Indicates that the document cannot be deleted.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: >
            **Not Found**\

            When the PayFac's ID is not valid.\

            When the PayFac user has no permissions to operate on that PayFac.\

            When that onboarding does not exist or has been deleted.\

            When that onboarding document does not exist or has been deleted
            before.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/document/download:
    get:
      tags:
        - Document Management
      summary: Download All Documents
      description: >-
        Download all Documents for the given Organization and Onboarding
        Application identifiers.
      operationId: get-download-all-documents
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - name: isDeleted
          in: query
          description: >-
            Indicates whether to download all of the Documents for deleted
            Onboarding or not. If not sent, it will download all the Documents
            for currently active Onboardings under your Organization.
          required: false
          schema:
            type: boolean
            default: false
            example: false
      responses:
        '200':
          description: '**OK**'
          content:
            application/zip:
              schema:
                type: string
                description: >-
                  A ZIP file containing all the Documents attached to the
                  Onboarding Application.
                format: binary
                example: merchantName-documents.zip
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to read
            Documents.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Onboarding Application doesn't exist.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrorTextOrJSON'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}/download:
    get:
      tags:
        - Document Management
      summary: Download Document
      description: >-
        Download a specific Document for the given Organization, Onboarding
        Application, and Document identifiers.
      operationId: get-document-by-id
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
        - $ref: '#/components/parameters/documentId'
        - name: isDeleted
          in: query
          description: >-
            Indicates whether to download the Document for deleted Onboarding or
            not. If not sent, it will download the Document for currently active
            Onboardings under your Organization.
          required: false
          schema:
            type: boolean
            default: false
            example: false
      responses:
        '200':
          description: '**OK**'
          content:
            application/zip:
              schema:
                type: string
                description: >-
                  A ZIP file containing the Document attached to the Onboarding
                  Application.
                format: binary
                example: merchantName-documents.zip
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to read
            Documents.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Organization doesn't exist.
            - The Onboarding Application doesn't exist.
            - The Document doesn't exist.
          content:
            plain/text:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrorTextOrJSON'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/retry-rule:
    put:
      tags:
        - Admin Tools
      summary: Process Verification
      description: >-
        Manually request an underwriting workflow verification to be performed
        outside of the initial onboarding workflow.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
      requestBody:
        description: >-
          ruleName is an existing rule name in the workflow assigned to a
          merchant application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingRetryRuleRequest'
            examples:
              High Risk MCC:
                value:
                  ruleName: High Risk MCC
              Medium Risk Trulioo International WatchList:
                value:
                  ruleName: Medium Risk Trulioo International WatchList
        required: true
      responses:
        '204':
          description: Indicates that the rule was scheduled to retry successfully
        '400':
          description: |
            **Bad Request**\
            When there are errors in the payload on a business level.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.\
            User without permission
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When that onboarding does not exist or has been deleted.\
            When rule name does not exist in the workflow.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/recheck:
    put:
      tags:
        - Admin Tools
      summary: Process Workflow
      description: >-
        Manually request all verifications in an underwriting workflow to be
        performed outside of the initial onboarding process.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
      responses:
        '204':
          description: >-
            The re-check request has been received successfully and will be
            evaluated asynchronously.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.\
            When that onboarding does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/onboarding/{onboardingId}/status:
    put:
      tags:
        - Admin Tools
      summary: Update Onboarding Status
      description: >-
        Manually update the merchant onboarding application status after being
        automatically determined by the decision engine.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/onboardingId'
      requestBody:
        description: The new status and the change reason
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOnboardingStatusRequest'
            examples:
              inProgress:
                value:
                  status: inProgress
              terminated:
                value:
                  status: terminated
                  statusChangeReason: General Risk Concern
        required: true
      responses:
        '204':
          description: Onboarding status successfully updated
        '400':
          description: |
            **Bad Request**\
            When there are errors in the payload on a business level.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.\
            User without permission
        '403':
          description: |
            **Invalid**\
            Invalid new status for the current onboarding
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When that onboarding does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/webhook:
    post:
      tags:
        - Webhooks
      summary: Create Webhook
      description: Create a new webhook and associate a callback URL.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        description: >-
          Fields that compose a webhook definition inside Exact Payments
          ecosystem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
        required: true
      responses:
        '201':
          description: >-
            The response object that indicates the ID of the webhook created in
            the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: |
            **Bad Request**\
            When there are errors in the payload on a business level.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Webhooks
      summary: List Webhooks
      description: Retrieve a list of webhooks created under an organization.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: The webhooks list.
          headers:
            x-total-count:
              description: Total items on the list
              schema:
                type: integer
                example: 5
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookResponse'
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          description: Service Unavailable
  /organization/{organizationId}/webhook/{webhookId}/enable:
    put:
      tags:
        - Webhooks
      summary: Enable Webhook
      description: Enable a webhook notification to be sent to requestor
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/webhookId'
      responses:
        '204':
          description: |
            **No Content**\
            Indicates that the webhook has been successfully enabled
        '304':
          description: |
            **Not Modified**\
            Indicates that the webhook is already enabled
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.\
            When that webhook does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/webhook/{webhookId}/disable:
    put:
      tags:
        - Webhooks
      summary: Disable Webhook
      description: Disable a webhook notification.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/webhookId'
      responses:
        '204':
          description: |
            **No Content**\
            Indicates that the webhook has been successfully disabled
        '304':
          description: |
            **Not Modified**\
            Indicates that the webhook is already disabled
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.\
            When that webhook does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/webhook/{webhookId}:
    put:
      tags:
        - Webhooks
      summary: Update Webhook
      description: Update the properties of an existing webhook.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/webhookId'
      requestBody:
        description: Fields that are updatable in the webhook definition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatableWebhookRequest'
        required: true
      responses:
        '204':
          description: Indicates that the webhook has been successfully updated
        '304':
          description: Not Modified
        '400':
          description: |
            **Bad Request**\
            When there are errors in the payload on a business level.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.\
            When that webhook does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Webhooks
      summary: Retrieve Webhook
      description: Retrieve the details associated with an existing webhook.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/webhookId'
      responses:
        '200':
          description: The full definition of the webhook.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the Webhook does not exist.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Webhooks
      summary: Delete Webhook
      description: Delete a webhook and its associated properties.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/webhookId'
      responses:
        '204':
          description: Indicates that the webhook has been successfully deleted.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's ID is not valid.\
            When the PayFac user has no permissions to operate on that PayFac.\
            When that webhook does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /account/{accountId}/webhook:
    post:
      tags:
        - Webhooks
      summary: Create Webhook
      description: Create a new webhook and associate a callback URL.
      operationId: account-post-create-webhook
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        description: >-
          Fields that compose a webhook definition inside Exact Payments
          ecosystem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
        required: true
      responses:
        '201':
          description: >-
            The response object that indicates the ID of the webhook created in
            the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: |
            **Bad Request**\
            When there are errors in the payload on a business level.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the Account's ID is not valid.\
            When the Account user has no permissions to operate on that Account.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Webhooks
      summary: List Webhooks
      description: Retrieve a list of webhooks created under an organization.
      operationId: account-get-list-webhooks
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: The webhooks list.
          headers:
            x-total-count:
              description: Total items on the list
              schema:
                type: integer
                example: 5
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookResponse'
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the Account's ID is not valid.\
            When the Account user has no permissions to operate on that Account.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          description: Service Unavailable
  /account/{accountId}/webhook/{webhookId}/enable:
    put:
      tags:
        - Webhooks
      summary: Enable Webhook
      description: Enable a webhook notification to be sent to requestor
      operationId: account-enable-webhook
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/webhookId'
      responses:
        '204':
          description: |
            **No Content**\
            Indicates that the webhook has been successfully enabled
        '304':
          description: |
            **Not Modified**\
            Indicates that the webhook is already enabled
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: >
            **Not Found**\

            When the Account's ID is not valid.\

            When the Account user has no permissions to operate on that
            Account.\

            When that webhook does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /account/{accountId}/webhook/{webhookId}/disable:
    put:
      tags:
        - Webhooks
      summary: Disable Webhook
      description: Disable a webhook notification.
      operationId: account-disable-webhook
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/webhookId'
      responses:
        '204':
          description: |
            **No Content**\
            Indicates that the webhook has been successfully disabled
        '304':
          description: |
            **Not Modified**\
            Indicates that the webhook is already disabled
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: >
            **Not Found**\

            When the Account's ID is not valid.\

            When the Account user has no permissions to operate on that
            Account.\

            When that webhook does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /account/{accountId}/webhook/{webhookId}:
    put:
      tags:
        - Webhooks
      summary: Update Webhook
      description: Update the properties of an existing webhook.
      operationId: account-update-webhook
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/webhookId'
      requestBody:
        description: Fields that are updatable in the webhook definition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatableWebhookRequest'
        required: true
      responses:
        '204':
          description: Indicates that the webhook has been successfully updated
        '304':
          description: Not Modified
        '400':
          description: |
            **Bad Request**\
            When there are errors in the payload on a business level.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: >
            **Not Found**\

            When the Account's ID is not valid.\

            When the Account user has no permissions to operate on that
            Account.\

            When that webhook does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Webhooks
      summary: Retrieve Webhook
      description: Retrieve the details associated with an existing webhook.
      operationId: account-get-retrieve-webhook
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/webhookId'
      responses:
        '200':
          description: The full definition of the webhook.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the Webhook does not exist.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Webhooks
      summary: Delete Webhook
      description: Delete a webhook and its associated properties.
      operationId: account-delete-webhook
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/webhookId'
      responses:
        '204':
          description: Indicates that the webhook has been successfully deleted.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: >
            **Not Found**\

            When the Account's ID is not valid.\

            When the Account user has no permissions to operate on that
            Account.\

            When that webhook does not exist or has been deleted.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /report:
    get:
      tags:
        - Reporting
      summary: List Reports
      description: Retrieves a list of report queries that a user has previously created.
      operationId: get-reports
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: '**OK**'
          headers:
            x-total-count:
              description: Total items on the list.
              schema:
                type: integer
                example: 100
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportQueryResponse'
              examples:
                Reports Example:
                  $ref: '#/components/examples/ReportQueryResponse'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to list
            Reports.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /report/{reportId}:
    get:
      tags:
        - Reporting
      summary: Download Report
      description: Download report query results in JSON or CSV format.
      operationId: get-report
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/reportId'
        - name: select
          in: query
          description: The fields that will be returned in the report.
          required: false
          example: transactionId,transactionType,transactionStatus
          schema:
            type: string
        - name: format
          in: query
          description: The format of the file that will be downloaded.
          required: false
          example: csv
          schema:
            type: string
            default: json
            enum:
              - csv
              - json
      responses:
        '200':
          description: >-
            If the report was generated, a stream of JSON file with the report
            result data, otherwise the JSON report query will be retrieved. The
            examples shown are for the JSON format.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDetailsResponse'
              examples:
                Account Report Details Example:
                  $ref: '#/components/examples/AccountReportDetailsResponse'
                Transaction Report Details Example:
                  $ref: '#/components/examples/TransactionReportDetailsResponse'
                Chargeback Report Details Example:
                  $ref: '#/components/examples/ChargebackReportDetailsResponse'
                Settlement Report Details Example:
                  $ref: '#/components/examples/SettlementReportDetailsResponse'
                Funding Report Details Example:
                  $ref: '#/components/examples/FundingReportDetailsResponse'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to download
            Reports.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Report doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Reporting
      summary: Delete Report
      description: Deletes an specific Report for the given Report identifier.
      operationId: delete-report
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/reportId'
      responses:
        '204':
          description: |
            **No Content**\
            \
            The Report has been successfully deleted.
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to delete
            the Report.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Report doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /report/{reportId}/details:
    get:
      tags:
        - Reporting
      summary: Get Report Details
      description: >-
        Retrieves the details of a report query that a user has previously
        created.
      operationId: get-report-details
      security:
        - apiKey: []
      parameters:
        - name: reportId
          in: path
          required: true
          description: The ID of the report query.
          example: 61a91d429bf82a2d8e95738f
          schema:
            type: string
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: '**OK**'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDetailsResponse'
              examples:
                Account Report Details Example:
                  $ref: '#/components/examples/AccountReportDetailsResponse'
                Transaction Report Details Example:
                  $ref: '#/components/examples/TransactionReportDetailsResponse'
                Chargeback Report Details Example:
                  $ref: '#/components/examples/ChargebackReportDetailsResponse'
                Settlement Report Details Example:
                  $ref: '#/components/examples/SettlementReportDetailsResponse'
                Funding Report Details Example:
                  $ref: '#/components/examples/FundingReportDetailsResponse'
        '400':
          description: |
            **Bad Request**
            - When the Report status isn't `completed`.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The report is not completed yet
                  type:
                    type: string
                    example: report-not-completed
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to download
            Reports.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Report doesn't exist.
            - The User doesn't have permissions on the Report Account.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/account:
    get:
      tags:
        - Account Management
      summary: List Accounts
      description: Retrieve a list of accounts underneath an organization.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: The accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponse'
              examples:
                example-1:
                  value:
                    - _id: string
                      id: string
                      type: string
                      parentAccountId: string
                      name: string
                      dbaName: string
                      isLiveCapable: true
                      isDisabled: true
                      liveCapableAt: string
                      features:
                        - string
                      cascadingFeatures:
                        - string
                      createdAt: string
                      updatedAt: string
                      phone: string
                      email: string
                      onlinePresence: string
                      address:
                        line1: MAIN AVENUE 42
                        line2: 42-59B Building A
                        city: PHOENIX
                        postalCode: 85008
                        country: USA
                        countrySubdivision: AZ
                      disabledAt: string
                      disabledByUser: string
                      defaultMerchantId: string
                      defaultTerminalId: string
                      defaultTerminalGatewayId: string
                      ach:
                        customer: string
          headers:
            x-total-count:
              schema:
                type: string
              description: Total items in the list
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the Account does not exist.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /organization/{organizationId}/account/search:
    get:
      tags:
        - Account Management
      summary: Query Accounts
      description: >-
        Retrieve a segmented list of merchant accounts under a parent
        organization that meet the filtered criteria requirements.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - schema:
            type: string
          in: query
          name: q
          description: Search text on name, dbaName, phone, email and onlinePresence fields
      responses:
        '200':
          description: The accounts found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponse'
          headers:
            x-total-count:
              schema:
                type: number
              description: Total items in the list
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's account does not exist.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    parameters:
      - schema:
          type: string
        name: organizationId
        in: path
        required: true
  /organization/{organizationId}/account/{accountId}:
    get:
      tags:
        - Account Management
      summary: Retrieve Account by ID
      description: >-
        Retrieve a list of properties associated with a specific merchant
        account by ID.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: The merchant's account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's account does not exist.\
            When the merchant's account does not exist.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      tags:
        - Account Management
      summary: Update Account by ID
      description: Update a specific merchant account by ID.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/accountId'
      requestBody:
        description: Fields that are required in the request body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        required: true
      responses:
        '204':
          description: |
            **No Content**\
            Indicates that the merchant's account was updated successfully.
        '304':
          description: Not Modified
        '400':
          description: >
            **Bad Request**\

            Indicates that the data present in the body of the request is not
            correct.
        '401':
          description: |
            **Unauthorized**\
            Invalid token supplied.
        '404':
          description: |
            **Not Found**\
            When the PayFac's account does not exist.\
            When the merchant's account does not exist.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /payment-method:
    post:
      tags:
        - Payment Methods
      security:
        - apiKey: []
      summary: Create Payment Method
      description: >-
        API to allow a merchant to create a payment token (Payment Method).


        Note that if you are storing card information, the field
        `card.tokenType` can be set to various values which control where the
        card data will be stored. `platform` means that Exact Payments will
        store the card, and this is of no additional charge. `network` means
        that the card will be stored with a card network provider, and as an
        added benefit will be updated should the card be renewed or the meta
        data for the card change. In order to use `network` as the card token
        type, this feature must be enabled on your account.


        If you are storing ACH related account information, then the data will
        only be stored on the `platform`.
      operationId: post-payment-method
      responses:
        '200':
          $ref: '#/components/responses/PaymentMethod'
        '400':
          description: |-
            The encoded bundle was malformed.
            Check ach is enabled, email is present, data is well formed.
        '401':
          description: Unauthorized. Do not have permission "charges.create".
        '402':
          description: Network tokens feature not enabled
        '404':
          description: Not Found
        '406':
          description: Payment method rejected
        '428':
          description: The encoded key was not recognized
        '500':
          description: Internal Server Error
        '503':
          description: Failed to create payment method. Please try again later
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPaymentMethod'
            examples:
              Card Example:
                $ref: '#/components/examples/CreatePaymentMethodRequest'
              ACH Example:
                $ref: '#/components/examples/CreateAchPaymentMethodRequest'
  /account/{accountId}/payment-method:
    post:
      tags:
        - Payment Methods
      security:
        - apiKey: []
      summary: Create Payment Method for a given Account
      description: >-
        API to allow an Organization to create a payment token (Payment Method)
        for a merchant (accountId).


        Note that if you are storing card information, the field
        `card.tokenType` can be set to various values which control where the
        card data will be stored. `platform` means that Exact Payments will
        store the card, and this is of no additional charge. `network` means
        that the card will be stored with a card network provider, and as an
        added benefit will be updated should the card be renewed or the meta
        data for the card change. In order to use `network` as the card token
        type, this feature must be enabled on your account.


        If you are storing ACH related account information, then the data will
        only be stored on the `platform`.
      operationId: account-post-payment-method
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          $ref: '#/components/responses/PaymentMethod'
        '400':
          description: |-
            The encoded bundle was malformed.
            Check ach is enabled, email is present, data is well formed.
        '401':
          description: Unauthorized. Do not have permission "charges.create".
        '402':
          description: Network tokens feature not enabled
        '404':
          description: Account Not Found
        '406':
          description: Payment method rejected
        '428':
          description: The encoded key was not recognized
        '500':
          description: Internal Server Error
        '503':
          description: Failed to create payment method. Please try again later
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPaymentMethod'
            examples:
              Card Example:
                $ref: '#/components/examples/CreatePaymentMethodRequest'
              ACH Example:
                $ref: '#/components/examples/CreateAchPaymentMethodRequest'
        description: Country code must be in CAPS
  /payment-method/{tokenId}:
    get:
      tags:
        - Payment Methods
      summary: Retrieve a Payment Method
      description: API to allow a merchant to retrieve a specific Payment Method.
      operationId: get-payment-method
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/tokenId'
      responses:
        '200':
          $ref: '#/components/responses/LookupNPaymentMethod'
        '401':
          description: |
            **Unauthorized**\
            Invalid authentication token supplied.
        '404':
          description: |
            **Not Found**\
            When the specified token does not exist.
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
    delete:
      tags:
        - Payment Methods
      summary: Delete a Payment Method
      description: API to allow a merchant to delete a Payment Method.
      operationId: delete-payment-method
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/tokenId'
      responses:
        '204':
          description: |
            **No Content**\
            Indicates that the token was successfully deleted.
        '401':
          description: |
            **Unauthorized**\
            Invalid authentication token supplied.
        '404':
          description: |
            **Not Found**\
            When the specified token does not exist.
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
  /account/{accountId}/payment-method/{tokenId}:
    get:
      tags:
        - Payment Methods
      summary: Retrieve a Payment Method for a given Account
      description: >-
        API to allow an Organization to retrieve a Payment Method of a specific
        merchant (accountId).


        Please note that the Organization(partner) needs to authenticate using
        the partner or org token.
      operationId: account-get-payment-method
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/tokenId'
      responses:
        '200':
          $ref: '#/components/responses/LookupNPaymentMethod'
        '401':
          description: |
            **Unauthorized**\
            Invalid authentication token supplied.
        '404':
          description: |
            **Not Found**\
            When the merchant's account does not exist.
            When the specified token does not exist.
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
    delete:
      tags:
        - Payment Methods
      summary: Delete a Payment Method for a given Account
      description: >-
        API to allow an Organization to delete a Payment Method for a merchant
        (accountId).
      operationId: account-delete-payment-method
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/tokenId'
      responses:
        '204':
          description: |
            **No Content**\
            Indicates that the token was successfully deleted.
        '401':
          description: |
            **Unauthorized**\
            Invalid authentication token supplied.
        '404':
          description: |
            **Not Found**\
            When the merchant's account does not exist.
            When the specified token does not exist.
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
  /payment-method/{payment-token}/verify:
    post:
      tags:
        - Payment Methods
      summary: Verify micro-deposits on an ACH Payment Method
      description: >-
        API for a merchant to verify micro-deposits on an ACH Payment Method.


        Before using an ACH Payment Method, the customer must verify ownership
        of the account. We send two small deposits to the bank account and the
        account owner will need to confirm the amounts received in their
        account.


        The amounts can then be submitted through this endpoint to complete
        account verification.
      operationId: post-verify-microdeposits
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/payment-token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Micro-depositVerificationRequest'
      responses:
        '200':
          $ref: '#/components/responses/AchPaymentMethod'
        '202':
          description: The amounts are not yet settled in the bank account
        '400':
          $ref: '#/components/responses/Failure'
        '401':
          description: |
            **Unauthorized**\
            Invalid authentication token supplied.
        '404':
          description: |
            **Not Found**\
            When the merchant's account does not exist.
            When the specified token does not exist.
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
  /account/{accountId}/payment-method/{payment-token}/verify:
    post:
      tags:
        - Payment Methods
      summary: Verify micro-deposits on an ACH Payment Method for a given Account
      description: >-
        API for an Organization to verify micro-deposits on an ACH Payment
        Method for a merchant (accountId).


        Before using an ACH Payment Method, the customer must verify ownership
        of the account. We send two small deposits to the bank account and the
        account owner will need to confirm the amounts received in their
        account.


        The amounts can then be submitted through this endpoint to complete
        account verification.
      operationId: account-post-verify-microdeposits
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/payment-token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Micro-depositVerificationRequest'
      responses:
        '200':
          $ref: '#/components/responses/AchPaymentMethod'
        '202':
          description: The amounts are not yet settled in the bank account
        '400':
          $ref: '#/components/responses/Failure'
        '401':
          description: |
            **Unauthorized**\
            Invalid authentication token supplied.
        '404':
          description: |
            **Not Found**\
            When the merchant's account does not exist.
            When the specified token does not exist.
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
  /account/{accountId}/orders:
    post:
      tags:
        - Orders
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
      summary: Create Order specifying an account
      description: >-
        Create an Order, needs to specify which account the Order will belong
        to.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        '201':
          $ref: '#/components/responses/order_response'
        '400':
          $ref: '#/components/responses/error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /orders:
    post:
      tags:
        - Orders
      summary: Create Order
      description: Create an Order.
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        '201':
          $ref: '#/components/responses/order_response'
        '400':
          $ref: '#/components/responses/error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
    get:
      tags:
        - Orders
      summary: List Orders
      description: >-
        List all Orders for API key's account, paginated and optionally
        restricted to a date range. Date range must be no more than six months.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/from'
      responses:
        '200':
          $ref: '#/components/responses/order_search'
        '403':
          $ref: '#/components/responses/error_403'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /account/{accountId}/orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get Order Details
      description: Retrieve a specific Order for the given Account and Order identifiers.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          $ref: '#/components/responses/order_response'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
    put:
      tags:
        - Orders
      summary: Update Order
      description: Update details of an existing Order.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/orderId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        '200':
          $ref: '#/components/responses/order_update_response'
        '400':
          $ref: '#/components/responses/error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
      - schema:
          type: string
        name: orderId
        in: path
        required: true
  /orders/{orderId}/accessToken:
    post:
      tags:
        - Orders
      summary: Create New Access Token
      description: >-
        Create a new access token for this Order. This will invalidate any
        existing access tokens.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/orderId'
      responses:
        '201':
          $ref: '#/components/responses/order_access_token'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /orders/{orderId}/reset:
    put:
      tags:
        - Orders
      summary: Reset Payment Attempts
      description: Reset failed payment attempts count to zero for this Order.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          $ref: '#/components/responses/order_update_response'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /payments:
    post:
      tags:
        - Payments
      summary: Create Payment
      description: API for a merchant to create a Payment.
      operationId: post-payment
      security:
        - apiKey: []
      responses:
        '201':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '422':
          $ref: '#/components/responses/error_422'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPayment'
            examples:
              Example 1:
                $ref: '#/components/examples/CreatePaymentRequest'
    get:
      tags:
        - Payments
      summary: Get Payments
      description: API for a merchant to fetch a list of Payments.
      operationId: get-payments
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/Payments'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
  /account/{accountId}/payments:
    post:
      tags:
        - Payments
      summary: Create Payment for a given Account
      description: >-
        API for an Organization to create a Payment on behalf of a merchant
        (accountId).


        Please note that the Organization(partner) needs to authenticate using
        the partner or organization token.
      operationId: account-post-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '201':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '422':
          $ref: '#/components/responses/error_422'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPayment'
            examples:
              Example 1:
                $ref: '#/components/examples/CreatePaymentRequest'
    get:
      tags:
        - Payments
      summary: Get Payments for a given Account
      description: >-
        API for an Organization to fetch a list of Payments for a specific
        merchant (accountId).


        Please note that the Organization(partner) needs to authenticate using
        the partner or org token.
      operationId: account-get-payments
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          $ref: '#/components/responses/Payments'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /payments/{paymentId}:
    get:
      tags:
        - Payments
      summary: Get details of a specific Payment
      description: API for a merchant to retrieve the details of a specific Payment.
      operationId: get-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/paymentId'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /account/{accountId}/payments/{paymentId}:
    get:
      tags:
        - Payments
      summary: Get details of a specific Payment for a given Account
      description: >-
        API for an Organization to retrieve the details of a specific Payment
        for a specific merchant (accountId).


        Please note that the Organization(partner) needs to authenticate using
        the partner or org token.
      operationId: account-get-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/paymentId'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /payments/{paymentId}/capture:
    post:
      tags:
        - Payments
      summary: Capture an existing authorization
      description: >-
        API for a merchant to capture an existing authorization. Note that ACH
        transactions are not able to be captured as they do not support
        pre-authorization.


        Capture completes the transaction so that it can be funded. Captures can
        be for less, same or more than the original authorization.
      operationId: capture-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferencedPayment'
            examples:
              Card Example:
                $ref: '#/components/examples/SecondaryPaymentRequest'
              ACH Example:
                $ref: '#/components/examples/ACHVoidRequest'
      responses:
        '201':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/payments_error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /account/{accountId}/payments/{paymentId}/capture:
    post:
      tags:
        - Payments
      summary: Capture an existing authorization for a given Account
      description: >-
        API for an Organization to capture an existing authorization for a
        merchant (accountId). Note that ACH transactions are not able to be
        captured as they do not support pre-authorization.


        Please note that the Organization(partner) needs to authenticate using
        the partner or org token.


        Capture completes the transaction so that it can be funded. Captures can
        be for less, same or more than the original authorization.
      operationId: account-capture-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferencedPayment'
            examples:
              Card Example:
                $ref: '#/components/examples/SecondaryPaymentRequest'
              ACH Example:
                $ref: '#/components/examples/ACHVoidRequest'
      responses:
        '201':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/payments_error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /payments/{paymentId}/refund:
    post:
      tags:
        - Payments
      summary: Refund a specific payment
      description: >-
        API for a merchant to refund a specific payment. Note that ACH
        transactions are not refundable. Refunds typically happen after a batch
        closes and refunds a partial or whole amount of the transaction.
      operationId: refund-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferencedPayment'
            examples:
              Card Example:
                $ref: '#/components/examples/SecondaryPaymentRequest'
              ACH Example:
                $ref: '#/components/examples/ACHVoidRequest'
      responses:
        '201':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/payments_error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /account/{accountId}/payments/{paymentId}/refund:
    post:
      tags:
        - Payments
      summary: Refund a specific Payment for a given Account
      description: >-
        API for an Organization to refund a specific Payment for a merchant
        (accountId). Note that ACH transactions are not refundable.


        Please note that the Organization(partner) needs to authenticate using
        the partner or org token.


        Refunds typically happen after a batch closes and refunds a partial or
        whole amount of the transaction.
      operationId: account-refund-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferencedPayment'
            examples:
              Card Example:
                $ref: '#/components/examples/SecondaryPaymentRequest'
              ACH Example:
                $ref: '#/components/examples/ACHVoidRequest'
      responses:
        '201':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/payments_error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /payments/{paymentId}/void:
    post:
      tags:
        - Payments
      summary: Void a specific Payment
      description: >-
        API for a merchant to void a specific Payment. Note that ACH
        transactions are not voidable. Voids typically happen before a batch
        closes and removes the transaction from the batch.
      operationId: void-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferencedPayment'
            examples:
              Card Example:
                $ref: '#/components/examples/SecondaryPaymentRequest'
              ACH Example:
                $ref: '#/components/examples/ACHVoidRequest'
      responses:
        '201':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/payments_error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /account/{accountId}/payments/{paymentId}/void:
    post:
      tags:
        - Payments
      summary: Void a specific Payment for a given Account
      description: >-
        API for an Organization to void a specific Payment for a merchant
        (accountId).


        Please note that the Organization(partner) needs to authenticate using
        the partner or org token.


        Note that ACH transactions are not voidable. Voids typically happen
        before a batch closes and removes the transaction from the batch.
      operationId: account-void-payment
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/paymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferencedPayment'
            examples:
              Card Example:
                $ref: '#/components/examples/SecondaryPaymentRequest'
              ACH Example:
                $ref: '#/components/examples/ACHVoidRequest'
      responses:
        '201':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/payments_error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payments_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
  /account/{accountId}/customer:
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Query customers for a given Account (Partner context)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  phone:
                    type: string
                  token:
                    type: string
                  addresses:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                        city:
                          type: string
                        country:
                          type: string
                        line1:
                          type: string
                        line2:
                          type: string
                        postalCode:
                          type: string
                        state:
                          type: string
                        isDefault:
                          type: boolean
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                x-examples:
                  example-1:
                    id: string
                    name: string
                    email: string
                    phone: string
                    token: string
                    addresses:
                      - label: string
                        city: string
                        country: string
                        line1: string
                        line2: string
                        postalCode: string
                        state: string
                        isDefault: true
                    createdAt: string
                    updatedAt: string
              examples:
                example-1:
                  value:
                    id: string
                    name: string
                    email: string
                    phone: string
                    token: string
                    addresses:
                      - label: string
                        city: string
                        country: string
                        line1: string
                        line2: string
                        postalCode: string
                        state: string
                        isDefault: true
                    createdAt: string
                    updatedAt: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: account-get-customer
      description: >-
        This API returns the list of customers under a given merchant. It is
        meant to be invoked by a Organization(partner) to fetch the list of all
        customers for a given merchant(accountId) in the request URI.  Please
        note that the Organization(partner) needs to authenticate using the
        partner or org token. 
      parameters:
        - $ref: '#/components/parameters/accountId'
        - schema:
            type: number
          in: query
          name: $limit
          description: >-
            Sets the number of documents to return, and defaults to 100. It has
            a maximum of 1000.
        - schema:
            type: number
          in: query
          name: $skip
          description: Sets the number of documents to skip.
        - $ref: '#/components/parameters/sort'
    post:
      tags:
        - Customers
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
      summary: Create Customer for a given Account
      operationId: account-post-customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  phone:
                    type: string
                  token:
                    type: string
                  addresses:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                        city:
                          type: string
                        country:
                          type: string
                        line1:
                          type: string
                        line2:
                          type: string
                        postalCode:
                          type: string
                        state:
                          type: string
                        isDefault:
                          type: boolean
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                x-examples:
                  example-1:
                    id: string
                    name: string
                    email: string
                    phone: string
                    token: string
                    addresses:
                      - label: string
                        city: string
                        country: string
                        line1: string
                        line2: string
                        postalCode: string
                        state: string
                        isDefault: true
                    createdAt: string
                    updatedAt: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: >-
        In order to create a customer API consumers can issue a call to the
        following endpoint. Note that as mentioned at the start of the document,
        an account id can be provided in the path.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
  /customer:
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Query customers for a given Account (Sub-merchant context)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  phone:
                    type: string
                  token:
                    type: string
                  addresses:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                        city:
                          type: string
                        country:
                          type: string
                        line1:
                          type: string
                        line2:
                          type: string
                        postalCode:
                          type: string
                        state:
                          type: string
                        isDefault:
                          type: boolean
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                x-examples:
                  example-1:
                    id: string
                    name: string
                    email: string
                    phone: string
                    token: string
                    addresses:
                      - label: string
                        city: string
                        country: string
                        line1: string
                        line2: string
                        postalCode: string
                        state: string
                        isDefault: true
                    createdAt: string
                    updatedAt: string
              examples:
                example-1:
                  value:
                    id: string
                    name: string
                    email: string
                    phone: string
                    token: string
                    addresses:
                      - label: string
                        city: string
                        country: string
                        line1: string
                        line2: string
                        postalCode: string
                        state: string
                        isDefault: true
                    createdAt: string
                    updatedAt: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: get-customer
      description: >-
        This API returns the list of customers for a given merchant. It is meant
        to be invoked by a merchant to fetch the list of their own customers.
        Please note that there is no need to provide the (accountId) in the
        request URI, since the merchant needs to provide the account token to
        limit the scope for their own account
      parameters:
        - schema:
            type: number
          in: query
          name: $limit
          description: >-
            Sets the number of documents to return, and defaults to 100. It has
            a maximum of 1000.
        - schema:
            type: number
          in: query
          name: $skip
          description: Sets the number of documents to skip.
        - $ref: '#/components/parameters/sort'
    post:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Create Customer
      operationId: post-customer
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >-
        In order to create a customer API consumers can issue a call to the
        following endpoint. Note that as mentioned at the start of the document,
        an account id can be provided in the path.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
  /account/{accountId}/customer/{customerId}:
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Get Customer by ID for a given Account
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/customerId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
        '504':
          description: Gateway Timeout
      operationId: account-get-customer-:id
      description: >-
        For fetching singular customer objects API consumers can issue a call to
        the following endpoint. If the id provided in the path exists it will be
        returned in the response body. It is meant to be invoked by a
        Organization(partner) for a given merchant(accountId) in the request
        URI.  Please note that the Organization(partner) needs to authenticate
        using the partner or org token. 
    put:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Update Customer by ID for a given Account
      operationId: account-put-customer-id
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/customerId'
      responses:
        '204':
          description: No Content
        '304':
          description: Not Modified
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >
        It is necessary for API consumers to update customer details from time
        to time. This can be achieved with the following call.

        Note that the body can contain a subset of MongoDB update operators for
        more fine grain control. See
        https://www.mongodb.com/docs/manual/reference/operator/update/ for
        reference.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
        description: ''
    delete:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Delete Customer by ID for a given Account
      operationId: account-delete-customer-id
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/customerId'
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >-
        On occasion it is necessary for an API consumer to delete customers. The
        following call supports this use case.
  /customer/{customerId}:
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Get Customer by ID
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                example-1:
                  value:
                    id: string
                    name: string
                    email: string
                    phone: string
                    token: string
                    addresses:
                      - label: string
                        city: string
                        country: string
                        line1: string
                        line2: string
                        postalCode: string
                        state: string
                        isDefault: true
                    createdAt: string
                    updatedAt: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: get-customer-:id
      description: >-
        For fetching singular customer objects API consumers can issue a call to
        the following endpoint. If the id provided in the path exists it will be
        returned in the response body. Please note that there is no need to
        provide the (accountId) in the request URI, since the merchant needs to
        provide the account token to limit the scope for their own account
    put:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Update Customer by ID
      operationId: put-customer-id
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        '204':
          description: No Content
        '304':
          description: Not Modified
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >
        It is necessary for API consumers to update customer details from time
        to time. This can be achieved with the following call.

        Note that the body can contain a subset of MongoDB update operators for
        more fine grain control. See
        https://www.mongodb.com/docs/manual/reference/operator/update/ for
        reference.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
    delete:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Delete Customer by ID
      operationId: delete-customer-id
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >-
        On occasion it is necessary for an API consumer to delete customers. The
        following call supports this use case.
  /account/{accountId}/customer/{customerId}/payment-method:
    parameters:
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/customerId'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Query Payment Methods for Customer for a given Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: account-get-customer-id-payment-method
      description: >-
        To query payment methods associated with a customer the following call
        can be used. Note that because card information is encrypted, query
        string filtering is not supported. That said $limit and $skip can still
        be used for pagination.  It is meant to be invoked by a
        Organization(partner) for a given merchant(accountId) in the request
        URI.  Please note that the Organization(partner) needs to authenticate
        using the partner or org token. 
      parameters: []
    post:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Attach Payment Method for a Customer (Partner context)
      operationId: account-post-customer-id-payment-method
      responses:
        '201':
          $ref: '#/components/responses/PaymentMethod'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized. Need permission 'charges.create'
        '404':
          description: Not Found
      description: >-
        This API associates a payment method with a customer. It is meant to be
        invoked by a partner to associate the payment method for specific
        customer  under a specific sub-merchant as identified by the {customer
        Id} and {accountId) parameters in the request URI. Please note that the
        partner needs to authenticate using the partner or org token when making
        this API call. Please note that the payment method is represented by a
        token returned earlier as a response to the POST method of the resource
        endpoint: /account/{accountId}/payment-method
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                isDefault:
                  type: boolean
                label:
                  type: string
              required:
                - token
  /account/{accountId}/customer/{customerId}/payment-method/default:
    parameters:
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/customerId'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Get Default Payment Method Associated to a Customer for a given Account
      responses:
        '200':
          description: >-
            The response contains the details of the Payment Method that was
            marked as default for this Customer.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
              examples:
                Card Example:
                  $ref: '#/components/examples/CreatePaymentMethodResponse'
                ACH Example:
                  $ref: '#/components/examples/CreateAchPaymentMethodResponse'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/payment_method_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
      operationId: account-get-customer-default-payment-method
      description: >-
        You can associate multiple Payment Methods to a single Customer;
        however, only one of those can be used as default. This endpoint will
        allow you to retrieve the Payment Method marked as default for the
        specified Customer. It is meant to be invoked by an Organization
        (Partner) for a given merchant (`accountId`) in the request URI. Please
        note that the Organization (Partner) needs to authenticate using the
        Partner or Organization token.
      parameters: []
  /account/{accountId}/customer-token/{customerToken}/payment-method:
    parameters:
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/customerToken'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Query Payment Methods for Customer by customer token for a given Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: account-get-customer-token-payment-method
      description: >-
        This route takes the customer token instead of an id to enable users to
        list  payment methods associated with a customer when they do not have
        the customer's id. Please note that there is no need to provide the
        (accountId) in the request URI, since the merchant needs to provide the
        account token to limit the scope for their own account
      parameters: []
  /customer-token/{customerToken}/payment-method:
    parameters:
      - $ref: '#/components/parameters/customerToken'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Query Payment Methods for Customer by customer token
      responses:
        '200':
          $ref: '#/components/responses/PaymentMethods'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: get-customer-token-payment-method
      description: >-
        This route takes the customer token instead of an id to enable users to
        list  payment methods associated with a customer when they do not have
        the customer's id.
      parameters:
        - schema:
            type: string
          in: query
          name: $limit
          description: >-
            Sets the number of documents to return, and defaults to 100. It has
            a maximum of 1000.
        - schema:
            type: string
          in: query
          name: $skip
          description: Sets the number of documents to skip.
  /customer/{customerId}/payment-method:
    parameters:
      - $ref: '#/components/parameters/customerId'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Query Payment Methods for Customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: get-customer-id-payment-method
      description: >-
        To query payment methods associated with a customer the following call
        can be used. Note that because card information is encrypted, query
        string filtering is not supported. That said $limit and $skip can still
        be used for pagination.
      parameters: []
    post:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Attach Payment Method for a Customer (Sub-merchant context)
      operationId: post-customer-id-payment-method
      responses:
        '201':
          $ref: '#/components/responses/PaymentMethod'
        '304':
          description: Not Modified
        '400':
          description: Bad Request
        '401':
          description: Unauthorized. Need permission 'charges.create'
        '404':
          description: Not Found
      description: >-
        This API associates a payment method with a customer. It is meant to be
        invoked by a sub-merchant to associate the payment method for a specific
        customer as identified by the {customer Id} parameter in the request
        URI. Please note that the sub-merchant needs to provide the account
        authentication token when making this API call. Please note that the
        payment method in the request is represented by a token returned earlier
        as a response to the POST method of the resource endpoint:
        /payment-method
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                isDefault:
                  type: boolean
                label:
                  type: string
              required:
                - token
        description: ''
  /account/{accountId}/customer/{customerId}/payment-method/{tokenId}:
    parameters:
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/customerId'
      - $ref: '#/components/parameters/tokenId'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Get Payment Method Associated with Customer by Token for a given Account
      operationId: account-get-customer-customerId-payment-method-token
      responses:
        '200':
          $ref: '#/components/responses/PaymentMethod'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >-
        To retrieve a payment method as well as ensure it is associated with a
        customer. The following call can be used.  It is meant to be invoked by
        a Organization(partner) for a given merchant(accountId) in the request
        URI.  Please note that the Organization(partner) needs to authenticate
        using the partner or org token. 
    delete:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: >-
        Delete Payment Method Associated with Customer by Token for a given
        Account
      operationId: account-delete-customer-customerId-payment-method-token
      responses:
        '204':
          description: No Content
        '304':
          description: Not Modified
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >-
        In order to unlink a payment method from a customer, the following call
        can be made.
  /customer/{customerId}/payment-method/{tokenId}:
    parameters:
      - $ref: '#/components/parameters/customerId'
      - $ref: '#/components/parameters/tokenId'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Get Payment Method Associated with Customer by Token
      operationId: get-customer-customerId-payment-method-token
      responses:
        '200':
          $ref: '#/components/responses/PaymentMethod'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >-
        To retrieve a payment method as well as ensure it is associated with a
        customer. The following call can be used.  Please note that there is no
        need to provide the (accountId) in the request URI, since the merchant
        needs to provide the account token to limit the scope for their own
        account
    delete:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Delete Payment Method Associated with Customer by Token
      operationId: delete-customer-customerId-payment-method-token
      responses:
        '204':
          description: No Content
        '304':
          description: Not Modified
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      description: >-
        In order to unlink a payment method from a customer, the following call
        can be made.
  /account/{accountId}/customer/{customerId}/payments:
    parameters:
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/customerId'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Get Customer Payments for a given Account
      responses:
        '200':
          $ref: '#/components/responses/Payments'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: account-get-customer-customerId-payments
      description: >-
        In order to fetch payments performed by a customer, the following
        endpoint can be called. It is meant to be invoked by a
        Organization(partner) for a given merchant(accountId) in the request
        URI.  Please note that the Organization(partner) needs to authenticate
        using the partner or org token.
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
  /customer/{customerId}/payments:
    parameters:
      - $ref: '#/components/parameters/customerId'
    get:
      tags:
        - Customers
      security:
        - apiKey: []
      summary: Get Customer Payments
      responses:
        '200':
          $ref: '#/components/responses/Payments'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: get-customer-customerId-payments
      description: >-
        In order to fetch payments performed by a customer, the following
        endpoint can be called. Please note that there is no need to provide the
        (accountId) in the request URI, since the merchant needs to provide the
        account token to limit the scope for their own account
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
  /account/{accountId}/orders/{orderId}/pay:
    parameters:
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/orderId'
    post:
      summary: Pay for Order with Token
      operationId: post-account-accountId-orders-orderId-pay
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    type: object
                    description: Order details response object.
                    properties:
                      orderId:
                        type: string
                        description: Order identifier associated with a Payment.
                        example: 88bb4625-89ca-4c1b-a0a9-9de19665019a
                      status:
                        type: string
                        example: paid
                        description: Status of the payment.
                  paymentId:
                    type: string
                    example: 851eda75-0c6a-4a78-b2e4-4e8b66f53a3a
                    description: Payment identifier.
                x-examples:
                  Example 1:
                    order:
                      orderId: 88bb4625-89ca-4c1b-a0a9-9de19665019a
                      status: paid
                    paymentId: 851eda75-0c6a-4a78-b2e4-4e8b66f53a3a
              examples:
                Example 1:
                  value:
                    order:
                      orderId: 88bb4625-89ca-4c1b-a0a9-9de19665019a
                      status: paid
                    paymentId: 851eda75-0c6a-4a78-b2e4-4e8b66f53a3a
        '400':
          $ref: '#/components/responses/pay_error_400'
        '403':
          $ref: '#/components/responses/error_403'
        '404':
          $ref: '#/components/responses/pay_error_404'
        '500':
          $ref: '#/components/responses/error_500'
        '503':
          $ref: '#/components/responses/error_503'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: object
                  description: Payment Method of the Order.
                  example: f0db7065-be66-4501-b49b-5eb56e265cb1
                  properties:
                    token:
                      type: string
                      description: Identification token for the order from Payment Method.
                      example: f0db7065-be66-4501-b49b-5eb56e265cb1
            examples:
              Example 1:
                value:
                  payment_method:
                    token: f0db7065-be66-4501-b49b-5eb56e265cb1
      tags:
        - Orders
      security:
        - apiKey: []
  /account/{accountId}/apple-pay:
    post:
      tags:
        - Account Management
      summary: Register Domain for Apple Pay
      description: >-
        This endpoint allows you to register one or more of your domains for use
        with Apple Pay &amp; ExactJS.


        Please [read our guide](./docs/ExactJS-ApplePay) on the setup steps
        required before you can use this endpoint.
      operationId: accountRegisterApplePayDomains
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        description: An array of domains you wish to use with Apple Pay &amp; ExactJS.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplePayDomains'
        required: true
      responses:
        '201':
          description: '**Created**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePayDomains'
        '400':
          $ref: '#/components/responses/apple_error_400'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to register
            Apple Pay domains.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Account doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - Account Management
      summary: List Apple Pay Domains
      description: >-
        This endpoint allows you to retrieve a list of your domains which are
        registered for Apple Pay &amp; ExactJS.
      operationId: listApplePayDomains
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: '**OK**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePayDomains'
        '401':
          description: >
            **Unauthorized**\

            \

            When you'll get `401 Unauthorized` response:

            - The User or Application Token is invalid.

            - The User or Application Token doesn't have permission to view the
            registered Apple Pay domains.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: |
            **Not Found**\
            \
            When you'll get `404 Not Found` response:
            - The Account doesn't exist.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    # delete:
    #   tags:
    #     - Account Management
    #   summary: Deregister Apple Pay Domains
    #   description: >-
    #     This endpoint allows you to deregister one or more domains which you
    #     have previously registered for Apple Pay &amp; ExactJS.


    #     Once a domain is successfully deregistered, Apple Pay will instantly
    #     stop working on that domain.
    #   operationId: deregisterApplePayDomains
    #   security:
    #     - apiKey: []
    #   parameters:
    #     - $ref: '#/components/parameters/accountId'
    #   requestBody:
    #     description: >-
    #       An array of domains you no longer wish to use with Apple Pay &amp;
    #       ExactJS.
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/ApplePayDomains'
    #     required: true
    #   responses:
    #     '200':
    #       description: The registered Apple Pay domain has been successfully deleted.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ApplePayDomains'
    #     '401':
    #       description: >
    #         **Unauthorized**\

    #         \

    #         When you'll get `401 Unauthorized` response:

    #         - The User or Application Token is invalid.

    #         - The User or Application Token doesn't have permission to
    #         deregister Apple Pay domains.
    #       content:
    #         text/plain:
    #           schema:
    #             $ref: '#/components/schemas/Unauthorized'
    #     '404':
    #       description: |
    #         **Not Found**\
    #         \
    #         When you'll get `404 Not Found` response:
    #         - The Account doesn't exist.
    #       content:
    #         text/plain:
    #           schema:
    #             $ref: '#/components/schemas/NotFound'
    #     '500':
    #       $ref: '#/components/responses/ServerError'
    #     '503':
    #       $ref: '#/components/responses/ServiceUnavailable'
components:
  responses:
    error_generic:
      description: Unspecified error.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              messages:
                type: array
                maxItems: 50
                items:
                  type: string
    payment_search:
      description: List of payments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/payment_search'
    pay_error_400:
      description: |
        **Bad Request**\
        When there are errors in the payload
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              type:
                type: string
                description: Type of the validation error.
                example: invalid-request-error
              code:
                type: string
                description: Code of the validation error.
                example: order-validation-error
              message:
                type: string
                description: Message explaining the validation error.
                example: Order transaction not found
              requestId:
                type: string
                description: Identifier of the request.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
              metadata:
                type: object
                properties:
                  type:
                    type: string
                    description: It shows what type it is.
                    example: payment-with-token-failed
                  message:
                    type: string
                    description: It shows what is missing.
                    example: Invalid order ID
    payments_error_400:
      description: |
        **Bad Request**\
        When there are errors in the payload.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              type:
                type: string
                description: Type of the validation error.
                example: api-error
                enum:
                  - api-error
                  - invalid-request-error
              code:
                type: string
                description: Code of the validation error.
                example: payments-validation-error
              message:
                type: string
                description: Message explaining the validation error.
                example: Failed to creating secondary transaction
              requestId:
                type: string
                description: Request identifier in UUID format.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
              metadata:
                type: object
                properties:
                  type:
                    type: string
                    description: It shows what type it is.
                    example: api-error
                  message:
                    type: object
                    description: Message explaining what type of error it is.
                    properties:
                      messages:
                        type: array
                        items:
                          type: string
                          example: Invalid Authorization Number
                          enum:
                            - Invalid Authorization Number
    apple_error_400:
      description: |
        **Bad Request**\
        \
        The request body contains a malformed request or is incomplete.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              issues:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      description: >-
                        Validation error code. The retrieved value will drive
                        which extra fields will be shown.
                      enum:
                        - invalid_type
                        - too_small
                        - too_big
                      example: too_small
                    path:
                      type: array
                      description: Field location in the request body.
                      items:
                        type: string
                        description: Field level path.
                      example:
                        - domains
                    message:
                      type: string
                      description: Message explaining the validation error.
                      example: Array must contain at least 1 element(s)
                    type:
                      type: string
                      description: >-
                        The type of the data failing validation. It is only
                        retrieved when `code = too_small` or `code = too_big`.
                      enum:
                        - array
                      example: array
                    minimum:
                      type: number
                      description: >-
                        The expected minimum length/value. It is only retrieved
                        when `code = too_small`.
                      example: 1
                    maximum:
                      type: number
                      description: >-
                        The expected maximum length/value. It is only retrieved
                        when `code = too_big`.
                      example: 100
                    expected:
                      type: string
                      description: >-
                        Expected field type. It is only retrieved when `code =
                        invalid_type`.
                      enum:
                        - array
                      example: array
                    received:
                      type: string
                      description: >-
                        Field type received. It is only retrieved when `code =
                        invalid_type`.
                      enum:
                        - string
                        - number
                        - object
                        - boolean
                        - 'null'
                        - undefined
                        - nan
                        - integer
                        - float
                        - date
                        - bigint
                        - map
                        - set
                      example: string
                    inclusive:
                      type: boolean
                      description: >-
                        Whether the minimum or maximum is included in the range
                        of acceptable values. It is only retrieved when `code =
                        too_small` or `code = too_big`.
                      example: true
              name:
                type: string
                description: >-
                  The error type. It has a fixed value of `ZodError` for `400
                  Bad Request`.
                default: ZodError
    pay_error_404:
      description: |
        **Not found**\
        When there are no accounts/orders/payment found
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              type:
                type: string
                description: Type of the external error.
                example: api-error
              code:
                type: string
                description: Code of the api error.
                example: order-validation-error
              message:
                type: string
                description: Message explaining the error.
                enum:
                  - payment method not found.
              requestId:
                type: string
                description: Request identifier in UUID format.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
              metadata:
                type: object
                properties:
                  type:
                    type: string
                    description: It shows what type it is.
                    example: payment-with-token-failed
                  message:
                    type: string
                    description: It shows what is missing.
                    example: Invalid token
    error_400:
      description: |
        **Bad Request**\
        When there are errors in the payload
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              type:
                type: string
                description: Type of the validation error.
                example: invalid-request-error
              code:
                type: string
                description: Code of the validation error.
                example: validation-error
              message:
                type: string
                description: Message explaining the validation error.
                example: Client request body failed validation
              requestId:
                type: string
                description: Request identifier in UUID format.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
              pathIssues:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      description: It shows which field is/are missing.
                      example: reference.referenceNo
                      enum:
                        - reference.referenceNo
                        - paymentMethod.token
                        - paymentMethod.creditCard.track1
                        - paymentMethod.creditCard.track2
                        - paymentMethod.ach
                        - paymentMethod.paypal
                        - paymentMethod.debitBillPay
                        - paymentMethod.applePay
                        - paymentMethod.googlePay
                    type:
                      type: string
                      description: It shows what is expecting.
                      example: tooSmall
                      enum:
                        - tooSmall
                        - invalidType
                    details:
                      type: array
                      example:
                        - String must contain at least 1 character(s)
                      items:
                        enum:
                          - String must contain at least 1 character(s)
                          - Required
    error_403:
      description: |
        **Access Denied**\
        Credentials supplied do not grant access to the requested resource.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              code:
                type: string
                description: Code of the authorization error.
                example: payments-forbidden-error
                enum:
                  - order-forbidden-error
                  - payments-forbidden-error
              message:
                type: string
                description: Message explaining the authorization error.
                example: You do not have permission to access this resource.
                enum:
                  - You do not have permission to access this resource
                  - Account not found
              type:
                type: string
                description: It shows as authorization error.
                example: authorization-error
              requestId:
                type: string
                description: Request identifier in UUID format.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
    payments_error_404:
      description: |
        **Not Found**\
        \
        When you'll get `401 Unauthorized` response:
        - When there are no Accounts/Orders/Payment found.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              type:
                type: string
                description: Type of the error.
                example: resource-not-found-error
              code:
                type: string
                description: Code of the api error.
                example: payments-not-found-error
              message:
                type: string
                description: Message explaining the error.
                example: No account found.
                enum:
                  - No account found.
              requestId:
                type: string
                description: Request identifier in UUID format.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
    error_404:
      description: |
        **Not found**\
        When there are no accounts/orders/payment found
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              type:
                type: string
                description: Type of the external error.
                example: api-error
              code:
                type: string
                description: Code of the api error.
                example: order-validation-error
              message:
                type: string
                description: Message explaining the error.
                enum:
                  - Failed to get order details.
                  - Failed to create an access token.
              requestId:
                type: string
                description: Identifier of the request.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
              metadata:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      messages:
                        type: array
                        items:
                          type: string
                          enum:
                            - Unable to find specified order.
                            - Order does not exist.
    error_422:
      description: |
        **Unprocessable Content**
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              code:
                type: string
                description: Code of the custom error.
                example: payments-validation-error
              message:
                type: string
                description: Message explaining the custom error.
                example: Payments validation error
              type:
                type: string
                description: It is shows as a custom error.
                example: invalid-request-error
              requestId:
                type: string
                description: Request identifier in UUID format.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
    payment_method_error_404:
      description: |
        **Not Found**\
        The requested resource can not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
          examples:
            Payment Method Not Found:
              $ref: '#/components/examples/PaymentMethodNotFoundResponse'
    error_500:
      description: |
        **Internal Server Error**
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              code:
                type: string
                description: Code of the system error.
                example: unhandled
              message:
                type: string
                description: Message explaining the system error.
                example: >-
                  CastError: Cast to ObjectId failed for value
                  "645d2a4bd0f3388adde2b3e" (type string) at path "_id" for
                  model "Transaction"
                      at ObjectId.cast.
              type:
                type: string
                description: It is shows as system error.
                example: system-error
              requestId:
                type: string
                description: Request identifier in UUID format.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
    error_503:
      description: |
        **Service Unavailable**
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              code:
                type: string
                description: Code of the custom error.
                example: unhandled
              message:
                type: string
                description: Message explaining the custom error.
                example: Service Unavailable
              type:
                type: string
                description: It is shows as custom error.
                example: custom-error
              requestId:
                type: string
                description: Request identifier in UUID format.
                example: bcc78633-cd09-4e7d-8f3b-d593fdc1439c
    payment:
      description: Payment was created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/payment_response'
    payment_detail:
      description: Details of a single payment.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/payment_detail'
    token:
      description: Token was created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenResponse'
    order_search:
      description: Details of an existing orders.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/order_search'
    order_response:
      description: Order created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/order_response'
    order_update_response:
      description: Order Updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/order_response'
    order_access_token:
      description: New order access token created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/order_access_token'
    account_search:
      description: List of existing accounts.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/account_search'
    account_details:
      description: Details of an existing account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/account_details'
    merchant_search:
      description: List of an account's existing merchants.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/merchant_search'
    merchant_details:
      description: Details of an existing merchant.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/merchant_details'
    terminal_search:
      description: List of a merchant's existing terminals.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/terminal_search'
    terminal_details:
      description: Details of an existing terminal.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/terminal_details'
    user_search:
      description: List of an account's existing admin users.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user_search'
    user_details:
      description: Details of an existing merchant admin user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user_details'
    Failure:
      description: Problems with the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestFailure'
    BadRequestCreateAndUpdateWorkflowResponse:
      description: |
        **Bad Request**\
        \
        The request body contains a malformed request or is incomplete.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/BadRequestMinifiedZodError'
              - $ref: '#/components/schemas/BadRequestInvalidWorkflowError'
    BadRequestZodError:
      description: |
        **Bad Request**\
        \
        The request body contains a malformed request or is incomplete.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestZodError'
    BadRequestMinifiedZodError:
      description: |
        **Bad Request**\
        \
        The request body contains a malformed request or is incomplete.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestMinifiedZodError'
    ServerError:
      description: |
        **Internal Server Error**
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/InternalServerError'
    InternalServerErrorTextOrJSON:
      description: >
        **Internal Server Error**\

        \

        When you'll get `500 Internal Server Error` response:

        - An internal process has failed due to a system error.

        - One or more unique identifiers supplied in the path parameter are not
        valid 24-character hexadecimal value.
      content:
        plain/text:
          schema:
            $ref: '#/components/schemas/InternalServerError'
        application/json:
          schema:
            $ref: '#/components/schemas/contextErrorResponseSystemError'
    ServiceUnavailable:
      description: |
        **Service Unavailable**
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ServiceUnavailable'
    Token:
      description: Token created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenResponse'
    Customer:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    Customers:
      description: ''
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Customer'
      headers:
        X-Total-Count:
          schema:
            type: string
          description: The total count of customers matching the query
    PaymentMethod:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
          examples:
            Card Example:
              $ref: '#/components/examples/CreatePaymentMethodResponse'
            ACH Example:
              $ref: '#/components/examples/CreateAchPaymentMethodResponse'
    AchPaymentMethod:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentAchSchema'
          examples:
            ACH Example:
              $ref: '#/components/examples/CreateAchPaymentMethodResponse'
    LookupNPaymentMethod:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LookupNPaymentMethod'
          examples:
            Card Example:
              $ref: '#/components/examples/CreatePaymentMethodResponse'
            ACH Example:
              $ref: '#/components/examples/CreateAchPaymentMethodResponse'
    PaymentMethods:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentMethod'
      headers:
        X-Total-Count:
          schema:
            type: string
          description: The total count of customers matching the query
    Payments:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Payment'
          examples:
            Example 1:
              $ref: '#/components/examples/GetPaymentsResponse'
      headers:
        x-total-count:
          schema:
            type: number
          description: Total items in the list
    Payment:
      description: Payment Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
          examples:
            Example 1:
              $ref: '#/components/examples/CreatePaymentResponse'
            Example 2:
              value:
                id: 64012e4f9392e1542d5a3edc
                paymentId: 64012e4f9392e1542d5a3edc
                terminalId: 63f0034e242f3756854c7344
                merchantId: 63f00246242f3756854c7343
                accountId: 63ee4a296fd695eded58febe
                type: void
                status: completed
                approved: true
                captured: false
                voided: false
                refunded: false
                settled: false
                authorization: ET3516
                amount: 0
                sentToBank: true
                createdAt: '2023-03-02T23:16:31.166Z'
                reference:
                  customerRef: ''
                  referenceNo: '96381500'
                currencyCode: USD
                bankResponse:
                  code: AA
                  message: APPROVAL
                paymentMethodDetails:
                  cardholder: ruben meza
                  last4: '0861'
                  cardBrand: visa
                  expiryMonth: 12
                  expiryYear: 2022
                  cvdCheck:
                    code: M
                    description: Card is authentic
                merchant:
                  name: Tokenization test
                  url: https://company.com
                  address:
                    line1: 1 BUSINESS ST
                    city: Knoxville
                    state: Tennessee
                    postalCode: '37902'
                    countryCode: United States
                terminal:
                  gatewayId: O63428-77
            Example 3:
              value:
                id: 64012d9b9392e1542d5a3ec2
                paymentId: 64012d9b9392e1542d5a3ec2
                terminalId: 63f0034e242f3756854c7344
                merchantId: 63f00246242f3756854c7343
                accountId: 63ee4a296fd695eded58febe
                type: refund
                status: completed
                approved: true
                captured: false
                voided: false
                refunded: false
                settled: false
                authorization: ET3516
                amount: 0
                sentToBank: true
                createdAt: '2023-03-02T23:13:31.696Z'
                reference:
                  customerRef: ''
                  referenceNo: '96381504'
                currencyCode: USD
                bankResponse:
                  code: AA
                  message: APPROVAL
                paymentMethodDetails:
                  cardholder: ruben meza
                  last4: '0861'
                  cardBrand: visa
                  expiryMonth: 12
                  expiryYear: 2022
                  cvdCheck:
                    code: M
                    description: Card is authentic
                merchant:
                  name: Tokenization test
                  url: https://company.com
                  address:
                    line1: 1 BUSINESS ST
                    city: Knoxville
                    state: Tennessee
                    postalCode: '37902'
                    countryCode: United States
                terminal:
                  gatewayId: O63428-77
  headers:
    x-total-count:
      required: false
      schema:
        type: number
      description: >-
        Total number of records matching the query criteria supplied in the
        query parameters. This value can be used to calculate the total number
        of pages based on your paging needs.
      example: 250
  parameters:
    applicationId:
      name: applicationId
      required: true
      in: path
      description: >-
        Application ID calling the API. Specify your assigned Application ID,
        otherwise, use the default value if you are not assigned any Application
        ID. If you're building your own application, refer to our
        [guide](https://developer.exactpay.com/docs/authentication) on how to
        get an Application ID.
      schema:
        type: string
      example: admin-pwa
    accountId:
      name: accountId
      in: path
      description: >-
        The Account identifier. Represents the Merchant that this operation is
        going to be executed for.
      required: true
      example: 6151ffdbefd963001c6c9d2d
      schema:
        type: string
    paymentId:
      name: paymentId
      in: path
      required: true
      example: 62d831a97a3bf768f9e15b68
      schema:
        type: string
    customerId:
      name: customerId
      in: path
      description: >-
        The Customer identifier. Represents the Customer that this operation is
        going to be executed for.
      required: true
      example: 62d9be95cb27b92e42c9b0c0
      schema:
        type: string
    customerToken:
      name: customerToken
      in: path
      required: true
      example: 62d9be95cb27b92e42c9b0c1
      schema:
        type: string
    documentId:
      name: documentId
      in: path
      description: The Document identifier.
      required: true
      example: 61e8607bd569a196900527c5
      schema:
        type: string
    documentRequestId:
      name: documentRequestId
      in: path
      description: The Document Request identifier.
      required: true
      example: 61e8607bd569a196900527c5
      schema:
        type: string
    documentRequestToken:
      name: documentRequestToken
      in: path
      required: true
      description: >-
        The Onboarding Application Document Request Token. The Token can be
        found in the Upload Document link URL sent via the Document Request
        email using [Request Document](/operations/createDocumentRequest) API
        endpoint.
      schema:
        type: string
      example: >-
        3f31724149044b384a8c7545f8070aed960d92d154d9fbe4c4deb311203bcfba79eb723ed212226b6f738ed397f6889f8f193a6232e658a65156aa1f66ae83e2f9886aa65a6d19c5f327256ccf38b3a7
    domain:
      name: domain
      in: path
      description: The domain of the report to be generated.
      required: true
      examples:
        account:
          value: account
          summary: Account Domain Report
        chargeback:
          value: chargeback
          summary: Chargeback Domain Report
        transaction:
          value: transaction
          summary: Transaction Domain Report
        settlement:
          value: settlement
          summary: Settlement Domain Report
        funding:
          value: funding
          summary: Funding Domain Report
      schema:
        type: string
        enum:
          - account
          - chargeback
          - transaction
          - settlement
          - funding
    reportId:
      name: reportId
      in: path
      required: true
      description: The ID of the report query
      example: 61a91d429bf82a2d8e95738f
      schema:
        type: string
    inviteToken:
      name: inviteToken
      in: path
      description: The security token associated to an user invite.
      required: true
      example: OPSGpcU5opIQdcogO_zKPQ
      schema:
        type: string
    isDeleted:
      name: isDeleted
      in: query
      description: >-
        Indicates whether to bring the deleted Onboarding Applications or not.
        If not sent it will bring just the currently active Onboarding
        Applications in the system.
      required: false
      schema:
        type: boolean
        default: false
        example: false
    limit:
      name: $limit
      in: query
      description: >-
        The maximum number of items to retrieve within the current page of
        results.
      required: false
      schema:
        type: integer
        example: 10
        default: 100
    to:
      name: to
      in: query
      description: Datetime to limit the search to, in ISO8601 format. Defaults to today
      required: false
      schema:
        type: string
        format: date-time
        example: '2022-12-31T00:00:00.000Z'
    from:
      name: from
      in: query
      description: >-
        Datetime to start the search from, in ISO8601 format. Defaults to one
        month ago. Maximum search window is 6 months.
      required: false
      schema:
        type: string
        format: date-time
        example: '2022-01-01T00:00:00.000Z'
    orderId:
      name: orderId
      in: path
      description: The Order identifier.
      required: true
      example: 55c42605-e4e7-4e0c-801a-4ba7eff1925b
      schema:
        type: string
    OrganizationAccountName:
      name: businessName
      in: path
      description: The text to match with the Business Name of the Organization or Account.
      required: true
      schema:
        type: string
        example: ACME
    onboardingId:
      name: onboardingId
      in: path
      description: The Onboarding Application identifier.
      required: true
      schema:
        type: string
      example: 6154ce01387b94001cd87ada
    organizationId:
      name: organizationId
      in: path
      description: The Organization identifier.
      required: true
      schema:
        type: string
      example: 63efb229903e470516491e7c
    onboardingToken:
      name: token
      in: path
      description: >-
        The Onboarding Token returned in [Create
        Onboarding](/operations/createOnboarding) response. This token is valid
        only for 10 mintues after the Onboarding Application is submitted.
      required: true
      schema:
        type: string
      example: >-
        36a146e1022364c9ee0afe602d3a9d31f32886b2e1680405092970d8feb7040abbd829a8900bae14e38580c71af8cb13020703a6549a12bcf6a5ce0cde95788cb160a6425d31e63391b97c2c9b20980b
    partnerId:
      name: partnerId
      in: path
      description: The partner ID.
      required: true
      example: 6151ffdbefd963001c6c9d2d
      schema:
        type: string
    payment-token:
      name: payment-token
      in: path
      description: Payment token Id
      required: true
      example: 9085c19f-88e9-4fbf-93cf-5ceec221146c
      schema:
        type: string
    searchText:
      name: searchText
      in: path
      description: Text to be used to filter
      required: true
      schema:
        type: string
        example: Your text
    select:
      name: $select
      in: query
      description: >-
        Allows users to select specific fields they want to retrieve in the
        response object. It is a comma-separated list of items. To `$select` by
        fields in the nested object, use `objectName` or `objectName.fieldName`.
      required: false
      schema:
        type: string
        example: createdAt,status,merchant.name
    skip:
      name: $skip
      in: query
      description: >-
        The number of records to be skipped per call. By default, starts with
        `0` and you should provide the current value plus the `$limit` value in
        subsequent calls to retrieve following sets of values (pages). So it
        will skip the number of records on the previous page and bring the next
        set of records.
      required: false
      schema:
        type: integer
        default: 0
        example: 10
    sort:
      name: $sort
      in: query
      description: >-
        Sets the sort order If an object is passed, values allowed are asc,
        desc, ascending, descending, 1, and -1. If a string is passed, it must
        be a space delimited list of path names. The sort order of each path is
        ascending unless the path name is prefixed with - which will be treated
        as descending.
      required: false
      schema:
        type: string
        example: '-name'
    sortV2:
      name: $sort
      in: query
      description: >-
        Sets the sort order if the field names are passed. Sorting can be done
        by multiple fields in the specified order, `asc` (ascending) or `desc`
        (descending). To sort by a `fieldName`, use the `fieldName:` followed by
        the sort order. To sort by fields in the nested object, use
        `objectName.fieldName` followed by the sort order. Sorting can be done
        by multiple fields by providing the `fieldNames` with sort direction as
        comma-separated values.
      required: false
      schema:
        type: string
        example: createdAt:asc
    tokenId:
      name: tokenId
      in: path
      description: Payment token Id
      required: true
      example: 9085c19f-88e9-4fbf-93cf-5ceec221146c
      schema:
        type: string
    type:
      name: type
      in: path
      description: The type of account or organization
      required: true
      examples:
        account:
          value: account
          summary: Account type
        organization:
          value: organization
          summary: Organization type
      schema:
        type: string
    userId:
      name: userId
      in: path
      required: true
      description: The user ID
      example: 61e0a48da415705515574da1
      schema:
        type: string
    webhookId:
      name: webhookId
      in: path
      description: The customers webhook definition Id
      required: true
      example: 61e8607bd569a196900527c5
      schema:
        type: string
    workflowId:
      name: workflowId
      in: path
      description: The Workflow identifier.
      required: true
      example: 61f2e8593a0a3076d01a71ef
      schema:
        type: string
  securitySchemes:
    apiKey:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    ApplePayDomains:
      type: object
      additionalProperties: false
      required:
        - domains
      properties:
        domains:
          type: array
          items:
            type: string
          example:
            - your.domain.com
    credit_card_details:
      type: object
      additionalProperties: false
      properties:
        cardholder:
          type: string
        last4:
          type: string
          description: The last 4 digits of the supplied credit card.
        expiry_month:
          type: integer
          format: uint32
          minimum: 1
          maximum: 12
        expiry_year:
          type: integer
          format: uint32
        card_brand:
          type: string
          description: The brand of the credit card, lowercase.
        avs_check:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              minLength: 1
              maxLength: 1
              description: The response code from any AVS check which was done.
            description:
              type: string
              description: a description of the check which was done.
        cvd_check:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              minLength: 1
              maxLength: 1
              description: The response code from any check on the CVD code.
            description:
              type: string
              description: a description of the check which was done.
    payment_detail:
      type: object
      additionalProperties: false
      properties:
        approved:
          type: boolean
        settled:
          type: boolean
          description: Whether the payment has been settled.
        settled_at:
          type: string
          format: date-time
          description: When the payment settled, in ISO8601 format.
        created_at:
          type: string
          format: date-time
          description: When the payment was created in UTC, in ISO8601 format.
        payment_id:
          type: string
          description: A unique identifier for this payment, if it was sent to the bank.
        authorization:
          type: string
          description: The authorization code for this payment, if it was approved.
        amount:
          type: integer
          format: int32
          description: The amount which was approved.
        surcharge_amount:
          type: integer
          format: int32
          description: The amount of any surcharge which was charged.
        currency_code:
          type: string
          pattern: ^[A-Z]{3}$
          description: >-
            The ISO currency code of the currency in which the payment was
            created.
        sent_to_bank:
          type: boolean
          description: Whether or not the payment was submitted to the bank for processing.
        captured:
          type: boolean
          description: Whether the amount was captured, or authorized.
        capture_details:
          type: object
          additionalProperties: false
          properties:
            list:
              type: array
              maxItems: 50
              description: List of URLs to retrieve details of any capture transactions.
              items:
                type: string
            remaining:
              type: integer
              format: int32
              description: Any remaining balance which could still be captured.
        refunded:
          type: boolean
          description: Whether the amount was refunded.
        refund_details:
          type: object
          additionalProperties: false
          properties:
            list:
              type: array
              maxItems: 10
              description: List of URLs to retrieve details of any refund transactions.
              items:
                type: string
            remaining:
              type: integer
              format: int32
              description: Any remaining balance which could still be refunded.
        voided:
          type: boolean
          description: Whether the amount was captured, or authorized.
        void_details:
          type: object
          additionalProperties: false
          properties:
            list:
              type: array
              maxItems: 10
              description: List of URLs to retrieve details of any void transactions.
              items:
                type: string
        bank_response:
          type: object
          additionalProperties: false
          description: Details of the response from the bank.
          properties:
            code:
              type: string
              example: '100'
            message:
              type: string
              example: Approved
        exact_response:
          type: object
          additionalProperties: false
          description: >-
            Details of why a transaction was not submitted to the bank. Will not
            be present if transaction was sent to the bank.
          properties:
            code:
              type: string
              example: '26'
            message:
              type: string
              example: Invalid Card Number
        payment_method_details:
          type: object
          additionalProperties: false
          oneOf:
            - $ref: '#/components/schemas/credit_card_details'
            - $ref: '#/components/schemas/TokenDetails'
        options:
          type: object
          additionalProperties: false
          properties:
            order_tracking_number:
              type: string
            fraud_suspected:
              type: string
            ecommerce_flag:
              type: string
            third_party_id:
              type: string
            special_payment:
              type: string
            aft_transfer_type:
              type: string
            amex_fraud:
              type: string
            split_shipment_number:
              type: string
            par:
              type: string
              description: >-
                The Payment Account Reference assigned the card by the issuer.
                Elavon only.
    payment_search:
      type: object
      additionalProperties: false
      properties:
        available:
          type: integer
          format: int32
          description: Total number of payments available.
        results:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/payment_detail'
    manual_card_data:
      type: object
      additionalProperties: false
      required:
        - cardholder
        - number
        - expiry_month
        - expiry_year
      properties:
        cardholder:
          type: string
          minLength: 3
          maxLength: 30
        number:
          type: string
          pattern: ^\d{14,16}$
        expiry_month:
          type: integer
          format: uint32
          minimum: 1
          maximum: 12
        expiry_year:
          type: integer
          format: uint32
          minimum: 2000
        cvd:
          type: string
          pattern: ^\d{3,4}$
        cvd_indicator:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 9
          description: >-
            Null or 0 = Not Supported (Default), 1 = Value provided by
            Cardholder, 2 = Value provided on card is Illegible, 9 = Cardholder
            states data is not available
    track1_data:
      type: object
      additionalProperties: false
      required:
        - track1
      properties:
        track1:
          type: string
          pattern: ^%?B[0-9 ]{1,19}\^[ a-zA-Z,.\/]{2,26}\^[0-9]*\??$
    track2_data:
      type: object
      additionalProperties: false
      required:
        - cardholder
        - track2
      properties:
        cardholder:
          type: string
        track2:
          type: string
          pattern: ^;?[0-9 ]{1,19}=[0-9]*\??$
    credit_card:
      type: object
      additionalProperties: false
      properties:
        credit_card:
          oneOf:
            - $ref: '#/components/schemas/manual_card_data'
            - $ref: '#/components/schemas/track1_data'
            - $ref: '#/components/schemas/track2_data'
    apple_pay:
      type: object
      additionalProperties: false
      properties:
        apple_pay:
          type: object
          additionalProperties: false
          required:
            - number
            - expiry_month
            - expiry_year
            - transaction_id
            - cryptogram
          properties:
            cardholder:
              type: string
            number:
              type: string
              pattern: ^\d{14,19}$
            expiry_month:
              type: integer
              format: uint32
              minimum: 1
              maximum: 12
            expiry_year:
              type: integer
              format: uint32
              minimum: 2000
            transaction_id:
              type: string
              description: The transaction ID returned by Apple Pay.
            cryptogram:
              type: string
              description: >-
                The cryptogram returned by Apple Pay. Note: if the response from
                Apple contains an `eciIndicator` value, you MUST pass this value
                to us using the `ecommerce_flag` attribute in the `options`
                request element.
    google_pay:
      type: object
      additionalProperties: false
      properties:
        google_pay:
          type: object
          additionalProperties: false
          required:
            - number
            - expiry_month
            - expiry_year
          properties:
            number:
              type: string
              pattern: ^\d{14,19}$
            expiry_month:
              type: integer
              format: uint32
              minimum: 1
              maximum: 12
            expiry_year:
              type: integer
              format: uint32
              minimum: 2000
            cvd:
              type: string
              pattern: ^\d{3,4}$
              description: >-
                Not normally returned by Google Pay, but should be included if
                present in the Google Pay response.
            cryptogram:
              type: string
              description: >-
                The cryptogram for tokenized cards. MUST be supplied if returned
                by Google Pay.
    paypal:
      type: object
      additionalProperties: false
      properties:
        paypal:
          type: object
          additionalProperties: false
          required:
            - payer_id
            - success
          properties:
            payer_id:
              type: string
            gross_amount_currency_id:
              type: string
              description: The gross_amount_currency_id value from the PayPal response.
            success:
              type: boolean
              description: Whether or not the payment succeeded at PayPal.
            authorization:
              type: string
              description: The authorization from the PayPal response.
            message:
              type: string
              description: The message from the PayPal response.
            correlation_id:
              type: string
              description: The correlation ID from the PayPal response.
            timestamp:
              type: string
              description: The timestamp value from the PayPal response.
            code:
              type: string
              description: Any error code from the PayPal response.
            order:
              type: boolean
              description: >-
                Indicates whether or not the transaction performed in PayPal was
                an order rather than an authorization. See PayPal's
                documentation for the difference between the two and ensure you
                set this flag appropriately as a PayPal Order supports a
                different set of follow-up transactions than a PayPal
                Authorization. Defaults to false.
    token:
      type: object
      additionalProperties: false
      properties:
        token:
          type: object
          additionalProperties: false
          required:
            - token
            - token_type
          properties:
            token:
              type: string
            token_type:
              type: string
              enum:
                - exactpay
                - processor
            card_brand:
              type: string
              description: >-
                The brand name of the card which was tokenized, lowercase.
                REQUIRED with processor tokens.
            cardholder:
              type: string
            expiry_month:
              type: integer
              format: uint32
              minimum: 1
              maximum: 12
              description: REQUIRED with processor tokens.
            expiry_year:
              type: integer
              format: uint32
              minimum: 2000
              description: REQUIRED with processor tokens.
            cvd:
              type: string
              pattern: ^\d{3,4}$
            cvd_indicator:
              type: integer
              enum:
                - 0
                - 1
                - 2
                - 9
              description: >-
                Null or 0 = Not Supported (Default), 1 = Value provided by
                Cardholder, 2 = Value provided on card is Illegible, 9 =
                Cardholder states data is not available
    debit_bill_pay:
      type: object
      additionalProperties: false
      properties:
        debit_bill_pay:
          type: object
          additionalProperties: false
          required:
            - cardholder
            - number
            - expiry_month
            - expiry_year
          properties:
            cardholder:
              type: string
              minLength: 3
              maxLength: 30
            number:
              type: string
              pattern: ^\d{14,19}$
            expiry_month:
              type: integer
              format: uint32
              minimum: 1
              maximum: 12
            expiry_year:
              type: integer
              format: uint32
              minimum: 2000
            cvd:
              type: string
              pattern: ^\d{3,4}$
            cvd_indicator:
              type: integer
              enum:
                - 0
                - 1
                - 2
                - 9
              description: >-
                Null or 0 = Not Supported (Default), 1 = Value provided by
                Cardholder, 2 = Value provided on card is Illegible, 9 =
                Cardholder states data is not available
    payment_method_method:
      type: object
      oneOf:
        - $ref: '#/components/schemas/credit_card'
        - $ref: '#/components/schemas/apple_pay'
        - $ref: '#/components/schemas/google_pay'
        - $ref: '#/components/schemas/paypal'
        - $ref: '#/components/schemas/token'
        - $ref: '#/components/schemas/debit_bill_pay'
    billing_address:
      description: >-
        The customer's billing address. Will be used for AVS checks so
        postal/zip code is the minimum data required.
      type: object
      additionalProperties: false
      required:
        - postalCode
      properties:
        line1:
          type: string
          maxLength: 30
          example: Fairfield Ranch
          description: Line 1 of the address of the customer.
        line2:
          type: string
          maxLength: 28
          example: Address line 2
          description: Line 2 of the address of the customer.
        city:
          type: string
          maxLength: 20
          example: Ontario
          description: Name of the city.
        state:
          type: string
          maxLength: 2
          example: CA
          description: >-
            The two-digit country subdivision code where the customer is
            located. Refer to the two-digit country subdivision code defined in
            ISO 3166-2 for the countries listed in ISO 3166-1.
        postalCode:
          type: string
          maxLength: 10
          example: '91710'
          description: >-
            The postal code where the customer is located. Five-digit (example:
            33558) or nine-digit (33558-3321) format is acceptable for the USA.
            Six digit(A0A 0A0) or (A0A0A0) format is acceptable for Canada.
        countryCode:
          type: string
          pattern: ^[A-Z]{3}$
          description: >-
            3-character alphabetical country code according to ISO 3166-1, eg:
            USA, CAN etc.
          example: USA
    customer_details:
      type: object
      description: >-
        Optional billing details for the customer. If you have enabled AVS
        filters on your terminal, this becomes mandatory and AVS checks will be
        performed on the address.
      additionalProperties: false
      properties:
        name:
          type: string
          example: John Doe
          description: Name of the customer.
        email:
          type: string
          format: email
          example: john@acmecorp.com
          description: Email of the customer.
        phone:
          type: string
          maxLength: 20
          example: '5551234567'
          description: Phone number of the customer.
        phoneType:
          type: string
          enum:
            - H
            - W
            - 'N'
            - D
          description: >-
            H = Home, W = Work, D = Day, N = Night. Phone type is required when
            a phone number is supplied.
        address:
          $ref: '#/components/schemas/billing_address'
    reference:
      description: >-
        Merchant defined values which can be used to internally identify the
        transaction.
      type: object
      additionalProperties: false
      required:
        - referenceNo
      properties:
        customerRef:
          type: string
          maxLength: 20
          example: ref123
          description: Identification number of customer.
        referenceNo:
          type: string
          maxLength: 20
          example: ref1234
          description: Reference number for the Order.
        reference3:
          type: string
          maxLength: 30
          example: ref12345
          description: Reference3 number for the Order.
        correlationId:
          type: string
          maxLength: 60
          example: abc123
          description: >-
            A merchant defined value that can be used to reverse a transaction
            which times out without returning a payment identifier.
    stored_credentials:
      type: object
      additionalProperties: false
      properties:
        indicator:
          type: string
        initiation:
          type: string
        schedule:
          type: string
        payment_id:
          type: string
        protectbuy_indicator:
          type: string
        original_amount:
          type: integer
          format: uint32
          description: 'In smallest currency units, eg: cents in USD'
    soft_descriptor:
      description: >-
        Override business information which would normally appear on a
        customer's statement, making it easier for customers to identify
        transactions.
      type: object
      additionalProperties: false
      properties:
        dbaName:
          type: string
          example: john
          description: Name of the Customer.
        street:
          type: string
          example: Fairfield Ranch
          description: Street name of the customer.
        city:
          type: string
          example: Ontario
          description: City name of the customer.
        state:
          type: string
          example: CA
          description: State name of the customer.
        postalCode:
          type: string
          example: '91710'
          description: >-
            The postal code where the customer is located. Five-digit (example:
            33558) or nine-digit (33558-3321) format is acceptable for the USA.
            Six digit(A0A 0A0) or (A0A0A0) format is acceptable for Canada.
        countryCode:
          type: string
          description: >-
            3-character alphabetical country code according to ISO 3166-1, eg:
            USA, CAN etc.
          pattern: /^[A-Z]{3}$/
          example: USA
        mcc:
          type: string
          example: '5699'
          description: >-
            Merchant category code (MCCs) is four-digit numbers that describe a
            business's primary business activities. Please refer to the endpoint
            [Merchant Category
            Codes](https://dev.exactpay.dev/api#/operations/listMerchantCategoryCodes)
            to get the list of acceptable MCC codes by Exact Payments.
        merchantContactInfo:
          type: string
          example: '8886178190'
          description: Phone number of the merchant.
        authTypeIndicator:
          type: string
          format: /\A[AF]/z/
          description: >-
            F = Final Amount (amount is not expected to change for settlement).
            P = Pre-Authorization / Estimated Amount (amount may change between
            auth and settlement). Elavon only
          example: F
        taxId:
          type: string
          description: The Tax Identifier of the merchant. Elavon only.
          example: abc123
        mvvMaid:
          type: string
          example: '5679'
          description: Merchant Verification Value.
        phone:
          type: string
          example: '8886178190'
          description: Phone number of the customer.
        email:
          type: string
          example: john@example.com
          description: Email of the customer.
        submerchantId:
          type: string
          example: xyz123
          description: Identification number of the submerchant.
    ship_to:
      allOf:
        - type: object
          properties:
            customerNumber:
              type: string
              example: customerId123
              description: Customer Identification number.
        - $ref: '#/components/schemas/customer_details'
    line_item:
      type: object
      additionalProperties: false
      required:
        - description
        - quantity
        - unitCost
        - lineItemTotal
      properties:
        commodityCode:
          type: string
          example: cmd123
          description: >-
            Identification number to identify the goods and services being
            purchased.
        description:
          type: string
          description: Description for line item.
          example: It will give some description of the Order.
        discountAmount:
          type: integer
          format: uint32
          minimum: 0
          example: 10
          description: The smallest currency units, for example, cents in USD.
        discountIndicator:
          type: boolean
          example: false
          description: Discount indicator value will be `true` or `false`.
        grossNetIndicator:
          type: boolean
          example: true
          description: Gross Net Indicator value will be `true` or `false`.
        lineItemTotal:
          type: integer
          format: uint32
          minimum: 0
          example: 110
          description: The smallest currency units, for example, cents in USD.
        productCode:
          type: string
          maxLength: 12
          example: '3823'
          description: Code of the product.
        quantity:
          type: integer
          format: float
          example: 2
          description: If present, must be greater than zero.
        taxAmount:
          type: integer
          format: uint32
          minimum: 0
          description: The smallest currency units, for example, cents in USD.
          example: 5
        taxRate:
          type: number
          format: float
          minimum: 0
          example: 0.5
          description: Tax rate of the order.
        taxType:
          type: string
          example: Sales
          description: Type of the tax.
        unitCost:
          type: integer
          format: float
          minimum: 0
          description: >-
            In smallest currency units, eg: cents in USD so 13.25 = 13 and one
            quarter cents.
        unitOfMeasure:
          type: string
          example: unit
          description: Unit of the measure for the line items.
    level3:
      description: >-
        Level 3 processing can capture and transmit the additional transaction
        data.
      type: object
      additionalProperties: false
      properties:
        taxAmount:
          type: integer
          format: uint32
          minimum: 0
          example: 5
          description: The smallest currency units, for example, cents in USD.
        taxRate:
          type: number
          format: float
          minimum: 0
          example: 0.5
          description: Tax rate for the Order.
        altTaxAmount:
          type: integer
          format: uint32
          minimum: 0
          example: 5
          description: The smallest currency units, for example, cents in USD.
        altTaxId:
          type: string
          example: a1b2c3
          description: alt Tax identifier of the customer.
        dutyAmount:
          type: integer
          format: uint32
          minimum: 0
          example: 5
          description: The smallest currency units, for example, cents in USD.
        freightAmount:
          type: integer
          format: uint32
          minimum: 0
          example: 5
          description: The smallest currency units, for example, cents in USD.
        discountAmount:
          type: integer
          format: uint32
          minimum: 0
          example: 5
          description: The smallest currency units, for example, cents in USD.
        shipFromZip:
          type: string
          maxLength: 10
          example: '91710'
          description: >-
            The postal code where the customer is located. Five-digit (example:
            33558) or nine-digit (33558-3321) format is acceptable for the USA.
            Six digit(A0A 0A0) or (A0A0A0) format is acceptable for Canada.
        shipTo:
          $ref: '#/components/schemas/ship_to'
        lineItems:
          type: array
          minItems: 1
          maxItems: 98
          items:
            $ref: '#/components/schemas/line_item'
    three_d_secure:
      type: object
      additionalProperties: false
      properties:
        program_protocol:
          type: integer
          enum:
            - 1
            - 2
        directory_server_transaction_id:
          type: string
        cavv:
          type: string
        xid:
          type: string
    options:
      type: object
      additionalProperties: false
      properties:
        order_tracking_number:
          type: string
        fraud_suspected:
          type: string
        ecommerce_flag:
          type: string
          description: >-
            Used to classify the style of transaction being performed. 2 =
            Recurring, 3 = Installment.
          maxLength: 1
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
            - '6'
            - '7'
            - '8'
            - R
            - I
            - X
        third_party_id:
          type: string
          description: >-
            If you are a Third-Party Processor, this can be used to include your
            ID when processing.
        installment_number:
          type: string
          format: xx/yy
          description: >-
            The current number for an installment payment, followed by the total
            number of installments. Example: 01/03
        split_shipment_number:
          type: string
          format: xx/yy
          description: >-
            Split Shipment feature is required whenever the same authorization
            code is being used for multiple transactions entries. The total
            number of shipments must be greater than 1. Example: 01/03
        special_payment:
          type: string
          description: >-
            Set to "B" to indicate transaction should be processed as a special
            payment. Only relevant to Visa credit transactions.
        aft_transfer_type:
          type: string
          enum:
            - AA
            - BI
            - PP
            - TU
            - WT
          description: >-
            Visa Non Original Credit Account Funding Transaction (NON-OCT AFT)
            transfer type.
        customer_ip:
          type: string
          format: ipv4
        generate_receipt:
          type: boolean
          description: >-
            Whether we should generate a receipt for the customer. Defaults to
            false.
    payment_response:
      type: object
      additionalProperties: false
      properties:
        approved:
          type: boolean
        captured:
          type: boolean
          description: Whether the amount was captured, or authorized.
        payment_id:
          type: string
          description: A unique identifier for this payment, if it was sent to the bank.
        authorization:
          type: string
          description: The authorization code for this payment, if it was approved.
        amount:
          type: integer
          format: int32
          description: The amount which was approved.
        surcharge_amount:
          type: integer
          format: int32
          description: The amount of any surcharge which was charged.
        currency_code:
          type: string
          pattern: ^[A-Z]{3}$
          description: >-
            The ISO currency code of the currency in which the payment was
            created.
        sent_to_bank:
          type: boolean
          description: Whether or not the payment was submitted to the bank for processing.
        bank_response:
          type: object
          additionalProperties: false
          description: Details of the response from the bank.
          properties:
            code:
              type: string
              example: '100'
            message:
              type: string
              example: Approved
        exact_response:
          type: object
          additionalProperties: false
          description: >-
            Details of why a transaction was not submitted to the bank. Will not
            be present if transaction was sent to the bank.
          properties:
            code:
              type: string
              example: '26'
            message:
              type: string
              example: Invalid Card Number
        terminal:
          type: object
          additionalProperties: false
          properties:
            gateway_id:
              type: string
              description: Which terminal the payment was processed on.
        merchant:
          type: object
          additionalProperties: false
          description: Details of the merchant who processed the payment.
          properties:
            name:
              type: string
              example: Frank's Widget Store
            address:
              $ref: '#/components/schemas/billing_address'
            url:
              type: string
              format: uri
        receipt:
          type: string
          description: The receipt for this payment, if it was sent to the bank.
        payment_method_details:
          type: object
          additionalProperties: false
          oneOf:
            - $ref: '#/components/schemas/credit_card_details'
            - $ref: '#/components/schemas/TokenDetails'
        options:
          type: object
          additionalProperties: false
          properties:
            order_tracking_number:
              type: string
            fraud_suspected:
              type: string
            ecommerce_flag:
              type: string
            third_party_id:
              type: string
            special_payment:
              type: string
            aft_transfer_type:
              type: string
            amex_fraud:
              type: string
            split_shipment_number:
              type: string
            par:
              type: string
              description: The Payment Account Reference number, if available. Elavon only.
    tagged_payment:
      type: object
      additionalProperties: false
      required:
        - amount
        - terminal
        - authorization
      properties:
        amount:
          type: integer
          format: int32
          minimum: 0
          maximum: 999999999
          description: >-
            Amount in smallest currency unit, eg: cents, including all
            surcharges, taxes etc.
        surcharge_amount:
          type: integer
          format: int32
          minimum: 0
          maximum: 999999999
          description: >-
            This is assumed to already be included in the amount. (Available for
            Elavon processing only)
        authorization:
          type: string
          description: The authorization value for the payment you are operating on.
        terminal:
          type: object
          additionalProperties: false
          description: >-
            Which terminal to process the transaction through. Terminal
            determines currency and language.
          required:
            - gateway_id
          properties:
            gateway_id:
              type: string
        reference:
          $ref: '#/components/schemas/reference'
        soft_descriptor:
          $ref: '#/components/schemas/soft_descriptor'
        options:
          $ref: '#/components/schemas/options'
    referenced_payment_detail:
      type: object
      additionalProperties: false
      required:
        - amount
        - terminal
        - authorization
        - payment_method
      properties:
        amount:
          type: integer
          format: int32
          minimum: 0
          maximum: 999999999
          description: >-
            Amount in smallest currency unit, eg: cents, including all
            surcharges, taxes etc.
        surcharge_amount:
          type: integer
          format: int32
          minimum: 0
          maximum: 999999999
          description: >-
            This is assumed to already be included in the amount. (Available for
            Elavon processing only)
        tax_amount:
          type: integer
          format: uint32
          minimum: 0
          maximum: 999999999
          description: >-
            Tax value included in total amount. Sales tax in the US, or PST for
            Canadian merchants. The smallest currency units, for example, cents
            in USD. This is assumed to already be included in the amount.
        authorization:
          type: string
          description: The authorization value for the payment you are operating on.
        terminal:
          type: object
          additionalProperties: false
          description: >-
            Which terminal to process the transaction through. Terminal
            determines currency and language.
          required:
            - gateway_id
          properties:
            gateway_id:
              type: string
        payment_method:
          $ref: '#/components/schemas/payment_method_method'
        customer:
          $ref: '#/components/schemas/customer_details'
        reference:
          $ref: '#/components/schemas/reference'
        soft_descriptor:
          $ref: '#/components/schemas/soft_descriptor'
        options:
          $ref: '#/components/schemas/options'
    token_request:
      type: object
      additionalProperties: false
      required:
        - terminal
        - payment_method
      properties:
        terminal:
          type: object
          description: >-
            Which terminal to process the transaction through. The terminal
            determines currency and language.
          additionalProperties: false
          required:
            - gateway_id
          properties:
            gateway_id:
              type: string
        payment_method:
          $ref: '#/components/schemas/credit_card'
        language:
          type: string
          enum:
            - en
            - es
          description: Will be used to translate error messages.
    order_access_token:
      type: object
      additionalProperties: false
      properties:
        accessToken:
          $ref: '#/components/schemas/order_access_token_detail'
    order_access_token_detail:
      type: object
      additionalProperties: false
      properties:
        token:
          type: string
          example: Oyen7ydZcNHrxk4x
          description: The token which grants temporary API access to ExactJS.
        expiresAt:
          type: string
          format: date-time
          description: When this access token expires, in ISO8601 format.
    order_response:
      type: object
      properties:
        id:
          type: string
          example: beba1dfa-c167-494d-9a9b-d64a0009s78a
          description: Order identifier which is created.
        status:
          type: string
          example: awaiting_payment
          description: Status of the Order.
        accessToken:
          type: object
          properties:
            token:
              type: string
              example: xFwJtFt13XHun123
              description: Create a new access token for this Order.
            expires_at:
              type: string
              example: '2023-07-26T23:32:32Z'
              description: The date and time when the created token expires.
        amount:
          type: integer
          example: 123
          description: >-
            Amount in smallest currency unit, eg: cents, including all
            surcharges, taxes etc.
        surchargeAmount:
          type: integer
          example: 123
          description: >-
            This is assumed to already be included in the amount. (Available for
            Elavon processing only)
        taxAmount:
          type: integer
          example: 123
          description: >-
            Tax value included in total amount. Sales tax in the US, or PST for
            Canadian merchants. The smallest currency units, for example, cents
            in USD. This is assumed to already be included in the amount.
        capture:
          type: boolean
          example: true
          description: >-
            Set this to false if you only want to authorize for the amount.
            Defaults to true.
        description:
          type: string
          example: Some description
          description: This will give some description about the order description.
        reference:
          type: object
          description: >-
            Merchant defined values which can be used to internally identify the
            transaction.
          properties:
            customerRef:
              type: string
              example: ref123
              description: Identification number of customer.
            referenceNo:
              type: string
              example: ref1234
              description: Reference number for the Order.
            reference3:
              type: string
              example: ref12345
              description: Reference3 number for the Order.
            correlationId:
              type: string
              example: abc123
              description: >-
                A merchant defined value that can be used to reverse a
                transaction which times out without returning a payment
                identifier.
        billing:
          type: object
          description: Optional billing details for the customer.
          properties:
            name:
              type: string
              example: John Doe
              description: Name of the customer.
            email:
              type: string
              example: john@example.com
              description: Email of the customer.
            phone:
              type: string
              example: '5556178190'
              description: Phone of the customer.
            phoneType:
              type: string
              example: H
              description: Phone type of the customer.
              enum:
                - H
                - W
                - D
                - 'N'
            address:
              type: object
              description: >-
                The customer's billing address. Will be used for AVS checks so
                postal/zip code is the minimum data required.
              properties:
                line1:
                  type: string
                  example: Fairfield Ranch
                  description: Line 1 of the address.
                line2:
                  type: string
                  example: wycliffe
                  description: Line 2 of the address.
                city:
                  type: string
                  example: Ontario
                  description: City of the customer.
                state:
                  type: string
                  example: CA
                  description: State of the customer.
                postalCode:
                  type: string
                  example: '91710'
                  description: >-
                    The postal code where the customer is located. Five-digit
                    (example: 33558) or nine-digit (33558-3321) format is
                    acceptable for the USA. Six digit(A0A 0A0) or (A0A0A0)
                    format is acceptable for Canada.
                countryCode:
                  type: string
                  example: USA
                  description: >-
                    3-character alphabetical country code according to ISO
                    3166-1, eg: USA, CAN etc.
        softDescriptor:
          type: object
          description: >-
            Override business information which would normally appear on a
            customer's statement, making it easier for customers to identify
            transactions.
          properties:
            dbaName:
              type: string
              example: john
              description: Name of the customer.
            street:
              type: string
              example: Fairfield
              description: Street name of the customer.
            city:
              type: string
              example: Chino
              description: City name of the customer.
            state:
              type: string
              example: CA
              description: State name of tghe customer.
            postalCode:
              type: string
              example: '91710'
              description: >-
                The postal code where the customer is located. Five-digit
                (example: 33558) or nine-digit (33558-3321) format is acceptable
                for the USA. Six digit(A0A 0A0) or (A0A0A0) format is acceptable
                for Canada.
            countryCode:
              type: string
              example: USA
              description: >-
                3-character alphabetical country code according to ISO 3166-1,
                eg: USA, CAN etc.
            mcc:
              type: string
              example: '5699'
              description: >-
                Merchant category code (MCCs) is four-digit numbers that
                describe a business's primary business activities. Please refer
                to the endpoint [Merchant Category
                Codes](https://dev.exactpay.dev/api#/operations/listMerchantCategoryCodes)
                to get the list of acceptable MCC codes by Exact Payments.
            merchantContactInfo:
              type: string
              example: '8886178190'
              description: Phone number of the merchant.
        level3:
          type: object
          properties:
            taxAmount:
              type: integer
              example: 5
              description: The smallest currency units, for example, cents in USD.
            taxRate:
              type: integer
              example: 0.5
              description: Tax rate of the Order.
            altTaxAmount:
              type: integer
              example: 5
              description: The smallest currency units, for example, cents in USD.
            altTaxId:
              type: string
              example: a1b2c3
            dutyAmount:
              type: integer
              example: 5
              description: The smallest currency units, for example, cents in USD.
            freightAmount:
              type: integer
              example: 5
              description: The smallest currency units, for example, cents in USD.
            discountAmount:
              type: integer
              example: 5
              description: The smallest currency units, for example, cents in USD.
            shipFromZip:
              type: string
              example: '91710'
              description: >-
                The postal code where the customer is located. Five-digit
                (example: 33558) or nine-digit (33558-3321) format is acceptable
                for the USA. Six digit(A0A 0A0) or (A0A0A0) format is acceptable
                for Canada.
            shipTo:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                  description: Name of the customer.
                email:
                  type: string
                  example: john@acmecorp.com
                  description: Email of the customer.
                phone:
                  type: string
                  example: '8886178190'
                  description: Phone of the customer.
                phoneType:
                  type: string
                  example: H
                  description: Phone type of the customer.
                  enum:
                    - H
                    - W
                    - D
                    - 'N'
                address:
                  type: object
                  properties:
                    line1:
                      type: string
                      example: Fairfield Ranch
                      description: Line 1 of the address.
                    line2:
                      type: string
                      example: wycliffe
                      description: Line 2 of the address.
                    city:
                      type: string
                      example: Chino
                      description: Name of the city.
                    state:
                      type: string
                      example: CA
                      description: Name of the state.
                    postalCode:
                      type: string
                      example: '91710'
                      description: >-
                        The postal code where the customer is located.
                        Five-digit (example: 33558) or nine-digit (33558-3321)
                        format is acceptable for the USA. Six digit(A0A 0A0) or
                        (A0A0A0) format is acceptable for Canada.
                    countryCode:
                      type: string
                      example: USA
                      description: >-
                        3-character alphabetical country code according to ISO
                        3166-1, eg: USA, CAN etc.
            lineItems:
              type: array
              items:
                type: object
                properties:
                  commodityCode:
                    type: string
                    example: cmd123
                    description: Identification number for the Purchase.
                  description:
                    type: string
                    description: Description for line item.
                    example: It will give some description of the order description.
                  discountAmount:
                    type: integer
                    format: uint32
                    minimum: 0
                    example: 10
                    description: The smallest currency units, for example, cents in USD.
                  discountIndicator:
                    type: boolean
                    example: false
                    description: discountIndicator value will be true or false.
                  grossNetIndicator:
                    type: boolean
                    example: true
                    description: grossNetIndicator value will be true or false.
                  lineItemTotal:
                    type: integer
                    format: uint32
                    minimum: 0
                    example: 110
                    description: The smallest currency units, for example, cents in USD.
                  productCode:
                    type: string
                    maxLength: 12
                    example: '3823'
                    description: Code of the product.
                  quantity:
                    type: integer
                    format: float
                    example: 2
                    description: If present, must be greater than zero.
                  taxAmount:
                    type: integer
                    format: uint32
                    minimum: 0
                    description: The smallest currency units, for example, cents in USD.
                    example: 5
                  taxRate:
                    type: number
                    format: float
                    minimum: 0
                    example: 0.5
                    description: Tax rate of the Order.
                  taxType:
                    type: string
                    example: Sales
                    description: Type of the tax.
                  unitCost:
                    type: integer
                    format: float
                    minimum: 0
                    description: >-
                      In smallest currency units, eg: cents in USD so 13.25 = 13
                      and one quarter cents.
                  unitOfMeasure:
                    type: string
                    example: unit
                    description: Unit to measure the tax.
        options:
          type: object
          properties:
            orderTrackingNumber:
              type: string
              example: trackid123
              description: Tracking number for the Order.
            ecommerceFlag:
              type: string
              description: >-
                Used to classify the style of transaction being performed. 2 =
                Recurring, 3 = Installment.
              maxLength: 1
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '6'
                - '7'
                - '8'
                - R
                - I
                - X
            customerIp:
              type: string
              format: ipv4
              example: 101.188.67.134
              description: IP address of the customer.
      x-examples:
        Example 1:
          id: string
          status: awaiting_payment
          accessToken:
            token: string
            expires_at: '2022-12-20T21:53:38.369Z'
          paymentId: string
          amount: 0
          surchargeAmount: 0
          taxAmount: 0
          capture: true
          description: string
          reference:
            customerRef: string
            referenceNo: string
            reference3: string
            correlationId: string
          billing:
            name: string
            email: user@example.com
            phone: string
            phoneType: H
            address:
              line1: string
              line2: string
              city: string
              state: string
              postalCode: string
              countryCode: string
          softDescriptor:
            dbaName: string
            street: string
            city: string
            state: string
            postalCode: string
            countryCode: string
            mcc: string
            merchantContactInfo: string
          level3:
            taxAmount: 0
            taxRate: 0
            altTaxAmount: 0
            altTaxId: string
            dutyAmount: 0
            freightAmount: 0
            discountAmount: 0
            shipFromZip: string
            shipTo:
              name: string
              email: user@example.com
              phone: string
              phoneType: H
              address:
                line1: string
                line2: string
                city: string
                state: string
                postalCode: string
                countryCode: string
            lineItems:
              - commodityCode: string
                description: string
                discountAmount: 0
                discountIndicator: true
                grossNetIndicator: true
                lineItemTotal: 0
                product_code: string
                quantity: 0
                taxAmount: 0
                taxRate: 0
                taxType: string
                unitCost: 0
                unitOfMeasure: string
          options:
            orderTrackingNumber: string
            ecommerceFlag: '1'
            customerIp: 198.51.100.42
    order_search:
      type: object
      additionalProperties: false
      properties:
        available:
          type: integer
          format: int32
          description: Total number of orders available.
        results:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/order_response'
    order_options:
      type: object
      additionalProperties: false
      properties:
        orderTrackingNumber:
          type: string
          example: trackid123
          description: Tracking number for the Order.
        ecommerceFlag:
          type: string
          description: >-
            Used to classify the style of transaction being performed. 2 =
            Recurring, 3 = Installment.
          maxLength: 1
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
            - '6'
            - '7'
            - '8'
            - R
            - I
            - X
        customerIp:
          type: string
          format: ipv4
          example: 198.51.100.42
          description: Customer IP address.
    order:
      type: object
      additionalProperties: false
      required:
        - amount
        - reference
      properties:
        amount:
          type: integer
          format: int32
          minimum: 0
          maximum: 999999999
          example: 123
          description: >-
            Amount in smallest currency unit, eg: cents, including all
            surcharges, taxes etc.
        reference:
          $ref: '#/components/schemas/reference'
        surchargeAmount:
          type: integer
          format: int32
          minimum: 0
          maximum: 999999999
          example: 123
          description: >-
            This is assumed to already be included in the amount. (Available for
            Elavon processing only)
        taxAmount:
          type: integer
          format: uint32
          minimum: 0
          maximum: 999999999
          example: 123
          description: >-
            Tax value included in total amount. Sales tax in the US, or PST for
            Canadian merchants. The smallest currency units, for example, cents
            in USD. This is assumed to already be included in the amount.
        capture:
          type: boolean
          example: true
          description: >-
            Set this to false if you only want to authorize for the amount.
            Defaults to true.
        description:
          type: string
          example: Order description
          description: It will give some description of the order description
        billing:
          description: >-
            Optional billing details for the customer. If you have enabled AVS
            filters on your terminal, this becomes mandatory and AVS checks will
            be performed on the address.
          $ref: '#/components/schemas/customer_details'
        softDescriptor:
          $ref: '#/components/schemas/soft_descriptor'
        level3:
          $ref: '#/components/schemas/level3'
        options:
          $ref: '#/components/schemas/order_options'
    full_address:
      type: object
      additionalProperties: false
      required:
        - line1
        - city
        - postal_code
        - country_code
      properties:
        line1:
          type: string
          minLength: 2
          maxLength: 30
        line2:
          type: string
          minLength: 2
          maxLength: 28
        city:
          type: string
          minLength: 2
          maxLength: 20
        state:
          type: string
          maxLength: 2
        postal_code:
          type: string
          minLength: 2
          maxLength: 10
        country_code:
          type: string
          description: >-
            3-character alphabetical country code according to ISO 3166-1, eg:
            USA, CAN etc.
          pattern: ^[A-Z]{3}$
    entity:
      type: object
      additionalProperties: false
      required:
        - name
        - address
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        phone:
          type: string
          maxLength: 20
        website:
          type: string
          maxLength: 70
        address:
          $ref: '#/components/schemas/full_address'
    account_details:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: The unique identifier for the account.
        status:
          type: string
          description: The current status of the account.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        business_entity:
          $ref: '#/components/schemas/entity'
    account_search:
      type: object
      additionalProperties: false
      properties:
        available:
          type: integer
          format: int32
          minimum: 0
          description: Total number of accounts available.
        results:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/account_details'
    account:
      type: object
      additionalProperties: false
      required:
        - business_entity
      properties:
        business_entity:
          $ref: '#/components/schemas/entity'
    fiserv_merchant:
      type: object
      additionalProperties: false
      properties:
        fiserv:
          type: object
          additionalProperties: false
          required:
            - mid
          properties:
            mid:
              description: Fiserv's Merchant ID for this merchant.
              type: string
              minLength: 2
              maxLength: 20
    elavon_merchant:
      type: object
      additionalProperties: false
      properties:
        elavon:
          type: object
          additionalProperties: false
          required:
            - mid
            - bank_number
          properties:
            mid:
              description: Elavon's Merchant ID for this merchant.
              type: string
              minLength: 10
              maxLength: 10
            bank_number:
              description: Elavon's bank number for this merchant.
              type: string
              minLength: 6
              maxLength: 6
    merchant_details:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: The unique identifier for the merchant.
        name:
          type: string
        status:
          type: string
          description: The current status of the merchant.
        processor_details:
          type: object
          oneOf:
            - $ref: '#/components/schemas/fiserv_merchant'
            - $ref: '#/components/schemas/elavon_merchant'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    merchant_search:
      type: object
      additionalProperties: false
      properties:
        available:
          type: integer
          format: int32
          minimum: 0
          description: Total number of merchants available.
        results:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/merchant_details'
    merchant_detail:
      type: object
      additionalProperties: false
      required:
        - name
        - processor_details
      properties:
        name:
          type: string
          maxLength: 50
        processor_details:
          type: object
          oneOf:
            - $ref: '#/components/schemas/fiserv_merchant'
            - $ref: '#/components/schemas/elavon_merchant'
    fiserv_terminal:
      type: object
      additionalProperties: false
      properties:
        fiserv:
          type: object
          additionalProperties: false
          required:
            - division_id
          properties:
            division_id:
              description: Fiserv's Division ID for this merchant.
              type: string
              minLength: 2
              maxLength: 10
            transarmor_token:
              description: The TransArmor token for this terminal.
              type: string
              minLength: 4
              maxLength: 4
    elavon_terminal:
      type: object
      additionalProperties: false
      properties:
        elavon:
          type: object
          additionalProperties: false
          required:
            - tid
          properties:
            tid:
              description: Elavon's Terminal ID for this terminal.
              type: string
              minLength: 3
              maxLength: 3
    card_brand:
      type: object
      additionalProperties: false
      required:
        - brand
      properties:
        brand:
          type: string
          description: The card brand, lowercase.
          enum:
            - visa
            - mastercard
            - amex
            - discover
            - diners
            - jcb
            - union pay
        mcc:
          type: string
          description: the MCC for the card brand.
          minLength: 2
          maxLength: 20
    features:
      type: object
      additionalProperties: false
      properties:
        instant_funding:
          type: boolean
          default: false
          description: >-
            Enable instant funding settlement for this terminal (Available for
            Elavon processing only).
        apple_pay:
          type: boolean
          default: false
          description: Enable Apple Pay payments for this terminal.
        google_pay:
          type: boolean
          default: false
          description: Enable Google Pay payments for this terminal.
        paypal:
          type: boolean
          default: false
          description: Enable PayPal payments for this terminal.
        soft_descriptors:
          type: boolean
          default: false
          description: Enable Soft Descriptors for this terminal.
        level2:
          type: boolean
          default: false
          description: Enable support for Level2 payment fields for this terminal.
        level3:
          type: boolean
          default: false
          description: Enable support for Level3 payment fields for this terminal.
    terminal_details:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: The unique identifier for the terminal.
        name:
          type: string
        gateway_id:
          type: string
          description: >-
            An identifier for this terminal used when processing with the
            Payments API.
        status:
          type: string
          description: The current status of the terminal.
        time_zone:
          type: string
          description: The terminal's time zone.
        cutover_delta_minutes:
          type: integer
          format: int32
          minimum: -1439
          maximum: 1440
          description: >-
            Cutover time expressed as minutes before (negative) or after
            (positive) midnight, eg. a delta of -100 means a cutover time of
            10:20 PM.
        currency_code:
          type: string
          description: The currency in which payments will be processed.
        language:
          type: string
          enum:
            - en
            - es
        processor_details:
          type: object
          oneOf:
            - $ref: '#/components/schemas/fiserv_terminal'
            - $ref: '#/components/schemas/elavon_terminal'
        settlement_entity:
          $ref: '#/components/schemas/entity'
        card_brands:
          type: array
          maxItems: 20
          items:
            $ref: '#/components/schemas/card_brand'
        features:
          $ref: '#/components/schemas/features'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    terminal_search:
      type: object
      additionalProperties: false
      properties:
        available:
          type: integer
          format: int32
          minimum: 0
          description: Total number of terminals available.
        results:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/terminal_details'
    risk_control:
      type: object
      required:
        - hours_duration
      properties:
        hours_duration:
          type: integer
          format: uint32
          minimum: 1
          maximum: 168
          description: Number of hours over which to query.
        only_approved:
          type: boolean
          default: false
          description: >-
            Whether to include all payments or only approved payments. Defaults
            to include all payments.
        enabled:
          type: boolean
          default: false
          description: Whether or not this control is enabled.
    risk_controls:
      type: object
      additionalProperties: false
      properties:
        avs_filter:
          type: string
          description: >-
            A string of AVS response codes which should cause the transaction to
            be declined, eg: "MN" would result in rejection of any payments with
            an AVS response code of "M" or "N". **Note:** acceptable AVS codes
            are dependent on which backend processor you are provisioned for.
        cvd_filter:
          type: string
          description: >-
            A string of CVD response codes which should cause the transaction to
            be declined, eg: "XYS" would result in rejection of any payments
            with a CVD response code of "X", "Y" or "S".
        max_sale:
          type: object
          description: Any payment with an amount greater than this limit will be rejected.
          additionalProperties: false
          required:
            - amount
          properties:
            amount:
              type: integer
              format: uint32
              description: Maximum amount per payment, in cents.
              minimum: 1
            enabled:
              type: boolean
              default: false
              description: Whether or not this control is enabled.
        min_sale:
          type: object
          description: Any payment with an amount less than this limit will be rejected.
          additionalProperties: false
          required:
            - amount
          properties:
            amount:
              type: integer
              format: uint32
              description: Minimum amount per payment, in cents.
              minimum: 0
            enabled:
              type: boolean
              default: false
              description: Whether or not this control is enabled.
        max_transaction_sum:
          description: >-
            Any payment will be rejected if the sum total of all payments in the
            specified period would be greater than the specified total.
          allOf:
            - type: object
              required:
                - total
              properties:
                total:
                  type: integer
                  format: uint32
                  minimum: 1
                  description: Maximum transaction sum allowed over the period, in cents.
            - $ref: '#/components/schemas/risk_control'
        max_transaction_count:
          description: >-
            Any payment will be rejected if the total count of all payments in
            the specified period would be greater than the specified total.
          allOf:
            - type: object
              required:
                - count
              properties:
                count:
                  type: integer
                  format: uint32
                  minimum: 1
                  description: Maximum number of transactions allowed over the period.
            - $ref: '#/components/schemas/risk_control'
        max_card_sum:
          description: >-
            Any payment will be rejected if the sum total of all payments for
            the payment's card number in the specified period would be greater
            than the specified total.
          allOf:
            - type: object
              required:
                - total
              properties:
                total:
                  type: integer
                  format: uint32
                  minimum: 1
                  description: >-
                    Maximum transaction sum per card number allowed over the
                    period, in cents.
            - $ref: '#/components/schemas/risk_control'
        max_card_count:
          description: >-
            Any payment will be rejected if the total count of all payments for
            the payment's card number in the specified period would be greater
            than the specified total.
          allOf:
            - type: object
              required:
                - count
              properties:
                count:
                  type: integer
                  format: uint32
                  minimum: 1
                  description: >-
                    Maximum transaction count per card number allowed over the
                    period.
            - $ref: '#/components/schemas/risk_control'
        max_ip_count:
          description: >-
            Any payment will be rejected if the total count of all payments for
            the customer's IP in the specified period would be greater than the
            specified total. To make use of this control, you must include the
            *customer_ip* field in your payment requests.
          allOf:
            - type: object
              required:
                - count
              properties:
                count:
                  type: integer
                  format: uint32
                  minimum: 1
                  description: >-
                    Maximum transaction count per IP address allowed over the
                    period.
            - $ref: '#/components/schemas/risk_control'
    terminal:
      type: object
      additionalProperties: false
      required:
        - name
        - time_zone
        - processor_details
        - card_brands
      properties:
        name:
          type: string
          maxLength: 50
        currency_code:
          type: string
          description: >-
            The ISO currency code of the default currency for the terminal.
            Defaults to USD.
          pattern: ^[A-Z]{3}$
        time_zone:
          type: string
          description: The terminal's time zone.
          enum:
            - ADT
            - AKDT
            - AST
            - CDT
            - CST
            - EDT
            - EST
            - HST
            - MDT
            - MST
            - NDT
            - PDT
            - PST
        cutover_delta_minutes:
          type: integer
          format: int32
          maximum: 1440
          minimum: -1439
          description: >-
            Default cutover time is midnight on the day of recording. The delta
            is minutes before (negative) or after (positive) midnight, eg. a
            delta of -100 means a cutover time of 10:20 PM.
        language:
          type: string
          enum:
            - en
            - es
        processor_details:
          type: object
          oneOf:
            - $ref: '#/components/schemas/fiserv_terminal'
            - $ref: '#/components/schemas/elavon_terminal'
        settlement_entity:
          $ref: '#/components/schemas/entity'
        card_brands:
          type: array
          maxItems: 20
          description: An array of card brands to be enabled for this terminal.
          items:
            $ref: '#/components/schemas/card_brand'
        features:
          $ref: '#/components/schemas/features'
        risk_controls:
          $ref: '#/components/schemas/risk_controls'
    user_details:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: A unique identifier for this user.
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          type: string
          description: The current status of the user.
        activation_link:
          type: string
          description: The URL the user will need to visit to complete their account setup.
        last_login_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    user_search:
      type: object
      additionalProperties: false
      properties:
        available:
          type: integer
          format: int32
          minimum: 0
          description: Total number of admin users available.
        results:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/user_details'
    create_user:
      type: object
      additionalProperties: false
      required:
        - first_name
        - last_name
        - email
        - phone
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
        last_name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 50
          description: >-
            The admin user's email address. This will become their username when
            logging into the Exact Gateway Admin UI.
        phone:
          type: string
          maxLength: 14
    update_user:
      type: object
      additionalProperties: false
      required:
        - first_name
        - last_name
        - phone
      properties:
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        phone:
          type: string
          maxLength: 14
    AccountID:
      type: string
      description: Account identifier assigned in Exact Payments system.
      example: 64b04d6d198ce11d0d64ca2a
    AccountMode:
      type: string
      enum:
        - test
        - live
      description: >-
        Use the `live` value to perform actual transactions. Use the `test`
        value to perform mocked transactions. The `live` value is available only
        for live accounts.
      # default: The current user's account live capability.
      example: live
    AccountType:
      type: string
      enum:
        - organization
        - account
      description: '`organization` for Partner and `account` for Merchant.'
      example: account
    UserID:
      type: string
      description: User identifier assigned in Exact Payments system.
      example: 64b04d6d198ce11d0d64ca2a
    Permissions:
      type: string
      enum:
        - users.read
        - users.update
        - users.delete
        - users.disable
        - users.set-permissions
        - users.proxy
        - organization-invites.create
        - organization-invites.read
        - organization-invites.delete
        - account-invites.create
        - account-invites.read
        - account-invites.delete
        - organizations.create
        - organizations.read
        - organizations.update
        - organizations.delete
        - organizations.disable
        - organizations.transfer
        - accounts.create
        - accounts.read
        - accounts.update
        - accounts.delete
        - accounts.disable
        - accounts.transfer
        - accounts.read-balance
        - applications.create
        - applications.read
        - applications.update
        - applications.delete
        - application-tokens.create
        - application-tokens.read
        - application-tokens.delete
        - templates.set
        - templates.unset
        - roles.create
        - roles.read
        - roles.update
        - roles.delete
        - roles.disable
        - onboardings.create
        - onboardings.read
        - onboardings.update
        - onboardings.delete
        - onboarding-document-requests.create
        - onboarding-document-requests.update
        - onboarding-document-requests.read
        - onboarding-document-requests.delete
        - onboarding-documents.create
        - onboarding-documents.update
        - onboarding-documents.read
        - onboarding-documents.delete
        - onboarding-notes.create
        - onboarding-notes.read
        - onboarding-workflows.create
        - onboarding-workflows.read
        - onboarding-workflows.update
        - onboarding-workflows.delete
        - charges.create
        - charges.read
        - charges.update
        - charges.read-guid
        - plans.create
        - plans.read
        - plans.delete
        - plans.update
        - subscriptions.create
        - subscriptions.read
        - subscriptions.delete
        - subscriptions.update
        - customers.create
        - customers.read
        - customers.update
        - customers.delete
        - reports.create
        - reports.read
        - reports.update
        - reports.delete
        - events.read
        - webhooks.create
        - webhooks.read
        - webhooks.update
        - webhooks.delete
        - chargebacks.create
        - chargebacks.read
      description: Available permissions in Exact Payments system.
      example: charges.create
    ApplicationToken:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: Application Token identifier in Exact Payments system.
          example: 64b6d9ad24f5773308785e70
        label:
          type: string
          description: Free text to quickly identify the created Application Token.
          minLength: 1
          example: Transactions Application Token
        type:
          readOnly: true
          type: string
          description: >-
            Determines the type of the token. This endpoint only creates
            Application Tokens. For more details, check our
            [guide](https://developer.exactpay.com/docs/Authentication).
          default: application
          example: application
        token:
          readOnly: true
          type: string
          description: >-
            Application Token used by non-human user to access other API
            endpoints. Place this token in the `Authorization` header when you
            call other endpoints. It will not expire.
          example: >-
            bbf96d9ceafadca6614350066c93e4dbea4d44f6634cc9b18868e4bfd06e050874a0c31275b3a82d
        permissions:
          writeOnly: true
          type: array
          description: >-
            Operations that can be performed with the created Application Token.
            Giving the Application Token more permissions than those assigned to
            the current user who is creating the Application Token is not
            allowed.
          minItems: 1
          items:
            $ref: '#/components/schemas/Permissions'
          example:
            - charges.create
        mode:
          allOf:
            - writeOnly: true
            - $ref: '#/components/schemas/AccountMode'
        allowedPermissions:
          readOnly: true
          type: array
          description: Operations that can be performed with the created Application Token.
          items:
            $ref: '#/components/schemas/Permissions'
          example:
            - charges.create
        allowedAccounts:
          readOnly: true
          type: array
          description: >-
            List of Organization and Account identifiers that the created
            Application Token has access to.
          items:
            $ref: '#/components/schemas/AccountID'
          example:
            - 64b04d6d198ce11d0d64ca2a
    ApplicationTokenResponse:
      type: object
      properties:
        id:
          type: string
          description: Application Token identifier in Exact Payments system.
          example: 64b6d9ad24f5773308785e70
        label:
          type: string
          description: Free text to quickly identify the created Application Token.
          example: Transactions Application Token
        type:
          type: string
          description: >-
            Determines the type of the token. This endpoint only retrieves
            Application Tokens. For more details, check our
            [guide](https://developer.exactpay.com/docs/Authentication).
          default: application
          example: application
        allowedPermissions:
          type: array
          description: Operations that can be performed with the Application Tokens.
          items:
            $ref: '#/components/schemas/Permissions'
          example:
            - charges.create
        createdAt:
          type: string
          description: The date and time when the Application Token was created.
          format: date-time
          example: '2022-01-24T15:05:18.262Z'
    AccountRequest:
      type: object
      properties:
        name:
          type: string
          description: The account's name
          example: Exact Payments
        phone:
          type: string
          description: The account's phone number
          example: 1111111111
        email:
          type: string
          description: The account's email
          example: contact@exactpay.com
        onlinePresence:
          type: string
          description: Online presence
          example: Online presence
        facebook:
          type: string
          description: facebook
          example: facebook
        twitter:
          type: string
          description: twitter
          example: twitter
        linkedIn:
          type: string
          description: linkedIn
          example: linkedIn
        address:
          type: object
          properties:
            city:
              type: string
              description: The name of the City
              example: Ottawa
            country:
              type: string
              description: The name of the Country
              example: Canada
            line1:
              type: string
              description: The Address line 1
              example: 1st street
            line2:
              type: string
              description: The Address line 2
              example: Apartment 1234
            postalCode:
              type: string
              description: The postal Code
              example: A1A 1A1
            state:
              type: string
              description: The State name
              example: Ontario
    AccountResponse:
      type: object
      x-examples:
        example-1:
          _id: 628bee3adfb95f34e36616b5
          id: 628bee3adfb95f34e36616b5
          type: account
          parentAccountId: 62ed3ba4198abaf23bdaf68c
          name: sb test account 2
          dbaName: sb test account 2
          isLiveCapable: true
          isDisabled: false
          liveCapableAt: '2022-08-08T20:37:10.525Z'
          features: []
          cascadingFeatures: []
          createdAt: '2022-05-23T20:27:38.688Z'
          updatedAt: '2022-05-23T20:27:38.688Z'
          phone: '8654037300'
          email: contact@company.com
          onlinePresence: https://company.com
          address:
            city: Knoxville
            country: USA
            line1: 1 BUSINESS ST
            postalCode: '37920'
            state: TN
          ach:
            customer: ff9ae32c-e503-4a25-8633-951f969fd28c
      properties:
        id:
          type: string
        type:
          type: string
        parentAccountId:
          type: string
        name:
          type: string
        dbaName:
          type: string
        isLiveCapable:
          type: boolean
        isDisabled:
          type: boolean
        liveCapableAt:
          type: string
        features:
          type: array
          items:
            type: string
        cascadingFeatures:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        phone:
          type: string
        email:
          type: string
        onlinePresence:
          type: string
        address:
          $ref: '#/components/schemas/MerchantAddress'
        disabledAt:
          type: string
        disabledByUser:
          type: string
        defaultMerchantId:
          type: string
        defaultTerminalId:
          type: string
        defaultTerminalGatewayId:
          type: string
        ach:
          type: object
          properties:
            customer:
              type: string
      description: ''
    InviteAccept:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: >-
            The password that the user decided to use to stablish its
            credentials in the system.
          example: yourPassword
        application:
          type: string
          description: The user credentials will be associated to this application.
          example: admin-pwa
    InviteRequest:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/InviteUser'
    InviteResponse:
      type: object
      properties:
        _id:
          type: string
          example: 61ef40bfa41a93e84ff3709c
        user:
          $ref: '#/components/schemas/InviteUser'
        createdAt:
          type: string
          description: Date when the Invite was created.
          format: date-time
          example: '2022-01-24T15:05:18.262Z'
    InviteUser:
      type: object
      required:
        - name
        - email
        - roles
      properties:
        name:
          type: string
          description: Name of the new user that will be invited into the system.
          example: John Doe
        email:
          type: string
          description: >-
            Email that will be used by the system to send the invite, must be
            unique in the system.
          example: john.doe@domain.com
        phone:
          type: string
          description: Phone number of the invited user.
          example: 5621823401
        roles:
          type: array
          description: The role Ids granted to the user
          items:
            type: string
          example:
            - 61a78fe82c3156b0945ef135
    UserToken:
      type: object
      properties:
        email:
          writeOnly: true
          type: string
          description: User's email.
          example: jon.doe@acmecorp.com
        password:
          writeOnly: true
          type: string
          description: User's password.
          example: E*3q&87uBHc5xiIsiLK0
        isAuthenticated:
          readOnly: true
          type: boolean
          description: Flag to determine if the user is authenticated.
          example: 'true'
        mode:
          $ref: '#/components/schemas/AccountMode'
        token:
          readOnly: true
          type: string
          description: >-
            User identity to allow the user to access other API endpoints. Place
            this token in the `Authorization` header when you call other
            endpoints. It's valid for 2 hours.
          example: >-
            4b757cf8f34660db39e26b147bd2c830e2439e86c068eb6e2bbf488c619ce75ed6b92b78b4edf02d
        type:
          readOnly: true
          type: string
          description: >-
            Determines the type of the token. This endpoint only creates User
            Tokens. For more details, check our
            [guide](https://developer.exactpay.com/docs/Authentication).
          default: user
          example: user
        user:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/UserID'
        application:
          type: string
          description: >-
            Application ID calling the API. Specify your assigned Application
            ID, otherwise, use the default value or leave it empty if you aren't
            assigned any Application ID. It can be specified in the header or in
            the body. If you're building your own application, refer to our
            [guide](https://developer.exactpay.com/docs/authentication) on how
            to get an Application ID.
          default: admin-pwa
          example: admin-pwa
        account:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/AccountID'
        accountType:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/AccountType'
        allowedPermissions:
          readOnly: true
          type: array
          description: Operations that can be performed with the created User Token.
          items:
            $ref: '#/components/schemas/Permissions'
          example:
            - charges.create
        allowedAccounts:
          readOnly: true
          type: array
          description: >-
            List of Organization and Account identifiers that the created User
            Token has access to.
          items:
            $ref: '#/components/schemas/AccountID'
          example:
            - 64b04d6d198ce11d0d64ca2a
        apiVersion:
          readOnly: true
          type: string
          description: >-
            Current API version to use in other API calls. It follows Semantic
            Versioning standard. Currently the versioning isn't supported.
          default: 1.0.0
          example: 1.0.0
        expiresAt:
          readOnly: true
          type: string
          description: The time when the created User Token expires.
          example: '2023-07-13T20:37:37.088Z'
    MerchantCategoryCodes:
      type: string
      description: >-
        Merchant category code (MCCs) is a four-digit numbers that describe a
        business's primary business activities. Refer to the endpoint [Merchant
        Category Codes](/operations/listMerchantCategoryCodes) to get the list
        of acceptable MCC codes by Exact Payments.
      example: '1771'
    OnboardingRequest:
      type: object
      properties:
        workflow:
          type: string
          description: >-
            The Workflow Identifier that will be used to onboard the
            Application. If the Workflow identifier is not sent (or) the
            Workflow identifier sent is wrong, then the default Workflow of the
            Organization that is submitting the Onboarding Application will be
            used.
          example: 63efb29650b4bb4b4f6fd5f4
        clientIp:
          type: string
          description: The IP address of the client who sent the Onboarding Application.
          example: 63.45.12.34
        type:
          type: string
          description: >-
            The type of entity being boarded. To onboard a Partner use
            `organization` and to onboard a Merchant use `account`.
          enum:
            - organization
            - account
          example: organization
        merchant:
          $ref: '#/components/schemas/OnboardingMerchant'
      required:
        - merchant
    BusinessClassification:
      type: object
      properties:
        id:
          type: string
          description: >-
            Dwolla's Business classification Identifier mapped to Organization
            or Account's MCC code.
          example: 9ed4449a-7d6f-11e3-a380-5404a6144203
        name:
          type: string
          description: >-
            Business classification name mapped to Organization or Account's MCC
            code.
          example: Miscellaneous store retailer
    Dwolla:
      type: object
      description: >-
        Information about Onboarding details with Dwolla for ACH Payment
        enablement. Only Accounts are onboarded with Dwolla. Organizations are
        not onboarded with Dwolla and the status will always be `na` for
        Organizations.
      properties:
        businessClassification:
          $ref: '#/components/schemas/BusinessClassification'
        id:
          type: string
          description: >-
            The Customer Identifier received from Dwolla for the onboarded
            Account. This field will be populated when the merchant is onboarded
            with Dwolla for ACH Payment processing.
          example: 8145b6fa-ddb4-4ce9-9c5c-6f5c3ca90fa8
        status:
          type: string
          description: >-
            Status of Onboarding with Dwolla when ACH Payment is enabled for the
            onboarded Account. When ACH Payment enablement is not needed for the
            Account or the onboarded entity is an Organization then the status
            will be updated as `na` (Not Applicable).
          enum:
            - na
            - started
            - reverification_needed
            - verification_document_needed
            - beneficial_owner_reverification_needed
            - beneficial_owner_document_needed
            - completed
            - suspended
          example: completed
        createdAt:
          type: string
          description: >-
            The date and time when the Account is created or verified with
            Dwolla.
          example: '2016-08-17T18:58:47.630Z'
        documentNeeded:
          type: string
          description: >-
            The documentation needed for Dwolla to verify the identity of the
            Business or the Owner's information. This field will be populated
            when the Dwolla's Onboarding status is
            `verification_document_needed`.
          example: Owner's Identity proof
        type:
          type: string
          description: >-
            The customer type as provisioned by Dwolla for the Account when the
            merchant is Onboarded with Dwolla.
          example: business
          enum:
            - unverified
            - personal
            - business
            - receive-only
        beneficialOwnershipCertifyStatus:
          type: string
          description: >-
            The certification status of the Beneficial Owner (Principal) with
            Dwolla. This field will be populated when the Beneficial Owner's
            certification status is set or updated in Dwolla's system.
          enum:
            - uncertified
            - certified
            - rectify
          example: certified
    Elavon:
      type: object
      description: >-
        Information about Onboarding details with Elavon for Card Payment
        processing. Only Accounts are onboarded with Elavon. Organizations are
        not onboarded with Elavon and the status will always be `na` for
        Organizations.
      properties:
        boardingId:
          type: string
          description: >-
            The Onboarding Identifier received from Elavon for the onboarded
            Account. This field will be populated when the Account is onboarded
            with Elavon for card payment processing and Boarding Identifier is
            received from Elavon.
          example: SEOID-427054027
        status:
          type: string
          description: >-
            Status of Onboarding with Elavon when a card payment is enabled for
            the onboarded Account. When card payment enablement is not needed
            for the Account or if the onboarded entity is an organization then
            the status will be updated as `na` (Not Applicable).
          enum:
            - na
            - started
            - failed
            - completed
          example: completed
        mid:
          type: string
          description: >-
            The merchant identifier received from Elavon for the onboarded
            Account. This field will be populated when the Account is onboarded
            with Elavon for card payment processing and the merchant identifier
            is created by Elavon.
          example: A000000073
        bankNumber:
          type: string
          description: >-
            The Terminal BIN  received from Elavon for the onboarded Account.
            This field will be populated when the Account is onboarded with
            Elavon for card payment processing and Terminal BIN is received from
            Elavon.
          example: '008925'
        tid:
          type: string
          description: >-
            The terminal identifier received from Elavon for the onboarded
            Account. This field will be populated when the Account is onboarded
            with Elavon for card payment processing and the Terminal Identifier
            is created by Elavon.
          example: '842'
    BankBoarding:
      type: object
      description: >-
        Bank boarding details of the Onboarded Account. This field will be
        available only when the Onboarding enters the Bank Boarding state or has
        already boarded with the ACH and / or Credit card processors.
      properties:
        dwolla:
          $ref: '#/components/schemas/Dwolla'
        elavon:
          $ref: '#/components/schemas/Elavon'
    OnboardingTermsNConditions:
      type: object
      properties:
        exactPayments:
          type: boolean
          description: >-
            Whether the Onboarding Applicant agrees to Exact Payment's terms and
            conditions. 
          example: true
        dwolla:
          type: boolean
          description: >-
            Whether the Onboarding Applicant agrees to [Dwolla's terms and
            conditions](https://www.dwolla.com/legal/platform-agreement/).
          example: true
        notifications:
          type: boolean
          description: >-
            Whether the Onboarding Applicant agrees to Exact Payment's
            notification and communication policies.
          example: true
    OnboardingMerchant:
      type: object
      properties:
        name:
          type: string
          description: The Name of the Business.
          minLength: 2
          maxLength: 50
          pattern: ^(?!').*[a-zA-Z].*[\w\s'-]$
          example: Acme Corp
        businessRegistrationNumber:
          type: string
          description: Tax identifier of the Business.
          minLength: 9
          maxLength: 9
          pattern: ^[0-9]+$
          example: '888596928'
        dbaName:
          type: string
          description: Doing Business As Name.
          minLength: 2
          maxLength: 50
          pattern: ^(?!').*[a-zA-Z].*[\w\s'-]$
          example: Acme Trading
        establishedDate:
          type: string
          description: >-
            Business Established Date. It must be a valid date and the date
            can't be in the future.
          format: date-time
          example: '2021-07-21T16:24:22.678+00:00'
        numberOfEmployees:
          type: number
          description: >-
            Number of employees of the Business. The value must be a
            non-negative number.
          minimum: 1
          example: 100
        telephone:
          type: string
          description: >-
            Telephone Number of the Business. USA phone number can't start with
            0 0r 1. The value must be a valid number string.
          minLength: 10
          maxLength: 10
          pattern: ^[0-9]+$
          example: '2255441120'
        email:
          type: string
          description: Contact Email of the Business.
          format: email
          example: business-contact@acmecorp.com
        onlinePresence:
          type: string
          description: Website URL of the Business.
          maxLength: 62
          pattern: >-
            ^((?:http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@%_+.~#?&//=]*))
          example: www.acmecorp.com
        facebook:
          type: string
          description: Facebook link of the Business.
          pattern: >-
            ^((?:http(s)?:\/\/)?(www\.)?facebook.com\/(?:(?:\w)*#!\/)?(?:pages\/)?(?:[?\w-]*\/)?(?:profile.php\?id=(?=\d.*))?[\w-]*[a-zA-Z\d][\w-]*)
          example: www.facebook.com/acmecorp
        twitter:
          type: string
          description: Twitter link of the Business.
          pattern: >-
            ^(?:https?:\/\/)?(?:www\.)?twitter\.com\/(?=.*[a-zA-Z0-9])[&+=?%$@!.#\w-]+$
          example: www.twitter.com/acmecorp
        linkedIn:
          type: string
          description: LinkedIn link of the Business.
          pattern: >-
            ^(?:https?:\/\/)?(?:[a-z]{2,3}\.)?linkedin\.com\/(in|pub|company)\/(?=.*[a-zA-Z0-9])[&+=?%$@!.#\w-]+$
          example: www.linkedin.com/in/acmecorp
        entityType:
          type: string
          description: Entity type of the Business.
          enum:
            - LLC
            - Org
            - Sole prop
            - Non - Profit
            - Public Corp
          example: LLC
        anticipatedTransAmounts:
          $ref: '#/components/schemas/AnticipatedTransAmounts'
        mcc:
          $ref: '#/components/schemas/MerchantCategoryCodes'
        address:
          $ref: '#/components/schemas/MerchantAddress'
        bankingDetails:
          $ref: '#/components/schemas/BankingDetails'
        businessProfile:
          $ref: '#/components/schemas/BusinessProfile'
        principal:
          type: array
          description: The details for the Principal owners of the Business.
          items:
            $ref: '#/components/schemas/Principal'
        termsNConditions:
          $ref: '#/components/schemas/OnboardingTermsNConditions'
      required:
        - name
        - businessRegistrationNumber
        - dbaName
        - establishedDate
        - numberOfEmployees
        - telephone
        - email
        - onlinePresence
        - entityType
        - address
        - principal
        - mcc
    AnticipatedTransAmounts:
      required:
        - averageTicketSize
        - maxTicketSize
        - anticipatedMonthlyVolume
      type: object
      properties:
        averageTicketSize:
          type: number
          description: Average $ amount per transaction. It must be a non-negative number.
          example: 100
        maxTicketSize:
          type: number
          description: Maximum $ amount per transaction. It must be a non-negative number.
          example: 250
        anticipatedMonthlyVolume:
          type: number
          description: >-
            Anticipated total $ amount per month. It must be a non-negative
            number.
          example: 500000
    BankingDetails:
      type: object
      description: Banking details of the Applicant's business for ACH Payments.
      properties:
        bankName:
          type: string
          description: >-
            Name of the Bank where the business holds the Demand Deposit
            Account(DDA) or the Current Account to which they wanted to receive
            the funds via ACH.
          pattern: ^(?=.*[a-zA-Z])[a-zA-Z\s'-.&,/()]+
          example: Bank Of America
        routingNumber:
          type: string
          description: >-
            9-digit Routing Number for the Organization or Account based in USA
            (or) 3-digit Institution number for the Organization or Account
            based in Canada. The value must be a non-negative number string.
          pattern: ^[0-9]+$
          example: '124433212'
        ddaNumber:
          type: string
          description: >-
            Demand Deposit Account (or) Checking Account number. The value must
            be a non-negative number string.
          minLength: 3
          maxLength: 20
          pattern: ^[0-9]+$
          example: '223334456'
        bankNumber:
          type: string
          description: >-
            A bank transit number is a unique 5-digit number used to identify
            the bank branch in Canada. This is only applicable for businesses
            based in Canada. The value must be a non-negative number string.
          pattern: ^[0-9]+$
          example: '12345'
        plaidAccessToken:
          type: string
          description: >-
            Plaid Access Token for the bank account verified through Plaid
            integration. When the Plaid access token is provided, the bank
            account will be added as a Verified Funding Source. Otherwise, the
            bank account will be added as Unverified Funding Source.
          example: access-development-8fa36560-e4ce-4a30-9a5c-d5ef629a7010
      required:
        - bankName
        - routingNumber
        - ddaNumber
    BusinessProfile:
      type: object
      required:
        - servicesDescription
        - currentlyAcceptingPayments
        - acceptanceMethods
        - recurringServices
        - refundPolicyDescription
      properties:
        servicesDescription:
          type: string
          description: The description of the Product or services provided by the business.
          minLength: 1
          pattern: '[A-Za-z]+'
          example: Computer and accessories
        currentlyAcceptingPayments:
          type: boolean
          description: >-
            Whether the business is currently accepting the Payments or not. If
            `true` then `currentProcessor`, `currentGateway` and
            `reasonForLeaving` field values are required.
          example: true
        currentProcessor:
          type: string
          description: >-
            Current Processor with whom the business is having contract with.
            This field value is required only when `currentlyAcceptingPayments`
            field value is `true`.
          minLength: 1
          pattern: '[A-Za-z]+'
          example: Global Processing Services LLC
        currentGateway:
          type: string
          description: >-
            Current gateway with whom the business is having contract with. This
            field value is required only when `currentlyAcceptingPayments` field
            value is `true`.
          minLength: 1
          pattern: '[A-Za-z]+'
          example: International Payments Gateway Services LLC
        reasonForLeaving:
          type: string
          description: >-
            Reason for leaving current processor/gateway. This field value is
            required only when `currentlyAcceptingPayments` field value is
            `true`.
          minLength: 1
          pattern: '[A-Za-z]+'
          example: Does not meet expectations.
        acceptanceMethods:
          $ref: '#/components/schemas/AcceptanceMethods'
        recurringServices:
          type: boolean
          description: >-
            Whether the business provides any recurring services or not. If
            `true` then `recurringServicesDescription` field value is required.
          example: true
        recurringServicesDescription:
          type: string
          description: >-
            The description of the recurring services provided by the business.
            This field value is required only when `recurringServices` field
            value is `true`.
          minLength: 1
          pattern: '[A-Za-z]+'
          example: >-
            Printer ink refills are fulfilled every month based on customer
            subscription
        refundPolicyDescription:
          type: string
          description: Refund policy.
          minLength: 1
          pattern: '[A-Za-z]+'
          example: >-
            Returns are accepted within 30 days of purchase when presented with
            the original receipt and packaging. Refunds will be credited to the
            Credit Card used while purchasing within five days from the return
            date.
        paymentTime:
          type: string
          description: The time at which the customer makes the payment to the business.
          enum:
            - Upon Purchase
            - Upon Download
            - At Time of Delivery
            - Other
          example: Upon Purchase
        deliveryTimeframe:
          type: string
          description: Delivery time frame that the business has for its products.
          enum:
            - Immediate
            - Within 7 days
            - Within 14 days
            - Within 30+ days
          example: Immediate
    AcceptanceMethods:
      type: object
      description: >-
        The method by which the business accepts the payments. The total value
        of all the methods can't exceed 100 percent.
      required:
        - moto
        - internet
        - swipe
        - keyed
      properties:
        moto:
          type: number
          description: >-
            Percentage of payments accepted through MOTO [Mail Order / Telephone
            Order].
          minimum: 0
          maximum: 100
          example: 25
        internet:
          type: number
          description: >-
            Percentage of payments accepted through Online websites. Online
            payments made through hosted payment pages.
          minimum: 0
          maximum: 100
          example: 25
        swipe:
          type: number
          description: >-
            Percentage of payments accepted through Swipe. Swipe are POS /
            Payment transactions made through Card reader.
          minimum: 0
          maximum: 100
          example: 25
        keyed:
          type: number
          description: >-
            Percentage of payments accepted through Keyed in card details. Card
            payment where a person manually types in the card information.
          minimum: 0
          maximum: 100
          example: 25
    MerchantAddress:
      required:
        - line1
        - city
        - country
        - countrySubdivision
        - postalCode
      type: object
      properties:
        line1:
          type: string
          description: >-
            Street Address of the Business (Building number and Street name). PO
            Box is not accepted.
          minLength: 2
          maxLength: 30
          pattern: >-
            ^(?!.*\b(?:p[.\s]*o[.\s]*box)\b)(?=.*[a-zA-Z0-9])[a-zA-Z0-9()/\\\-#,'._\s]*$
          example: MAIN AVENUE 42
        line2:
          type: string
          description: >-
            Secondary address unit of the Business (For example: apartment,
            suite, room, or floor numbers). PO Box is not accepted.
          minLength: 2
          maxLength: 28
          pattern: >-
            ^(?!.*\b(?:p[.\s]*o[.\s]*box)\b)(?=.*[a-zA-Z0-9])[a-zA-Z0-9()/\\\-#,'._\s]*$
          example: 42-59B Building A
        city:
          type: string
          description: The city where the business is located.
          minLength: 2
          maxLength: 20
          pattern: ^(?=.*[a-zA-Z])[A-Za-z\s\-']*$
          example: PHOENIX
        postalCode:
          type: string
          description: >-
            The postal code where the business is located. Five-digit (example:
            33558) or nine-digit (33558-3321) format is acceptable for USA. Six
            digit(A0A 0A0) or (A0A0A0) format is acceptable for Canada.
          example: '85008'
        country:
          type: string
          description: >-
            The three-digit country code where the business is located. Refer to
            the three-digit country code defined in ISO 3166-1 alpha-3.
          minLength: 3
          maxLength: 3
          enum:
            - USA
            - CAN
          example: USA
        countrySubdivision:
          type: string
          description: >-
            The two-digit country subdivision code where the business is
            located. Refer to the two-digit country subdivision code defined in 
            ISO 3166-2 for the countries listed in ISO 3166-1.
          minLength: 2
          maxLength: 2
          example: AZ
    PrincipalAddress:
      required:
        - line1
        - city
        - country
        - countrySubdivision
        - postalCode
      type: object
      properties:
        line1:
          type: string
          description: >-
            Street Address of the Principal (Building number and Street name).
            PO Box is not accepted.
          minLength: 2
          maxLength: 30
          pattern: >-
            ^(?!.*\b(?:p[.\s]*o[.\s]*box)\b)(?=.*[a-zA-Z0-9])[a-zA-Z0-9()/\\\-#,'._\s]*$
          example: MAIN AVENUE 42
        line2:
          type: string
          description: >-
            Secondary address unit of the Principal (For example: apartment,
            suite, room, or floor numbers). PO Box is not accepted.
          minLength: 2
          maxLength: 28
          pattern: >-
            ^(?!.*\b(?:p[.\s]*o[.\s]*box)\b)(?=.*[a-zA-Z0-9])[a-zA-Z0-9()/\\\-#,'._\s]*$
          example: 42-59B Building A
        city:
          type: string
          description: The city where the Principal is located.
          minLength: 2
          maxLength: 20
          pattern: ^(?=.*[a-zA-Z])[A-Za-z\s\-']*$
          example: PHOENIX
        postalCode:
          type: string
          description: >-
            The postal code where the Principal is located. Five-digit (example:
            33558) or nine-digit (33558-3321) format is acceptable for USA. Six
            digit(A0A 0A0) or (A0A0A0) format is acceptable for Canada.
          example: '85008'
        country:
          type: string
          description: >-
            The three-digit country code where the Principal is located. Refer
            to the three-digit country code defined in ISO 3166-1 alpha-3.
          minLength: 3
          maxLength: 3
          enum:
            - USA
            - CAN
          example: USA
        countrySubdivision:
          type: string
          description: >-
            The two-digit country subdivision code where the Principal is
            located. Refer to the two-digit country subdivision code defined in 
            ISO 3166-2 for the countries listed in ISO 3166-1.
          minLength: 2
          maxLength: 2
          example: AZ
    Principal:
      type: object
      properties:
        firstName:
          type: string
          description: The First Name of the Principal owner of the Business.
          minLength: 1
          maxLength: 255
          pattern: ^(?!').*[a-zA-Z].*[\w\s']$
          example: Justin
        lastName:
          type: string
          description: The Last Name of the Principal owner of the Business.
          minLength: 1
          maxLength: 255
          pattern: ^(?!').*[a-zA-Z].*[\w\s']$
          example: Williams
        title:
          $ref: '#/components/schemas/TitleValues'
        telephone:
          type: string
          description: >-
            Telephone Number of Principal Owner of the Business. USA phone
            number can't start with 0 0r 1. The value must be a valid number
            string.
          minLength: 10
          maxLength: 10
          pattern: ^[0-9]+$
          example: '2255441120'
        email:
          type: string
          description: The Principal's email.
          format: email
          example: princial@domain.com
        currentOwnershipYears:
          type: number
          description: >-
            Number of years the Principal's ownership in the Business. The value
            must be a non-negative number.
          minimum: 0
          example: 5
        currentOwnershipMonths:
          type: number
          description: >-
            Number of months the Principal's ownership in the Business. The
            value must be a non-negative number.
          minimum: 0
          maximum: 11
          example: 5
        dateOfBirth:
          type: string
          description: >-
            Birth date of the Principal. The Principal must be 18 years or
            older.
          format: date-time
          example: '1990-07-21T16:24:22.678+00:00'
        driversLicenseCountry:
          type: string
          description: >-
            The three-digit country code where the Principal's driving license
            was issued. Refer to the three-digit country code defined in ISO
            3166-1 alpha-3.
          minLength: 3
          maxLength: 3
          enum:
            - USA
            - CAN
          example: USA
          default: USA
        driversLicense:
          type: string
          description: Principal's driver license number.
          minLength: 0
          maxLength: 18
          pattern: ^[a-z0-9]+$
          example: M15698025
        driversLicenseState:
          type: string
          description: >-
            The two-digit country subdivision where the Principal's driving
            license was issued. Refer to the two-digit country subdivision code
            defined in ISO 3166-2 for the countries listed in ISO 3166-1.
          minLength: 2
          maxLength: 2
          example: IL
        ssn:
          type: string
          description: >-
            Principal's Social Security Number(SSN) for USA or Social Insurance
            Number(SIN) for Canada.
          minLength: 9
          maxLength: 9
          example: '756755675'
        ssnCountry:
          type: string
          description: >-
            The three-digit country code where the Principal's SSN / SIN was
            issued. Choose `USA` for SSN or `CAN` for SIN. Refer to the
            three-digit country code defined in ISO 3166-1 alpha-3.
          minLength: 3
          maxLength: 3
          enum:
            - USA
            - CAN
          example: USA
          default: USA
        ssnCountrySubdivision:
          type: string
          description: >-
            The two-digit country subdivision where the Principal's SSN / SIN
            was issued. Refer to the two-digit country subdivision code defined
            in  ISO 3166-2 for the countries listed in ISO 3166-1.
          minLength: 2
          maxLength: 2
          example: AZ
        percentOfOwnership:
          type: number
          description: >-
            The percentage of ownership held by the Principal in the business.
            The value must be a non-negative number. At most, The total
            ownership rate for all Principals can be 100 percent.
          minimum: 0
          maximum: 100
          example: 50
        address:
          $ref: '#/components/schemas/PrincipalAddress'
        nationality:
          type: string
          description: The nationality of the Principal.
          minLength: 3
          maxLength: 3
          enum:
            - USA
            - CAN
          example: USA
          default: USA
      required:
        - firstName
        - lastName
        - title
        - telephone
        - email
        - dateOfBirth
        - driversLicense
        - driversLicenseState
        - ssn
        - ssnCountrySubdivision
        - percentOfOwnership
        - address
    TitleValues:
      type: string
      description: >-
        The position or title held by the Principal owner or the Authorized
        Person of the Organization.
      example: CEO/President
      enum:
        - CEO/President
        - Owner/Founder
        - VP/Director
        - Manager
        - Administrator
        - Other
    OnboardingCreateResponse:
      description: '**Created**'
      type: object
      properties:
        _id:
          type: string
          description: >-
            The Unique identifier assigned to the Onboarding Application. Keep
            this as a reference to talk to our Customer Support team if you have
            any questions regarding this Application.
          example: 64b9a61e85c40a7a9847b1d4
        status:
          type: string
          description: Current status of the Onboarding Application.
          example: pendingChecks
        createdAt:
          type: string
          description: The date and time when the Onboarding Application is submitted.
          example: '2023-07-20T21:24:46.498Z'
        principals:
          type: array
          description: List of Principals added to the Business in Exact Payment system.
          items:
            $ref: '#/components/schemas/PrincipalCreateOnboardingResponse'
        tokenValueRaw:
          type: string
          description: >-
            This Onboarding Token value can be used to [Upload
            Documents](/operations/uploadDocumentByToken), allowing a Merchant
            to authenticate and upload documentation for the Onboarding
            Application. This token expires 10 minutes from the submission of
            the Onboarding Application.
          example: >-
            375dcda947a0dcd852df1d4878db152baad888dec559941d371d3471b8232e3a082216eaa45bfa9fbfa3eb4396d407980102cb3cff41350f59b12cb167744a215decbd74ca4841f2375f120a4f18f47a$
    Mcc:
      type: object
      description: The Merchant Category Code and the description.
      properties:
        code:
          type: string
          description: >-
            Merchant category code (MCCs) is a four-digit number that a credit
            card issuer uses to categorize the transactions consumers complete
            using a particular card.
          example: '5699'
        description:
          type: string
          description: Description of the Merchant category code.
          example: Accessory and Apparel Stores-Miscellaneous
    OnboardingWithoutPrincipal:
      type: object
      properties:
        _id:
          type: string
          description: Onboarding Application identifier.
          example: 615633de394b55001c954640
        merchant:
          $ref: '#/components/schemas/MerchantWithoutPrincipal'
        status:
          type: string
          description: The status of the Onboarding Application.
          example: Approved
        statusChangeReason:
          type: string
          description: >-
            Reason for the status change. The reason may be needed when the
            Onboarding status changes to `accountClosed`, `autoDeclined`,
            `declined`, `pended`, and `terminated`. This field will be available
            only when the status change reason is entered in the system.
          enum:
            - businessDissolved
            - customerDissatisfaction
            - pricing
            - merchantRequest
            - other
            - creditWorthiness
            - excessiveChargebacks
            - fraud
            - generalRiskConcern
            - prohibitedMerchant
            - unresolvedACHRejects
            - failedToVerifyIdentity
          example: failedToVerifyIdentity
        statusChangeReasonNote:
          type: string
          description: >-
            Notes related to the status change.  This field will be available
            only when the status change reason note is entered in the system.
          example: Unable to verify the identity by the due date.
        clientIp:
          type: string
          description: The IP address of the client who sent the Onboarding Application.
          example: 63.45.12.34
        organization:
          type: string
          description: >-
            The Identifier of the Organization under which this Onboarding
            Application was submitted
          example: 60f728e2e2cfc7135c0a51cd
        workflow:
          type: string
          description: >-
            The Workflow identifier used to evaluate this Onboarding
            Application.
          example: 61274e78eb13d43172b2959f
        bankBoarding:
          $ref: '#/components/schemas/BankBoarding'
        statusUpdatedAt:
          type: string
          description: The date and time when the status was last updated.
          example: '2022-01-13T23:33:33.995Z'
        approvedAt:
          type: string
          description: The date and time when the Onboarding Application was approved.
          example: '2022-01-14T23:33:33.995Z'
        terminatedAt:
          type: string
          nullable: true
          description: The date and time when the Organization or Account was terminated.
          example: '2022-01-15T23:33:33.995Z'
        closedAt:
          type: string
          nullable: true
          description: The date and time when the Organization or Account was closed.
          example: '2022-01-16T23:33:33.995Z'
        createdAt:
          type: string
          description: The date and time when the Onboarding Application was created.
          example: '2022-01-11T23:33:33.995Z'
        updatedAt:
          type: string
          description: The date and time when the Onboarding Application was last updated.
          example: '2022-01-11T23:33:33.995Z'
        secret:
          type: string
          description: The secret associated with the Organization or Account.
          example: 84b0f5b3-295c-4fc7-a8d2-90749b5e742a
        __v:
          type: number
          description: >-
            Version of the Onboarding Application, whenever an Onboarding
            Application is updated or ran through some process the version value
            will be incremented.
          example: 1
        account:
          $ref: '#/components/schemas/AccountID'
        type:
          type: string
          enum:
            - account
            - organization
          description: The type of the Onboarded entity.
          example: account
          default: account
    OnboardingWithPrincipalResponse:
      type: object
      properties:
        _id:
          type: string
          description: Onboarding Application identifier.
          example: 615633de394b55001c954640
        merchant:
          $ref: '#/components/schemas/Merchant'
        status:
          type: string
          description: The status of the Onboarding Application.
          example: Approved
        clientIp:
          type: string
          description: The IP address of the client who sent the Onboarding Application.
          example: 63.45.12.34
        organization:
          type: string
          description: >-
            The ID of the Organization who onboarded this Organization or the
            Account.
          example: 60f728e2e2cfc7135c0a51cd
        workflow:
          type: string
          description: >-
            The ID of the Workflow used to onboard the Organization or the
            Account.
          example: 61274e78eb13d43172b2959f
        bankBoarding:
          $ref: '#/components/schemas/BankBoarding'
        statusUpdatedAt:
          type: string
          description: The date and time when the status was last updated.
          example: '2022-01-13T23:33:33.995Z'
        approvedAt:
          type: string
          description: The date and time when the Onboarding Application was approved.
          example: '2022-01-14T23:33:33.995Z'
        terminatedAt:
          type: string
          nullable: true
          description: The date and time when the Organization or Account was terminated.
          example: '2022-01-15T23:33:33.995Z'
        closedAt:
          type: string
          nullable: true
          description: The date and time when the Organization or Account was closed.
          example: '2022-01-16T23:33:33.995Z'
        createdAt:
          type: string
          description: The date and time when the Onboarding Application was created.
          example: '2022-01-11T23:33:33.995Z'
        updatedAt:
          type: string
          description: The date and time when the Onboarding Application was updated.
          example: '2022-01-11T23:33:33.995Z'
        secret:
          type: string
          description: >-
            The secret associated with the Onboarding Application. This field
            will be available only when the secret is assigned to the Onboarding
            Application.
          example: 84b0f5b3-295c-4fc7-a8d2-90749b5e742a
        kycResults:
          type: array
          description: >-
            List of Rules executed or being executed as part of configured
            Workflow to Onboard the Account.
          items:
            $ref: '#/components/schemas/KycResults'
        __v:
          type: number
          description: >-
            Version of the Onboarding Application, when ever an Onboarding
            Application is updated or ran through some process the version value
            will be incremented
          example: 1
        account:
          type: string
          description: >-
            Account Identifier assigned by Exact Payments systems when the
            Workflow checks are passed and account created in Exact Payments
            system.
          example: 62f175f3198abaf23bdaf75c
        type:
          type: string
          enum:
            - account
            - organization
          description: The type of the Onboarded entity.
          example: account
          default: account
        isDeleted:
          type: boolean
          description: >-
            Indicates whether the Onboarding Application is soft
            deleted/deactivated.
          example: false
        isLocked:
          type: boolean
          description: Indicates whether the Onboarding Application is Locked.
          example: false
        documentRequest:
          $ref: '#/components/schemas/DocumentRequests'
        documents:
          $ref: '#/components/schemas/Documents'
    OnboardingDocumentRequestCreate:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: The Document Request identifier.
          example: 64c9983041f25a1ae3511d14
        type:
          writeOnly: true
          type: string
          description: The Template to use for the Document Request.
          enum:
            - application-received
            - onboarding-pended
            - onboarding-document-request
            - onboarding-approved
            - onboarding-declined
            - verify-email
            - password-reset
          example: onboarding-document-request
        subject:
          writeOnly: true
          type: string
          description: Subject for the Document Request email.
          minLength: 1
          example: Application Status Update Pending Documentation
        body:
          writeOnly: true
          type: string
          description: The content of the Document Request.
          minLength: 1
          example: >-
            Company: ACME Corp

            Hi Jon Doe

            Your application status has been updated to the following: Pended.
            Our Underwriting team has requested additional documentation to
            process your approval.

            Please upload the following documents for reviewing by clicking on
            the link below.

            Upload Documents

            Once we received & review the additional documentation, we will have
            you up and processing your electronic payment in no time.

            Stay-tuned for the next update!
        onboardingIsDeleted:
          writeOnly: true
          type: boolean
          description: >-
            Set to `true` if you're creating a Document Request for an already
            deleted Onboarding Application.
          default: false
          example: false
    OnboardingDocumentRequestUpdate:
      type: object
      properties:
        type:
          type: string
          description: The Template to use for the Document Request email.
          enum:
            - application-received
            - onboarding-pended
            - onboarding-document-request
            - onboarding-approved
            - onboarding-declined
            - verify-email
            - password-reset
          example: onboarding-document-request
        subject:
          type: string
          description: Subject for the Document Request email.
          minLength: 1
          example: Application Status Update Pending Documentation
        body:
          type: string
          description: The content of the Document Request email.
          minLength: 1
          example: >-
            Company: ACME Corp

            Hi Jon Doe

            Your application status has been updated to the following: Pended.
            Our Underwriting team has requested additional documentation to
            process your approval.

            Please upload the following documents for reviewing by clicking on
            the link below.

            Upload Documents

            Once we received & review the additional documentation, we will have
            you up and processing your electronic payment in no time.

            Stay-tuned for the next update!
    OnboardingDocumentRequestResponse:
      type: object
      properties:
        id:
          type: string
          description: The Document Request identifier.
          example: 64c9983041f25a1ae3511d14
        type:
          type: string
          description: The Template used for the Document Request.
          enum:
            - application-received
            - onboarding-pended
            - onboarding-document-request
            - onboarding-approved
            - onboarding-declined
            - verify-email
            - password-reset
          example: onboarding-document-request
        subject:
          type: string
          description: The subject of the email sent.
          example: Application Status Update Pending Documentation
        body:
          type: string
          description: The content of the email sent.
          minLength: 1
          example: >-
            Company: ACME Corp

            Hi Jon Doe

            Your application status has been updated to the following: Pended.
            Our Underwriting team has requested additional documentation to
            process your approval.

            Please upload the following documents for reviewing by clicking on
            the link below.

            Upload Documents

            Once we received & review the additional documentation, we will have
            you up and processing your electronic payment in no time.

            Stay-tuned for the next update!
        onboarding:
          type: string
          description: >-
            The Onboarding Application identifier for which the Document Request
            was sent.
          example: 6154ce01387b94001cd87ada
        user:
          type: string
          description: The User identifier who created the Document Request.
          example: 615498b8efd963001c6c9d62
        createdAt:
          type: string
          format: date-time
          description: The date and time when the Document Request was sent.
          example: '2021-10-01T22:05:18.262Z'
        updatedAt:
          type: string
          description: The date and time when the Document Request was last updated.
          format: date-time
          example: '2021-10-01T22:05:18.262Z'
    OnboardingDocumentRequestsResponse:
      type: array
      items:
        $ref: '#/components/schemas/OnboardingDocumentRequestResponse'
    OnboardingNote:
      type: object
      properties:
        _id:
          readOnly: true
          type: string
          description: The unique identifier created for the new Note.
          example: 6157861eef0827001c99d1eb
        user:
          readOnly: true
          type: string
          description: >-
            The identifier of the User who created the Note for the Onboarding
            Application.
          example: 615498b8efd963001c6c9d62
        userName:
          readOnly: true
          type: string
          description: >-
            The Name of the User who created the Note for the Onboarding
            Application.
          example: John Doe
        account:
          readOnly: true
          type: string
          description: >-
            The Organization identifier associated with the Onboarding
            Application used to create the Note.
          example: 6151ffdbefd963001c6c9d2d
        note:
          type: string
          description: The content of the Note posted.
          example: >-
            Some more documents are needed to verify the account's eligibility.
            Jen Will contact the merchant to collect further details by 2nd Aug.
        onboarding:
          readOnly: true
          type: string
          description: The Onboarding Application identifier associated with this Note.
          example: 6154ce01387b94001cd87ada
        createdAt:
          readOnly: true
          type: string
          description: The date and time when the Note was created.
          format: date-time
          example: '2021-10-01T22:05:18.262Z'
        updatedAt:
          readOnly: true
          type: string
          description: The date and time when the Note was last updated.
          format: date-time
          example: '2021-10-01T22:05:18.262Z'
        __v:
          readOnly: true
          type: integer
          description: >-
            The version number of the Note. Everytime the Document Request is
            updated the version number will be incremented.
          example: '0'
        onboardingIsDeleted:
          writeOnly: true
          type: boolean
          description: >-
            Set to `true` if you're creating a Note for an already deleted
            Onboarding Application.
          default: false
          example: false
    OnboardingRetryRuleRequest:
      type: object
      properties:
        ruleName:
          type: string
      required:
        - ruleName
    ParentIdRequest:
      type: object
      properties:
        parentAccount:
          type: string
          description: Unique identifier of the parent organization for the created PayFac
          example: 57f424bb7e534ff71f6e5626
    PayFacRequest:
      type: object
      properties:
        name:
          type: string
          example: PayFac name
        features:
          type: array
          items:
            type: string
        cascadingFeatures:
          type: array
          items:
            type: string
      required:
        - name
    PayFacResponse:
      type: object
      x-examples:
        example-1:
          id: 6231202727f437989a0ee551
          type: account
          parentAccountId: 57f424bb7e534ff71f6e5626
          name: EXACT PAYMENTS TEST SB Payments 1
          dbaName: EXACT PAYMENTS TEST SB Payments 1
          isLiveCapable: false
          isDisabled: false
          features: []
          cascadingFeatures: []
          createdAt: '2022-03-15T23:24:23.933Z'
          updatedAt: '2022-03-15T23:24:23.933Z'
          phone: '8654037300'
          email: contact@company.com
          onlinePresence: https://company.com
          address:
            city: Knoxville
            country: USA
            line1: 1 BUSINESS ST
            postalCode: '37920'
            state: TN
      properties:
        id:
          type: string
        type:
          type: string
        parentAccountId:
          type: string
        name:
          type: string
        dbaName:
          type: string
        isLiveCapable:
          type: boolean
        isDisabled:
          type: boolean
        features:
          type: array
          items:
            type: string
        cascadingFeatures:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        phone:
          type: string
        email:
          type: string
        onlinePresence:
          type: string
        address:
          $ref: '#/components/schemas/MerchantAddress'
    TokenResponse:
      type: object
      properties:
        approved:
          type: boolean
        sentToBank:
          type: boolean
          description: >-
            Whether or not the payment details were submitted to the bank for
            authorization.
        bankResponse:
          type: object
          description: Details of the response from the bank.
          properties:
            code:
              type: string
              example: '100'
            message:
              type: string
              example: Approved
        exactResponse:
          type: object
          description: >-
            Details of why the payment details were not submitted to the bank.
            Will not be present if payment details were sent to the bank.
          properties:
            code:
              type: string
              example: '26'
            message:
              type: string
              example: Invalid Card Number
        tokenDetails:
          $ref: '#/components/schemas/TokenDetails'
    TokenDetails:
      type: object
      properties:
        token:
          type: string
          description: The token value
        tokenType:
          type: string
          enum:
            - exactpay
            - processor
        cardBrand:
          type: string
          description: The brand of the tokenized credit card, lowercase.
        cardholder:
          type: string
        last4:
          type: string
          description: The last 4 digits of the card which was tokenized.
        expiryMonth:
          type: string
          pattern: /^\d{2}$/
        expiryYear:
          type: string
          pattern: /^\d{4}$/
        cvdCheck:
          type: object
          properties:
            code:
              type: string
              minLength: 1
              maxLength: 1
              description: The response code from any check on the CVD code.
            description:
              type: string
              description: a description of the check which was done.
    BadRequestInvalidWorkflowError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the provided Workflow rule list is valid or not.
          example: false
        errors:
          type: array
          description: List of errors that the the provided Workflow rule list contains.
          items:
            type: object
            properties:
              code:
                type: string
                description: >-
                  Validation error code. This is used to indicate the possible
                  error presented by a specific rule.
                enum:
                  - infinite-loop
                  - non-existing-rule-on-transition
                  - entry-rule-does-not-exist
                  - unused-rules
                example: infinite-loop
              rule:
                type: string
                description: It indicates the name of the rule that contains the error.
                example: Medium Risk Rule - Trulioo KYC
          example:
            - code: infinite-loop
              rule: Medium Risk Rule - Trulioo KYC
    ZodError:
      type: object
      description: Each issue documents a problem that occurred during validation.
      properties:
        code:
          type: string
          description: >-
            Validation error code. The retrieved value will drive which extra
            fields will be shown.
          enum:
            - invalid_type
            - unrecognized_keys
            - invalid_union
            - invalid_enum_value
            - invalid_date
            - invalid_string
            - invalid_literal
            - too_small
            - too_big
            - custom
          example: invalid_type
        path:
          type: array
          description: Field location in the request body.
          items:
            type: string
            description: Field level path.
          example:
            - email
        message:
          type: string
          description: Message explaining the validation error.
          example: Required
        expected:
          type: string
          description: >-
            Expected field type. It is only retrieved when `code =
            invalid_type`.
          enum:
            - string
            - number
            - object
            - array
            - boolean
            - 'null'
            - undefined
            - nan
            - integer
            - float
            - date
            - bigint
            - map
            - set
          example: string
        received:
          type: string
          description: >-
            Field type received. It is only retrieved when `code =
            invalid_type`.
          enum:
            - string
            - number
            - object
            - array
            - boolean
            - 'null'
            - undefined
            - nan
            - integer
            - float
            - date
            - bigint
            - map
            - set
          example: string
        keys:
          type: array
          description: >-
            The list of unsupported fields. It is only retrieved when `code =
            unrecognized_keys`.
          items:
            type: string
            description: Unsupported field received.
          example:
            - additionalField
        unionErrors:
          type: array
          description: >-
            A field supporting more than one possible value type or string value
            will retrieve this array property of objects with the same shape as
            this definition. It is only retrieved when `code = invalid_union`.
          items:
            type: object
          example:
            - issues:
                - code: invalid_literal
                  expected: string
                  path:
                    - field
                  message: Message
              name: ZodError
        options:
          type: array
          description: >-
            The set of acceptable string values for this field. It is only
            retrieved when `code = invalid_enum_value.
          items:
            type: string
            description: Possible string value that is supported by the endpoint.
          example:
            - value
            - option
        validation:
          type: string
          description: >-
            String-specific format validator failed. It is only retrieved when
            `code = invalid_string`.
          enum:
            - url
            - email
            - uuid
          example: url
        type:
          type: string
          description: >-
            The type of the data failing validation. It is only retrieved when
            `code = too_small` or `code = too_big`.
          enum:
            - string
            - number
            - array
            - set
            - date
          example: string
        minimum:
          type: number
          description: >-
            The expected minimum length/value. It is only retrieved when `code =
            too_small`.
          example: 1
        maximum:
          type: number
          description: >-
            The expected maximum length/value. It is only retrieved when `code =
            too_big`.
          example: 100
        inclusive:
          type: boolean
          description: >-
            Whether the minimum or maximum is included in the range of
            acceptable values. It is only retrieved when `code = too_small` or
            `code = too_big`.
          example: true
    contextErrorResponseUploadDocument:
      type: object
      description: >-
        This error object will be returned only when the Organization doesn't
        exist scenario.
      properties:
        type:
          type: string
          description: Error code.
          example: not-found
        message:
          type: string
          description: Error Message.
          example: Account Not Found
    contextErrorResponseSystemError:
      type: object
      description: >-
        This error object will be returned only in some situations when an
        Internal Server Error is returned.
      properties:
        type:
          type: string
          description: Error code.
          example: system-error
        message:
          type: string
          description: Error Message.
          example: Cast Error
    contextErrorResponseCreateOnboarding:
      type: object
      description: >-
        This error object will be returned only when the invalid IP address is
        sent.
      properties:
        type:
          type: string
          description: Error code.
          example: invalid-format
        message:
          type: string
          description: Error Message.
          example: Invalid IP format
    BadRequestX2ErrorV4.1.0:
      type: object
      properties:
        type:
          type: string
          description: Error code that occurs during the request.
          example: validationError
        message:
          type: string
          description: Message explaining the error.
          example: Client request body failed validation.
        pathIssues:
          type: object
          description: >-
            The Field that wraps a list of errors. Each field or the nested
            field in the request is the field path where an error exists.
          properties:
            fieldPath:
              type: array
              description: >-
                It is a dynamic field representing the path where error exists.
                The value is an array of issues; each object is a problem that
                occurred during validation. The object name `fieldPath` is
                replaced by the actual field name with its path in the request
                object.
              items:
                type: object
                properties:
                  type:
                    type: string
                    description: Validation error code.
                    enum:
                      - custom
                      - invalidDate
                      - invalidEnumValue
                      - invalidLiteral
                      - invalidString
                      - invalidType
                      - tooBig
                      - tooSmall
                      - unrecognizedKeys
                    example: invalidType
                  message:
                    type: string
                    description: Message explaining the validation error.
                    example: Required
                  variant:
                    type: object
                    description: >-
                      Specific extra information that is reported about the
                      error. This field will not yield any value for now and
                      mostly an empty object.
                    example: {}
              example:
                - type: tooSmall
                  message: String must contain at least 3 character(s)
                  variant: {}
          example:
            merchant.name:
              - type: invalidType
                message: Required
                variant: {}
            merchant.mcc:
              - type: custom
                message: Invalid mcc value
                variant: {}
            merchant.principal.0.address.line1:
              - type: invalidString
                message: Invalid
                variant: {}
            merchant.principal.2.firstName:
              - type: tooSmall
                message: String must contain at least 1 character(s)
                variant: {}
              - type: invalidString
                message: Invalid
                variant: {}
    BadRequestMinifiedZodError:
      type: array
      description: List of documented issues that occurred during validation.
      items:
        $ref: '#/components/schemas/ZodError'
    BadRequestZodError:
      type: object
      properties:
        issues:
          $ref: '#/components/schemas/BadRequestMinifiedZodError'
        name:
          type: string
          description: >-
            The error type. It has a fixed value of `ZodError` for `400 Bad
            Request`.
          default: ZodError
    BadRequest:
      type: string
      example: Bad Request
    BadRequestUploadDocument:
      type: string
      description: When multiple Documents are sent.
      example: Bad Request
    BadRequestUpdateDocumentType:
      type: string
      description: When Document `type` is not sent.
      example: Bad Request
    Unauthorized:
      type: string
      example: Unauthorized
    Forbidden:
      type: string
      example: Forbidden
    NotFound:
      type: string
      example: Not Found
    PayloadTooLarge:
      type: string
      example: Payload Too Large
    UnsupportedMediaType:
      type: string
      example: Unsupported Media Type
    Locked:
      type: string
      example: Locked
    PreconditionRequired:
      type: string
      example: Precondition Required
    InternalServerError:
      type: string
      example: Internal Server Error
    ServiceUnavailable:
      type: string
      example: Service Unavailable
    RequestFailure:
      type: object
      properties:
        messages:
          type: array
          items:
            type: string
    ReportExpiresAt:
      type: string
      description: When the report will be unavailable.
      format: date-time
      example: '2030-01-01T00:00:00.000Z'
    ReportParameters:
      type: object
      required:
        - start
      description: Basic filters to apply when the report is being generated.
      properties:
        start:
          type: string
          description: Starting timestamp of data to be included in the Report.
          example: '2021-01-01T00:00:00.000Z'
        end:
          type: string
          description: >-
            Ending timestamp of data to be included in the Report (inclusive
            until Report request).
          example: '2021-12-31T23:59:59.999Z'
        user:
          type: string
          description: Who requested the Report.
          example: 61a78fe82c3156b0945ef135
        accounts:
          type: array
          items:
            type: string
          description: PayFac to be included in the report.
          example:
            - 61a7907e2c3156b0945ef136
            - 61a7907e2c3156b0945ef137
    ReportQueryRequest:
      type: object
      required:
        - parameters
        - expiresAt
      properties:
        parameters:
          $ref: '#/components/schemas/ReportParameters'
        expiresAt:
          $ref: '#/components/schemas/ReportExpiresAt'
    ReportQueryResponse:
      type: object
      properties:
        id:
          type: string
        domain:
          type: string
        organization:
          type: string
        parameters:
          type: object
          properties:
            start:
              type: string
            end:
              type: string
            user:
              type: string
            accounts:
              type: array
              items:
                type: string
        expiresAt:
          type: string
        name:
          type: string
        status:
          type: string
        runAt:
          type: string
        failedAttempts:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string
    ReportDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/AccountReportDetails'
        - $ref: '#/components/schemas/TransactionsReportDetails'
        - $ref: '#/components/schemas/ChargebackReportDetails'
        - $ref: '#/components/schemas/SettlementReportDetails'
        - $ref: '#/components/schemas/FundingReportDetails'
    AccountReportDetails:
      title: AccountReportDetailsSchema
      type: object
      properties:
        clientIp:
          type: string
        organization:
          type: string
        status:
          type: string
        statusChangeReason:
          type: string
        kycResults:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              status:
                type: string
              performedAt:
                type: string
              _id:
                type: string
              originalResponse:
                type: string
        merchant:
          type: object
          properties:
            principal:
              type: array
              items:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  title:
                    type: string
                  telephone:
                    type: string
                  email:
                    type: string
                  dateOfBirth:
                    type: string
                  currentOwnershipYears:
                    type: number
                  currentOwnershipMonths:
                    type: number
                  driversLicense:
                    type: string
                  driversLicenseState:
                    type: string
                  ssn:
                    type: string
                  percentOfOwnership:
                    type: number
                  address:
                    type: object
                    properties:
                      line1:
                        type: string
                      line2:
                        type: string
                      city:
                        type: string
                      postalCode:
                        type: string
                      country:
                        type: string
                      countrySubdivision:
                        type: string
                  _id:
                    type: string
            name:
              type: string
            businessRegistrationNumber:
              type: string
            dbaName:
              type: string
            establishedDate:
              type: string
            numberOfEmployees:
              type: number
            telephone:
              type: string
            email:
              type: string
            onlinePresence:
              type: string
            facebook:
              type: string
            twitter:
              type: string
            linkedIn:
              type: string
            entityType:
              type: string
            anticipatedTransAmounts:
              type: object
              properties:
                averageTicketSize:
                  type: number
                maxTicketSize:
                  type: number
                anticipatedMonthlyVolume:
                  type: number
            mcc:
              type: string
            address:
              type: object
              properties:
                line1:
                  type: string
                line2:
                  type: string
                city:
                  type: string
                postalCode:
                  type: string
                country:
                  type: string
                countrySubdivision:
                  type: string
            businessProfile:
              type: object
              properties:
                servicesDescription:
                  type: string
                currentlyAcceptingPayments:
                  type: boolean
                currentProcessor:
                  type: string
                currentGateway:
                  type: string
                acceptanceMethods:
                  type: object
                  properties:
                    moto:
                      type: number
                    internet:
                      type: number
                    swipe:
                      type: number
                    keyed:
                      type: number
                    _id:
                      type: string
                recurringServices:
                  type: boolean
                recurringServicesDescription:
                  type: string
                refundPolicyDescription:
                  type: string
                paymentTime:
                  type: string
                deliveryTimeframe:
                  type: string
            bankingDetails:
              type: object
              properties:
                bankName:
                  type: string
                routingNumber:
                  type: string
                bankNumber:
                  type: string
                plaidAccessToken:
                  type: string
        createdAt:
          type: string
    TransactionsReportDetails:
      title: TransactionsReportDetailsSchema
      type: object
      properties:
        account:
          type: string
        approved:
          type: boolean
        captured:
          type: boolean
        captureDetails:
          type: object
          properties:
            list:
              type: array
              items:
                type: string
            remaining:
              type: number
        refunded:
          type: boolean
        refundDetails:
          type: object
          properties:
            list:
              type: array
              items:
                type: string
            remaining:
              type: number
        voided:
          type: boolean
        voidDetails:
          type: object
          properties:
            list:
              type: array
              items:
                type: string
            remaining:
              type: number
        settled:
          type: boolean
        settledAt:
          type: string
        paymentId:
          type: string
        authorization:
          type: string
        amount:
          type: number
        feeAmount:
          type: number
        currencyCode:
          type: string
        sentToBank:
          type: boolean
        paymentMethodDetails:
          type: object
          properties:
            cardBrand:
              type: string
            cardholder:
              type: string
            last4:
              type: string
            expiryMonth:
              type: string
            expiryYear:
              type: string
            cvdCheck:
              type: object
              properties:
                code:
                  type: string
                description:
                  type: string
            avsCheck:
              type: object
              properties:
                code:
                  type: string
                description:
                  type: string
        bankResponse:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
        exactResponse:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
        terminal:
          type: object
          properties:
            gatewayId:
              type: string
        ecommerceFlag:
          type: string
        createdAt:
          type: string
        type:
          type: string
    ChargebackReportDetails:
      title: ChargebackReportDetailsSchema
      type: object
      properties:
        organization:
          type: string
        paymentReference:
          type: string
        paymentDate:
          type: string
        accountNumber:
          type: string
        routingNumber:
          type: string
        fundAmt:
          type: string
        batchReference:
          type: string
        batchType:
          type: string
        customerBatchReference:
          type: string
        customerName:
          type: string
        merchantNumber:
          type: string
        externalMid:
          type: string
        storeNumber:
          type: string
        chain:
          type: string
        batchAmt:
          type: number
        amount:
          type: number
        surchgAmount:
          type: number
        convnceAmt:
          type: number
        cardType:
          type: string
        chargeType:
          type: string
        chargeTypeDescription:
          type: string
        cardPlan:
          type: string
        cardNo:
          type: string
        chkNum:
          type: string
        transactionDate:
          type: string
        settlementDate:
          type: string
        authorizationCode:
          type: string
        chargebackControlNo:
          type: string
        rocText:
          type: string
        trnAci:
          type: string
        cardSchemeRef:
          type: string
        trnRefNum:
          type: string
        settlementMethod:
          type: string
        currencyCode:
          type: string
        cbAcqRefId:
          type: string
        chgbkRsnCode:
          type: string
        chgbkRsnDesc:
          type: string
        merRef:
          type: string
        purchId:
          type: string
        custCod:
          type: string
        trnArn:
          type: string
        termId:
          type: string
        entNum:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    SettlementReportDetails:
      title: SettlementReportDetailsSchema
      type: object
      properties:
        account:
          type: string
        approved:
          type: boolean
        captured:
          type: boolean
        captureDetails:
          type: object
          properties:
            list:
              type: array
              items:
                type: string
            remaining:
              type: number
        refunded:
          type: boolean
        refundDetails:
          type: object
          properties:
            list:
              type: array
              items:
                type: string
            remaining:
              type: number
        voided:
          type: boolean
        voidDetails:
          type: object
          properties:
            list:
              type: array
              items:
                type: string
            remaining:
              type: number
        settled:
          type: boolean
        settledAt:
          type: string
        paymentId:
          type: string
        authorization:
          type: string
        amount:
          type: number
        feeAmount:
          type: number
        currencyCode:
          type: string
        sentToBank:
          type: boolean
        bankResponse:
          type: object
          description: BankResponse
          properties:
            code:
              type: string
            message:
              type: string
        exactResponse:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
        terminal:
          type: object
          properties:
            gatewayId:
              type: string
        paymentMethodDetails:
          type: object
          properties:
            cardholder:
              type: string
            last4:
              type: string
            expiryMonth:
              type: string
            expiryYear:
              type: string
            cardBrand:
              type: string
            description:
              type: string
            cvdCheck:
              type: object
              properties:
                code:
                  type: string
                description:
                  type: string
            avsCheck:
              type: object
              properties:
                code:
                  type: string
                description:
                  type: string
        eCommerceFlag:
          type: string
        createdAt:
          type: string
        type:
          type: string
        reference:
          type: object
          properties:
            customerRef:
              type: string
            referenceNo:
              type: string
        surchargeAmount:
          type: number
    FundingReportDetails:
      title: FundingReportDetailsSchema
      type: object
      properties:
        account:
          type: string
        channel:
          type: string
        massPayment:
          type: string
        amount:
          type: object
          properties:
            value:
              type: number
            currency:
              type: string
        source:
          type: string
        destination:
          type: string
        status:
          type: string
    RoleResponse:
      type: object
      properties:
        id:
          type: string
          example: 61eb502860ff1ad726a78b2d
        accountId:
          type: string
          description: Unique identifier of the current PayFac
          example: 61eb5028a41a93e84ff3685a
        name:
          type: string
          example: Data Analyst
        description:
          type: string
          description: Describes the purpose of what this role was created for.
          example: >-
            Users with the role Data Analyst are granted enough access to to
            system information required to review and analyze account behavior
            on the system.
        permissions:
          type: array
          description: >-
            Is the list of available permissions for the current role, each
            permission represents specific actions within the system.
          items:
            type: string
            example:
              - reports.create
              - reports.read
              - reports.update
              - reports.delete
        inheritedPermissions:
          type: array
          description: >-
            Is the list of permissions inherited from other PayFac which is a
            parent.
          items:
            type: string
          example:
            - 61eb5028a41a93e84ff3685b
            - 61eb5028a41a93e84ff3685c
        parentRoleIds:
          type: array
          description: >-
            Represents the role id in the parent organization from which the
            permissions will be inherited.
          items:
            type: string
          example:
            - 61eb5028a41a93e84ff3685d
            - 61eb5028a41a93e84ff3685e
        ancestorRoleIds:
          type: array
          description: >-
            Represents the role id in the an upper organization in the hierarchy
            (not the parent) from which the permissions will be inherited.
          items:
            type: string
          example:
            - 61eb5028a41a93e84ff3685f
            - 61eb5028a41a93e84ff36850
        grantableRoleIds:
          type: array
          description: >-
            Represents the role id of the roles that can be granted for the new
            users.
          items:
            type: string
          example:
            - 61eb5028a41a93e84ff36851
            - 61eb5028a41a93e84ff36852
        createdAt:
          type: string
          description: Date when the Role was created.
          format: date-time
          example: '2022-01-21T15:05:18.262Z'
        updatedAt:
          type: string
          description: Date when the Role was updated.
          format: date-time
          example: '2022-01-21T15:05:18.262Z'
    UnderwritingWorkflowRequestCreateWorkflow:
      type: object
      required:
        - name
        - entryRule
        - rules
      properties:
        name:
          type: string
          description: The name of the Workflow.
          example: Main Workflow
        entryRule:
          type: string
          description: >-
            The name of the entry rule in the ruleset of this Underwriting
            Workflow to start evaluating the Onboarding Application.
          example: Know Your Customer Check
        rules:
          $ref: '#/components/schemas/UnderwritingRule'
        metadata:
          type: object
          description: >-
            Extra information related to a Workflow. It is usually used for
            display purposes on the web application and not applicable to API
            users. This data can be used to construct the visual view of the
            workflow using [React Flow](https://reactflow.dev/) component
            library.
          example: {}
      example:
        name: Main Workflow
        entryRule: Know Your Customer Check
        rules:
          - name: Know Your Customer Check
            type: Trulioo KYC
            options: {}
            onPass: KYB Check
            onFail: reject
          - name: KYB Check
            type: Trulioo KYB
            options: {}
            onPass: OFAC Check
            onFail: reject
          - name: OFAC Check
            type: OFAC
            options:
              min: 70
              max: 80
            onPass: Master Card Match
            onFail: reject
          - name: Master Card Match
            type: Mastercard Match
            options:
              merchant:
                Name:
                  - M02
                  - M01
                  - M00
                DoingBusinessAsName:
                  - M01
            onPass: Custom Check
            onFail: review
          - name: Custom Check
            type: Business Information
            options:
              - field: merchant.address.city
                operator: contains
                value1: Antartica
                value2: ''
              - field: merchant.anticipatedTransAmounts.maxTicketSize
                operator: gt
                value1: 500
                value2: 0
            onPass: accept
            onFail: review
        metadata: {}
    UnderwritingWorkflowRequestUpdateWorkflow:
      type: object
      properties:
        name:
          type: string
          description: The name of the Workflow.
          example: Main Workflow
        entryRule:
          type: string
          description: >-
            The name of the entry rule in the ruleset of this Underwriting
            Workflow to start evaluating the Onboarding Application.
          example: Know Your Customer Check
        rules:
          $ref: '#/components/schemas/UnderwritingRule'
        metadata:
          type: object
          description: >-
            Extra information related to a Workflow. It is usually used for
            display purposes on the web application and not applicable to API
            users. This data can be used to construct the visual view of the
            workflow using [React Flow](https://reactflow.dev/) component
            library.
          example: {}
      example:
        name: Main Workflow
        entryRule: Know Your Customer Check
        rules:
          - name: Know Your Customer Check
            type: Trulioo KYC
            options: {}
            onPass: KYB Check
            onFail: reject
          - name: KYB Check
            type: Trulioo KYB
            options: {}
            onPass: OFAC Check
            onFail: reject
          - name: OFAC Check
            type: OFAC
            options:
              min: 70
              max: 80
            onPass: Master Card Match
            onFail: reject
          - name: Master Card Match
            type: Mastercard Match
            options:
              merchant:
                Name:
                  - M02
                  - M01
                  - M00
                DoingBusinessAsName:
                  - M01
            onPass: Custom Check
            onFail: review
          - name: Custom Check
            type: Business Information
            options:
              - field: merchant.address.city
                operator: contains
                value1: Antartica
                value2: ''
              - field: merchant.anticipatedTransAmounts.maxTicketSize
                operator: gt
                value1: 500
                value2: 0
            onPass: accept
            onFail: review
        metadata: {}
    UnderwritingWorkflowResponse:
      type: object
      properties:
        id:
          type: string
          description: The automatically generated ID for the underwriting workflow
          example: 61523709444c51fa997257fe
        organization:
          type: string
          description: The ID of the PayFac that this underwriting workflows belongs to.
          example: 57f424bb7e534ff71f6e5626
        name:
          type: string
          description: The name of the underwriting workflow
          example: High Risk Merchants
        entryRule:
          type: string
          description: >-
            Is the first rule of the underwriting process that will be used to
            evaluate the onboarding request.
          example: High Risk MCC
        rules:
          $ref: '#/components/schemas/UnderwritingRule'
        enabled:
          type: boolean
          description: Is the underwriting workflow enabled
          example: true
        default:
          type: boolean
          description: Is the underwriting workflow the default workflow
          example: true
        createdAt:
          type: string
          description: Date when the onboarding application was created
          format: date-time
          example: '2021-10-01T22:05:18.262Z'
        updatedAt:
          type: string
          description: Date when the onboarding application was updated
          format: date-time
          example: '2021-10-01T22:05:18.262Z'
    UnderwritingRule:
      type: array
      description: >-
        The list of rules available for the Underwriting Workflow process that
        can be used to evaluate the Onboarding Application.
      minItems: 1
      items:
        anyOf:
          - $ref: '#/components/schemas/TruliooKYBRule'
          - $ref: '#/components/schemas/TruliooInternationalWatchlistRule'
          - $ref: '#/components/schemas/OFACRule'
          - $ref: '#/components/schemas/MastercardRule'
          - $ref: '#/components/schemas/BusinessRule'
          - $ref: '#/components/schemas/PlaidAuthRule'
          - $ref: '#/components/schemas/PlaidBalanceRule'
          - $ref: '#/components/schemas/PlaidIdentityRule'
      example:
        - name: Know Your Customer Check
          type: Trulioo KYC
          options: {}
          onPass: KYB Check
          onFail: reject
        - name: KYB Check
          type: Trulioo KYB
          options: {}
          onPass: OFAC Check
          onFail: reject
        - name: OFAC Check
          type: OFAC
          options:
            min: 70
            max: 80
          onPass: Master Card Match
          onFail: reject
        - name: Master Card Match
          type: Mastercard Match
          options:
            merchant:
              Name:
                - M02
                - M01
                - M00
              DoingBusinessAsName:
                - M01
          onPass: Custom Check
          onFail: review
        - name: Custom Check
          type: Business Information
          options:
            - field: merchant.address.city
              operator: contains
              value1: Antartica
              value2: ''
            - field: merchant.anticipatedTransAmounts.maxTicketSize
              operator: gt
              value1: 500
              value2: 0
          onPass: accept
          onFail: review
    BusinessRule:
      title: Business Rule
      type: object
      description: >-
        This verification service allows an underwriter to set custom decision
        rules based on individual Onboarding Application fields collected
        throughout the Onboarding process.
      required:
        - name
        - type
        - options
        - onPass
        - onFail
      properties:
        name:
          $ref: '#/components/schemas/RuleNameField'
        type:
          type: string
          description: Type of rule that will be evaluated by the decision engine
          enum:
            - Business Information
          default: Business Information
          example: Business Information
        options:
          type: array
          description: >
            Criteria options that will be evaluated in the rule, the evaluation
            of these options will be against the body of the merchant.\

            Should contain at least one of the properties.
          minLength: 1
          items:
            type: object
            description: The options that will be used to evaluate the rule.
            properties:
              field:
                type: string
                description: The field that will be used to evaluate the rule
                enum:
                  - merchant.address.country
                  - merchant.address.countrySubdivision
                  - merchant.establishedDate
                  - merchant.name
                  - merchant.dbaName
                  - merchant.telephone
                  - merchant.email
                  - merchant.onlinePresence
                  - merchant.address.line1
                  - merchant.address.city
                  - merchant.address.postalCode
                  - merchant.facebook
                  - merchant.businessRegistrationNumber
                  - merchant.twitter
                  - merchant.linkedin
                  - merchant.bankingDetails.bankName
                  - merchant.bankingDetails.routingNumber
                  - merchant.entityType
                  - merchant.principal.address.country
                  - merchant.principal.address.countrySubdivision
                  - merchant.principal.firstName
                  - merchant.principal.lastName
                  - merchant.principal.telephone
                  - merchant.principal.email
                  - merchant.principal.address.line1
                  - merchant.principal.address.city
                  - merchant.principal.address.postalCode
                  - merchant.principal.percentOfOwnership
                  - merchant.mcc
                  - merchant.businessProfile.deliveryTimeframe
                  - merchant.anticipatedTransAmounts.averageTicketSize
                  - merchant.anticipatedTransAmounts.anticipatedMonthlyVolume
                  - merchant.anticipatedTransAmounts.maxTicketSize
                  - merchant.businessProfile.servicesDescription
                  - merchant.businessProfile.acceptanceMethods.moto
                  - merchant.businessProfile.acceptanceMethods.internet
                  - merchant.businessProfile.acceptanceMethods.swipe
                  - merchant.businessProfile.acceptanceMethods.keyed
                example: merchant.name
              operator:
                description: >
                  The operator that will be used to evaluate the rule\

                  startsWith - The field value must start with the value1\

                  endsWith - The field value must end with the value1\

                  eq - The field value must be equal to the value1\

                  contains - The field value must contain the value1\

                  exclude - The field value must not contain the value1\

                  gt - The field value must be greater than the value1\

                  gte - The field value must be greater than or equal to the
                  value1\

                  lt - The field value must be less than the value1\

                  lte - The field value must be less than or equal to the
                  value1\

                  between - The field value must be between the value1 and
                  value2\

                  in - The field value must be in the list of values1\

                  intersection - The field value must be in the intersection of
                  the list of values1
                type: string
                enum:
                  - startsWith
                  - endsWith
                  - eq
                  - contains
                  - exclude
                  - gt
                  - gte
                  - lt
                  - lte
                  - between
                  - in
                  - intersection
                example: startsWith
              value1:
                description: The first value that will be used to evaluate the rule
                oneOf:
                  - type: string
                  - type: number
                  - type: array
                    items:
                      type: string
                example: Value
              value2:
                description: The second value that will be used to evaluate the rule
                oneOf:
                  - type: string
                  - type: number
                  - type: array
                    items:
                      type: string
                example: Value
            required:
              - field
              - operator
              - value1
        onPass:
          $ref: '#/components/schemas/onPassRule'
        onFail:
          $ref: '#/components/schemas/onFailRule'
    MastercardRule:
      title: Mastercard Rule
      type: object
      description: >-
        Mastercard Alert To Control High-risk Merchants (MATCH) allows you look
        up whether another acquiring partner has terminated a merchant in the
        past and the reason for the termination. Use this rule to identify
        potentially high risk merchants before entering into an agreement.
      required:
        - name
        - type
        - options
        - onPass
        - onFail
      properties:
        name:
          $ref: '#/components/schemas/RuleNameField'
        type:
          type: string
          description: Type of rule that will be evaluated by the decision engine
          enum:
            - Mastercard Match
          default: Mastercard Match
          example: Mastercard Match
        options:
          type: object
          description: >
            Criteria options that will be evaluated in the rule, the evaluation
            of these options will be against the response of the Mastercard
            Match API. This Object Should contain at least one of the below
            properties.
          required:
            - merchant
            - principal
          properties:
            merchant:
              $ref: '#/components/schemas/MastercardRuleMerchantOptions'
            principal:
              $ref: '#/components/schemas/MastercardRulePrincipalOptions'
        onPass:
          $ref: '#/components/schemas/onPassRule'
        onFail:
          $ref: '#/components/schemas/onFailRule'
    MastercardRuleMerchantOptions:
      type: object
      description: >
        Contains the fields in the merchant match portion of the [Master Card
        Match
        API](https://developer.mastercard.com/match/documentation/api-reference)
        Response that will be evaluated as part of the criteria.
      properties:
        Name:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
        DoingBusinessAsName:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
        NationalTaxId:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
        ServiceProvLegal:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
        ServiceProvDBA:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
      example:
        Name:
          - M02
        DoingBusinessAsName:
          - M01
        NationalTaxId:
          - M00
        ServiceProvLegal:
          - M02
          - M01
        ServiceProvDBA:
          - M02
          - M01
          - M00
    MastercardRulePrincipalOptions:
      type: object
      description: >
        Contains the fields in the merchants principal match portion of the
        [Master Card Match
        API](https://developer.mastercard.com/match/documentation/api-reference)
        Response that will be evaluated as part of the criteria.
      properties:
        Name:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
        Address:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
        PhoneNumber:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
        NationalId:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
        DriversLicense:
          $ref: '#/components/schemas/MastercardRuleValueOptions'
      example:
        Name:
          - M02
          - M01
          - M00
        Address:
          - M02
          - M01
          - M00
    MastercardRuleValueOptions:
      type: array
      description: >+
        The list of values to match for this specific field in the response from
        Master Card Match API.


        *M00* represents No Match, *M01* represents a Partial Match and *M02*
        represents an Exact Match.

      minItems: 1
      maxItems: 3
      items:
        type: string
        enum:
          - M00
          - M01
          - M02
        example: M00
      example:
        - M00
        - M01
        - M02
    RuleNameField:
      type: string
      description: The name assigned to the rule check.
      example: Medium Risk Rule
    emptyRuleOptionsField:
      type: object
      description: This rule has no options so it can be defined as an empty object.
      properties: {}
      default: {}
      example: {}
    onPassRule:
      type: string
      description: >-
        Indicates the decision engine's action if the rule matches its
        criteria.\

        The possible values are *accept*, *reject*, *review*, or the name of
        another rule which should be executed for further evaluation in this
        ruleset.
      example: accept
    onFailRule:
      type: string
      description: >-
        Indicates what action the decision engine will take if the rule does not
        match its criteria.\

        The possible values are *accept*, *reject*, *review*, or the name of
        another rule which should be executed for further evaluation in this
        ruleset.
      example: reject
    OFACRule:
      title: OFAC Rule
      type: object
      description: >-
        This verification is an individual and entity screening service designed
        in coordination with the U.S. Department of Treasury. The search returns
        exact matches, as well as partial matches which meet a minimum threshold
        as defined by the user. The higher the threshold, the fewer results will
        be returned and the higher the likelihood of a match. For Example, if
        the minScore is set to a threshold of 50, it is likely to return more
        results than one could reasonably analyze.
      properties:
        name:
          $ref: '#/components/schemas/RuleNameField'
        type:
          type: string
          description: Type of rule that will be evaluated by the decision engine.
          enum:
            - OFAC
          default: OFAC
          example: OFAC
        options:
          type: object
          description: Values must be between 0 and 100. Min < Max.
          properties:
            min:
              type: number
              description: >-
                Minimum threshold that will be used as criteria in the
                condition; this value is inclusive. Minimum value (min) must be
                less than Maximum value (max).
              minimum: 0
              maximum: 100
              example: 50
            max:
              type: number
              description: >-
                Maximum threshold that will be used as criteria in the
                condition; this value is inclusive. Maximum value (max) must be
                greater than Minimum value (min).
              minimum: 0
              maximum: 100
              example: 50
          required:
            - min
            - max
          example:
            min: 50
            max: 50
        onPass:
          $ref: '#/components/schemas/onPassRule'
        onFail:
          $ref: '#/components/schemas/onFailRule'
      required:
        - name
        - type
        - options
        - onPass
        - onFail
      example:
        name: OFAC Rule
        type: OFAC
        options:
          min: 80
          max: 100
        onPass: accept
        onFail: reject
    PlaidAuthRule:
      title: Plaid Auth Rule
      type: object
      description: >-
        This authentication verification allows Exat Payments to authenticate a
        user's depository account information through the Plaid OAuth
        authorization service, making it easy to initiate credits or debits to
        the correct business account.
      required:
        - name
        - type
        - onPass
        - onFail
      properties:
        name:
          $ref: '#/components/schemas/RuleNameField'
        type:
          type: string
          description: Type of rule that will be evaluated by the decision engine
          enum:
            - Plaid Auth
          default: Plaid Auth
          example: Plaid Auth
        options:
          $ref: '#/components/schemas/emptyRuleOptionsField'
        onPass:
          $ref: '#/components/schemas/onPassRule'
        onFail:
          $ref: '#/components/schemas/onFailRule'
      example:
        $ref: '#/components/examples/UnderwritingWorkflowRequestPlaidAuthExample'
    PlaidBalanceRule:
      title: Plaid Balance Rule
      type: object
      description: >-
        This verification rule allows Exact Payments to retrieve real-time
        balance information from Plaid for any authorized accounts to evaluate
        financial stability.
      required:
        - name
        - type
        - options
        - onPass
        - onFail
      properties:
        name:
          $ref: '#/components/schemas/RuleNameField'
        type:
          type: string
          description: Type of rule that will be evaluated by the decision engine
          enum:
            - Plaid Balance
          default: Plaid Balance
          example: Plaid Balance
        options:
          type: object
          description: |
            Options that will be used to evaluate the Plaid Balance information.
          properties:
            minimumBalance:
              type: number
              description: >
                The minimum balance that the Account must have in order to pass
                the rule.

                If the Account has a balance that is less than the minimum
                balance, the rule will fail.
              example: 100
          required:
            - minimumBalance
        onPass:
          $ref: '#/components/schemas/onPassRule'
        onFail:
          $ref: '#/components/schemas/onFailRule'
      example:
        $ref: '#/components/examples/UnderwritingWorkflowRequestPlaidBalanceExample'
    PlaidIdentityRule:
      title: Plaid Identity Rule
      type: object
      description: >-
        This verification service allows Exact Payments to authenticate the
        account holder's identity of the associated depository or checking
        account through Plaid, thus reducing fraud and account errors.
      required:
        - name
        - type
        - options
        - onPass
        - onFail
      properties:
        name:
          $ref: '#/components/schemas/RuleNameField'
        type:
          type: string
          description: Type of rule that will be evaluated by the decision engine
          enum:
            - Plaid Identity
          default: Plaid Identity
          example: Plaid Identity
        options:
          $ref: '#/components/schemas/emptyRuleOptionsField'
        onPass:
          $ref: '#/components/schemas/onPassRule'
        onFail:
          $ref: '#/components/schemas/onFailRule'
    TruliooInternationalWatchlistRule:
      title: Trulioo International Watchlist Rule
      type: object
      description: >-
        Watchlist screening offers comprehensive coverage of Global Anti Money
        Laundering (AML) risk data sources including sanction lists, law
        enforcement lists and regulatory bodies.
      required:
        - name
        - type
        - options
        - onPass
        - onFail
      properties:
        name:
          $ref: '#/components/schemas/RuleNameField'
        type:
          type: string
          description: Type of rule that will be evaluated by the decision engine
          enum:
            - Trulioo International Watchlist
          default: Trulioo International Watchlist
          example: Trulioo International Watchlist
        options:
          $ref: '#/components/schemas/emptyRuleOptionsField'
        onPass:
          $ref: '#/components/schemas/onPassRule'
        onFail:
          $ref: '#/components/schemas/onFailRule'
      example:
        name: Trulioo International Watchlist Rule
        type: Trulioo International Watchlist
        options: {}
        onPass: accept
        onFail: reject
    TruliooKYBRule:
      title: Trulioo KYB Rule
      type: object
      description: >-
        It will evaluate whether the merchant information sent to Trulioo KYB
        API is a match or no-match. This verification verifies the legitimacy of
        business entities and their ownership structure to ensure compliance
        with global Anti Money Laundering (AML) regulations. The application
        data is combined into a field-by-field match and then the match results
        are compared against the provider's data sources. When a match is
        present, this field exists in the data source and matches the input
        value. If no match is present, this field exists in the data source but
        does not match the value input. A result of missing indicates either no
        data was sent in the request or no information about this field was
        validated by the data source.
      properties:
        name:
          $ref: '#/components/schemas/RuleNameField'
        type:
          type: string
          description: Type of rule that will be evaluated by the decision engine
          enum:
            - Trulioo KYB
          default: Trulioo KYB
          example: Trulioo KYB
        options:
          $ref: '#/components/schemas/emptyRuleOptionsField'
        onPass:
          $ref: '#/components/schemas/onPassRule'
        onFail:
          $ref: '#/components/schemas/onFailRule'
      required:
        - name
        - type
        - options
        - onPass
        - onFail
      example:
        name: Trulioo KYB Rule
        type: Trulioo KYB
        options: {}
        onPass: accept
        onFail: reject
    UpdatableOnboardingRequest:
      type: object
      properties:
        merchant:
          $ref: '#/components/schemas/Merchant'
    Merchant:
      type: object
      properties:
        principal:
          type: array
          description: The details for the Principal owner(s) of the Business.
          items:
            $ref: '#/components/schemas/UpdatablePrincipal'
        name:
          type: string
          description: The Name of the Business.
          example: Acme Corp
        businessRegistrationNumber:
          type: string
          description: Tax identifier of the Business.
          example: '888596928'
        dbaName:
          type: string
          description: Doing Business As Name.
          example: Acme Trading
        establishedDate:
          type: string
          description: Business Established Date.
          format: date-time
          example: '2021-07-21T16:24:22.678+00:00'
        numberOfEmployees:
          type: number
          description: Number of Employees of the Business.
          example: 100
        telephone:
          type: string
          description: Telephone Number of the Business.
          example: '2255441120'
        email:
          type: string
          description: Contact Email of the Business.
          example: business-contact@acmecorp.com
        onlinePresence:
          type: string
          description: Website URL of the Business.
          example: www.acmecorp.com
        facebook:
          type: string
          description: Facebook link of the Business.
          example: www.facebook.com/acmecorp
        twitter:
          type: string
          description: Twitter link of the Business.
          example: www.twitter.com/acmecorp
        linkedIn:
          type: string
          description: LinkedIn link of the Business.
          example: www.linkedin.com/in/acmecorp
        entityType:
          type: string
          description: Entity type of the Business.
          enum:
            - LLC
            - Corp
            - Sole Prop
            - Non-Profit
            - Public Corp
          example: LLC
        anticipatedTransAmounts:
          $ref: '#/components/schemas/UpdatableAnticipatedTransAmounts'
        mcc:
          type: string
          description: >-
            The business classification drives the [Merchant Category
            Codes](/operations/listMerchantCategoryCodes) selection. Prohibited
            or high-risk MCC codes are identified by Exact and are marked
            accordingly. Prohibited accounts are immediately declined while
            onboarding.
          items:
            $ref: '#/components/schemas/MerchantCategoryCodes'
          example: '1761'
        address:
          $ref: '#/components/schemas/UpdatableAddress'
        businessProfile:
          $ref: '#/components/schemas/UpdatableBusinessProfile'
        termsNConditions:
          description: >-
            Whether the Organization or Account has agreed to the Terms and
            Conditions. This field will be available in response only when the
            termsNConditions were sent to exact payments when the Onboarding
            Application was created.
          properties:
            exactPayments:
              type: string
              format: date-time
              description: >-
                Indicates when the Onboarding Applicant agreed to Exact
                Payment's terms and conditions. This field will not be populated
                if Exact termsNConditions.exactPayments field is not sent when
                submitting the Onboarding Application
              example: '2022-08-08T20:31:38.636Z'
            dwolla:
              type: string
              format: date-time
              description: >-
                Indicates when the Onboarding Applicant agreed to [Dwolla's
                terms and
                conditions](https://www.dwolla.com/legal/platform-agreement/).
                This field will not be populated if termsNConditions.dwolla
                field is not sent when submitting the Onboarding Application
              example: '2022-08-08T20:31:38.636Z'
            notifications:
              type: string
              format: date-time
              description: >-
                Indicates when the Onboarding Applicant agreed to Exact
                Payment's notification and communication policies. This field
                will not be populated if Exact termsNConditions.notifications
                field is not sent when submitting the Onboarding Application
              example: '2022-08-08T20:31:38.636Z'
            dwollaAccepted:
              type: boolean
              description: >-
                Indicates whether the Onboarding Applicant agreed to Exact
                Payment's terms and conditions or not.
              example: true
            exactPaymentsAccepted:
              type: boolean
              description: >-
                Indicates whether the Onboarding Applicant agreed to [Dwolla's
                terms and
                conditions](https://www.dwolla.com/legal/platform-agreement/) or
                not.
              example: true
            notificationsAccepted:
              type: boolean
              description: >-
                Indicates whether the Onboarding Applicant agreed to Exact
                Payment's notification and communication policies or not.
              example: true
        bankingDetails:
          $ref: '#/components/schemas/UpdatableBankingDetails'
    MerchantWithoutPrincipal:
      type: object
      properties:
        principal:
          type: array
          description: >-
            The details for the Principal owner(s) of the Business. This field
            will always be an empty array since this endpoint doesn't support
            listing of all Principals.
          items:
            type: object
          default: []
          example: []
        name:
          type: string
          description: The Name of the Business.
          example: Acme Corp
        businessRegistrationNumber:
          type: string
          description: Tax identifier of the Business.
          example: '888596928'
        dbaName:
          type: string
          description: Doing Business As Name.
          example: Acme Trading
        establishedDate:
          type: string
          description: Business Established Date.
          format: date-time
          example: '2021-07-21T16:24:22.678Z'
        numberOfEmployees:
          type: number
          description: Number of Employees of the Business.
          example: 100
        telephone:
          type: string
          description: Telephone Number of the Business.
          example: '2255441120'
        email:
          type: string
          description: Contact Email of the Business.
          example: business-email@acmecorp.com
        onlinePresence:
          type: string
          description: Website URL of the Business.
          example: www.acmecorp.com
        facebook:
          type: string
          description: Facebook link of the Business.
          example: www.facebook.com/acmecorp
        twitter:
          type: string
          description: Twitter link of the Business.
          example: www.twitter.com/acmecorp
        linkedIn:
          type: string
          description: LinkedIn link of the Business.
          example: www.linkedin.com/in/acmecorp
        entityType:
          type: string
          description: Entity Type of the Business.
          enum:
            - LLC
            - Corp
            - Sole Prop
            - Non-Profit
            - Public Corp
          example: LLC
        anticipatedTransAmounts:
          $ref: '#/components/schemas/UpdatableAnticipatedTransAmounts'
        mcc:
          type: string
          description: >-
            The [Merchant Category Codes](/operations/listMerchantCategoryCodes)
            of the Organization or Account. Prohibited or high-risk MCC codes
            are identified by Exact and are marked accordingly. Prohibited
            accounts are immediately declined while onboarding.
          items:
            $ref: '#/components/schemas/MerchantCategoryCodes'
          example: '1761'
        address:
          $ref: '#/components/schemas/UpdatableAddress'
        businessProfile:
          $ref: '#/components/schemas/UpdatableBusinessProfile'
        termsNConditions:
          description: >-
            Whether the Organization or Account has agreed to the Terms and
            Conditions. This field will be available in response only when the
            termsNConditions were sent to exact payments when the Onboarding
            Application was created.
          properties:
            exactPayments:
              type: string
              format: date-time
              description: >-
                Indicates when the Onboarding Applicant agreed to Exact
                Payment's terms and conditions. This field will not be populated
                if Exact termsNConditions.exactPayments field is not sent when
                submitting the Onboarding Application
              example: '2022-08-08T20:31:38.636Z'
            dwolla:
              type: string
              format: date-time
              description: >-
                Indicates when the Onboarding Applicant agreed to [Dwolla's
                terms and
                conditions](https://www.dwolla.com/legal/platform-agreement/).
                This field will not be populated if termsNConditions.dwolla
                field is not sent when submitting the Onboarding Application
              example: '2022-08-08T20:31:38.636Z'
            notifications:
              type: string
              format: date-time
              description: >-
                Indicates when the Onboarding Applicant agreed to Exact
                Payment's notification and communication policies. This field
                will not be populated if Exact termsNConditions.notifications
                field is not sent when submitting the Onboarding Application
              example: '2022-08-08T20:31:38.636Z'
    UpdatableAnticipatedTransAmounts:
      type: object
      properties:
        averageTicketSize:
          type: number
          description: Average Ticket Size.
          example: 750
        maxTicketSize:
          type: number
          description: Max Ticket Size.
          example: 100
        anticipatedMonthlyVolume:
          type: number
          description: Anticipated Monthly Volume.
          example: 500000
    UpdatableBankingDetails:
      type: object
      description: >-
        Banking details of the Account for ACH Payments, this field will be
        available ony for the Onboarding Applications submitted with the Banking
        Details.
      properties:
        bankName:
          type: string
          description: Bank Name
          example: ACME Bank
        routingNumber:
          type: string
          description: >-
            9-digit Routing Number for the Organization or Account based in USA
            (or) 3-digit Institution number for the Organization or Account
            based in Canada.
          example: '55443321'
        ddaNumber:
          type: string
          description: Demand Deposit Account (or) Checking Account number.
          example: '223334456'
        bankNumber:
          type: string
          description: >-
            A bank transit number is a unique 5-digit number used to identify
            the bank branch in Canada. Only applicable for Organization or
            Account based in Canada.
          example: '1234567890'
    UpdatableBusinessProfile:
      type: object
      properties:
        servicesDescription:
          type: string
          description: Services description.
          example: Services description
        currentlyAcceptingPayments:
          type: boolean
          description: >-
            If `true`, currentProcessor, currentGateway and reasonForLeaving are
            required.
          example: true
        currentProcessor:
          type: string
          description: Current Processor.
          example: DynamicData
        currentGateway:
          type: string
          description: Current gateway.
          example: Global Gateway
        reasonForLeaving:
          type: string
          description: Reason for leaving current processor/gateway.
          example: Does not match expectations
        acceptanceMethods:
          $ref: '#/components/schemas/UpdatableAcceptanceMethods'
        recurringServices:
          type: boolean
          description: If `true`, recurringServicesDescription is required.
          example: true
        recurringServicesDescription:
          type: string
          description: Recurring Services description.
          example: Recurring Services description
        refundPolicyDescription:
          type: string
          description: Refund policy.
          example: Refund policy
        paymentTime:
          type: string
          description: The time at which the customer makes the payment to the business.
          enum:
            - Upon Purchase
            - Upon Download
            - At Time of Delivery
            - Other
          example: Upon Purchase
        deliveryTimeframe:
          type: string
          description: The delivery time frame that the business has for its products.
          enum:
            - Immediate
            - Within 7 days
            - Within 14 days
            - Within 30+ days
          example: Immediate
    UpdatableAcceptanceMethods:
      type: object
      description: The method by which the business accepts the payments.
      properties:
        moto:
          type: number
          description: >-
            Percentage of payments accepted through MOTO [Mail Order / Telephone
            Order].
          example: 25
        internet:
          type: number
          description: >-
            Percentage of payments accepted through Online websites. Online
            payments made through hosted payment pages.
          example: 25
        swipe:
          type: number
          description: >-
            Percentage of payments accepted through Swipe. Swipe are POS /
            Payment transactions made through Card reader.
          example: 25
        keyed:
          type: number
          description: >-
            Percentage of payments accepted through Keyed in card details. Card
            payment where a person manually types in the card information.
          example: 25
    UpdatableAddress:
      type: object
      properties:
        line1:
          type: string
          description: Street Address (Building number and Street name).
          example: Main Avenue 42
        line2:
          type: string
          description: >-
            Secondary address unit (For example: apartment, suite, room, or
            floor numbers).
          example: 42-59B Building A
        city:
          type: string
          description: The name of the city where the business is located.
          example: Phoenix
        postalCode:
          type: string
          description: >-
            The postal code where the business is located. Five-digit (example:
            33558) or nine-digit (33558-3321) format is acceptable for USA. Six
            digit(A0A 0A0) or (A0A0A0) format is acceptable for Canada.
          example: '85008'
        country:
          type: string
          description: >-
            The three-digit country code where the business is located. Refer to
            the three-digit country code defined in ISO 3166-1 alpha-3.
          example: USA
        countrySubdivision:
          type: string
          description: >-
            The two digit country subdivision code where the business is
            located. Refer to the two-digit country subdivision code defined in
            ISO 3166-2 for the countries listed in ISO 3166-1.
          example: AZ
    PrincipalCreateOnboardingResponse:
      type: object
      properties:
        firstName:
          type: string
          description: First Name of the Principal.
          example: Jon
        lastName:
          type: string
          description: Last Name of the Principal.
          example: Doe
        _id:
          type: string
          description: >-
            Unique identifier created for each Principal in Exact Payment
            system. Which can be used to upload a copy of Identity verification
            document received for each Principal.
          example: 64b9a61e85c40a7a9847b1d7
    UpdatablePrincipal:
      type: object
      properties:
        firstName:
          type: string
          description: The First Name of the Principal owner of the Business.
          example: Justin
        lastName:
          type: string
          description: The Last Name of the Principal owner of the Business.
          example: Williams
        title:
          $ref: '#/components/schemas/TitleValues'
        telephone:
          type: string
          description: Principal's telephone number.
          example: '2255441120'
        email:
          type: string
          description: The Principal's email.
          example: principal@acmecorp.com
        currentOwnershipYears:
          type: number
          description: Number of years the Principal's ownership in the Business.
          example: 7
        currentOwnershipMonths:
          type: number
          description: Number of months the Principal's ownership in the Business.
          example: 3
        dateOfBirth:
          type: string
          description: Birth date of the Principal.
          format: date
          example: '1990-07-21'
        driversLicense:
          type: string
          description: Principal's Driver's License number.
          example: M15698025
        driversLicenseCountry:
          type: string
          description: >-
            Country where the Principal's Driver's License was issued. Valid
            values are three digit alpha country codes as defined in ISO 3166-1
            alpha-3.
          enum:
            - USA
            - CAN
          default: USA
          example: USA
        driversLicenseState:
          type: string
          description: >-
            State or Country Subdivision where the Principal's Driver's License
            was issued. The two-digit country subdivision code values defined in
            ISO 3166-2 for the countries listed in ISO 3166-1.
          example: IL
        ssn:
          type: string
          description: Social Security Number (US) or Social Insurance Number (CAN).
          example: '756755675'
        ssnCountry:
          type: string
          description: >-
            Country where the Principal's SSN(USA) or SIN(CAN) was issued. Valid
            values are three-digit alpha country codes as defined in ISO 3166-1
            alpha-3.
          enum:
            - USA
            - CAN
          default: USA
          example: USA
        ssnCountrySubdivision:
          type: string
          description: >-
            State or Country Subdivision where the Principal's SSN(USA) or
            SIN(CAN) was issued. The two-digit country subdivision code values
            defined in ISO 3166-2 for the countries listed in ISO 3166-1.
          example: '756755675'
        nationality:
          type: string
          description: >-
            Nationality of the Principal. Valid values are three-digit alpha
            country codes as defined in ISO 3166-1 alpha-3.
          enum:
            - USA
            - CAN
          default: USA
          example: USA
        percentOfOwnership:
          type: number
          description: Principal's Percent of ownership in the business.
          example: 50
        address:
          $ref: '#/components/schemas/UpdatableAddress'
        _id:
          type: string
          description: >-
            A unique identifier assigned to the Principal by the Exact Payments
            system.
          example: 61fdf62ed4226446957b3689
    UpdatableWebhookRequest:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/WebhookEventField'
        urls:
          $ref: '#/components/schemas/WebhookUrlsField'
        description:
          $ref: '#/components/schemas/WebhookDescriptionField'
    UpdateOnboardingStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum:
            - inProgress
            - withdrawn
            - pended
            - approved
            - declined
            - accountClosed
            - reviewNeeded
            - inRiskReview
            - terminated
        statusChangeReason:
          type: string
          enum:
            - Credit Worthiness
            - Failed to Verify Identity
            - Fraud
            - General Risk Concern
            - Prohibited Merchant
            - Other
        statusChangeReasonNote:
          type: string
        isDeleted:
          type: string
      required:
        - status
    UsersResponse:
      type: object
      properties:
        id:
          type: string
          description: The user's Id
          example: 61a78fe82c3156b0945ef135
        roles:
          type: array
          description: The user's roles
          items:
            type: string
          example:
            - 61a78fe82c3156b0945ef135
        email:
          type: string
          description: The user's email
          example: example@email.com
        phone:
          type: string
          description: The user's phone 10 digits number
          example: 1111111111
        account:
          type: string
          description: The account's ID that the user belongs to
          example: 61a78fe82c3156b0945ef135
        name:
          type: string
          description: The user's name
          example: test user
        createdAt:
          type: string
          description: The user's creation date
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          description: The user's last update date
          example: '2021-01-01T00:00:00.000Z'
        userCredential:
          type: string
          description: The users's id credential
          example: 61a78fe82c3156b0945ef135
        lastAccessAt:
          type: string
          description: The user's last access date
          example: '2021-01-01T00:00:00.000Z'
        isDisabled:
          type: boolean
          description: Shows if the user is disabled or not
          example: false
    UserAccountSchema:
      type: object
      properties:
        name:
          type: string
          example: Alicia
        roles:
          type: array
          example:
            - 61a78fe82c3156b0945ef135
          items:
            type: string
        permission:
          example:
            - users.read
            - onboarding-document-requests.create
            - charges.read
          type: array
          items:
            $ref: '#/components/schemas/Permissions'
        email:
          type: string
          example: someone@test.com
        phone:
          type: string
          example: 111111
    WebhookRequest:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/WebhookEventField'
        urls:
          $ref: '#/components/schemas/WebhookUrlsField'
        description:
          $ref: '#/components/schemas/WebhookDescriptionField'
      required:
        - event
        - urls
    WebhookResponse:
      type: object
      properties:
        id:
          type: string
          description: System generated identifier for the webhook definition.
          example: 61e8351bd569a19690052101
        event:
          $ref: '#/components/schemas/WebhookEventField'
        urls:
          $ref: '#/components/schemas/WebhookUrlsField'
        description:
          $ref: '#/components/schemas/WebhookDescriptionField'
        account:
          type: string
          description: The ID of the Account that this Webhook belongs to.
          example: 61e0930df1d1ac62d5b781f0
        createdAt:
          type: string
          description: Date when the webhook was created.
          format: date-time
          example: '2022-01-19T15:05:18.262Z'
        updatedAt:
          type: string
          description: Date when the webhook was updated.
          format: date-time
          example: '2022-01-19T15:05:18.262Z'
        disabledAt:
          type: string
      required:
        - event
    WebhookDescriptionField:
      type: string
      description: >-
        Is a description of the purpose of this webhook definition, what the
        customer will use it for.
      example: Completed reports for this account.
    WebhookEventField:
      description: >
        An event that the customer can subscribe to get notifications when it is
        generated in the system. The format of the event is
        resource.action:status, if no status is provided it will take finish as
        default.
      example: report.run
      type: string
      enum:
        - charge.get
        - payment.create
        - payment.query
        - payment.get
        - payment.void
        - payment.capture
        - payment.refund
        - payment.query-by-customer
        - payment.settle
        - order.create
        - order.query
        - order.get
        - order.access-token.create
        - order.update
        - order.payment-attempts.reset
        - order.pay-with-token
        - order.browser-payment
        - order.browser-tokenize
        - payment-method.ensure
        - payment-method.verify-micro-deposit
        - payment-method.get
        - payment-method.update
        - payment-method.delete
        - payment-method.link-customer
        - payment-method.query-for-customer
        - payment-method.query-for-customer-by-customer-token
        - payment-method.get-by-id-for-customer
        - payment-method.unlink-from-customer
        - payment-method.rebuild-dwolla
        - customer.create
        - customer.query
        - customer.find-by-id
        - report.create
        - report.query
        - report.download
        - report-details.query
    WebhookUrlsField:
      type: array
      description: >-
        Is a list of urls in the customer side that will be invoked and notified
        once an event is triggered.
      items:
        type: string
        example:
          - >-
            https://736d1e71-c9ae-409b-81ff-c2c38c68ad4b.mock.pstmn.io/dev/hook/success
          - >-
            https://736d1e71-c9ae-409b-81ff-c2c38c68ad4b.mock.pstmn.io/dev/hook/finished
    UploadDocumentResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier created for the uploaded Document.
          example: 64b9a61e85c40a7a9847b1d4
    DocumentRequests:
      type: array
      description: >-
        List of Document Request sent for the Onboarding Application. This field
        will be populated only when the Document Requests are made through Exact
        Payment systems.
      items:
        $ref: '#/components/schemas/DocumentRequest'
    DocumentRequest:
      type: object
      properties:
        _id:
          type: string
          description: >-
            Unique identifier created for the Document Requests made for the
            Onboarding Application.
          example: 64c54aeee5efae40813d59b9
        type:
          type: string
          description: The type of Document Request email sent.
          example: Application Status Update – Pending Documentation
        subject:
          type: string
          description: The subject of the email sent.
          example: 'Action Required: Application Status Update – Documents Needed'
        body:
          type: string
          description: The body of the email sent
          example: Hi Jon Doe, Please upload your copy of Drivers License.
        onboarding:
          type: string
          description: >-
            The Onboarding Application identifier for which the Document Request
            was sent.
          example: 615633de394b55001c954640
        user:
          type: string
          description: The unique identifier of the User who requested the Document.
          example: 57f4426a8b872a89ef319baf
        requestor:
          type: string
          description: The requesting Organization who requested the Document.
          example: dwolla
        createdAt:
          type: string
          format: date-time
          description: The date and time when the Document Request was sent.
          example: '2023-07-29T17:39:22.698Z'
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the Document Request was lastly updated.
          example: '2023-07-29T17:39:22.698Z'
        __v:
          type: integer
          description: >-
            The version number of the Document Request. Everytime the Document
            Request is updated the version number will be incremented.
          example: 0
    Documents:
      type: array
      description: >-
        List of Documents uploaded for the Onboarding Application. This field
        will be populated only when the Documents are uploaded through Exact
        Payment systems.
      items:
        $ref: '#/components/schemas/Document'
    Document:
      type: object
      properties:
        _id:
          type: string
          description: >-
            Unique identifier created for the Document upload made for the
            Onboarding Application.
          example: 54c54aeee5efae40813d59b9
        name:
          type: string
          description: Name assigned for the Document.
          example: DL Copy
        type:
          allOf:
            - $ref: '#/components/schemas/DocumentUploadType'
            - description: Type of the Document uploaded.
          type: string
          description: Type of the Document uploaded.
          enum:
            - articles-of-incorporation
            - bank-letter
            - business-license
            - passport
            - utility-bill
            - ss-4-form
            - drivers-license
            - other
          example: drivers-license
        file:
          type: string
          description: File name.
          example: 6410e416fb40e60a5f12b1eb/articles-of-incorporation-IMG_0358.jpg
        ext:
          type: string
          description: File extension.
          example: jpg
        mime:
          type: string
          description: Multipurpose Internet Mail Extension of the File.
          example: image/jpeg
        onboarding:
          type: string
          description: >-
            The Onboarding Application identifier for which the Document was
            uploaded.
          example: 615633de394b55001c954640
        principal:
          type: string
          description: The Principal identifier for whom this Document was uploaded.
          example: 64da8331967613099131f673
        createdAt:
          type: string
          format: date-time
          description: The date and time when the Document was uploaded.
          example: '2023-07-29T17:39:22.698Z'
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the Document upload was last updated.
          example: '2023-07-29T17:39:22.698Z'
        __v:
          type: integer
          description: >-
            The version number of the Document. Everytime the Document is
            updated the version number will be incremented.
          example: 0
    RuleStatus:
      type: string
      description: The Status of the Rule executed or being executed.
      example: Passed
      enum:
        - Passed
        - Failed
        - Errored
        - PendingChecks
    KycResults:
      type: object
      properties:
        name:
          type: string
          description: >-
            The name of the Rule in the Workflow configured to run against this
            Onboarding.
          example: Know your Customer Check 1
        type:
          type: string
          description: The type of Rule executed or being executed.
          enum:
            - Business Information
            - Mastercard Match
            - OFAC
            - Plaid Auth
            - Plaid Balance
            - Plaid Identity
            - Trulioo KYB
            - Trulioo KYC
            - Trulioo International Watchlist
          example: Trulioo KYC
        status:
          type: string
          description: The Status of the Rule executed or being executed.
          example: Passed
          $ref: '#/components/schemas/RuleStatus'
        performedAt:
          type: string
          format: date-time
          description: The date and time when the rule was executed.
          example: '2016-08-17T18:58:47.630Z'
        _id:
          type: string
          description: >-
            The unique identifier assigned to the Rule in Exact Payment's
            system.
          example: 6410e41bdd39207aa3b8bd79
    DocumentUploadType:
      type: string
      description: The Type of the Document being uploaded.
      enum:
        - articles-of-incorporation
        - bank-letter
        - business-license
        - passport
        - utility-bill
        - ss-4-form
        - drivers-license
        - other
        - id-card
      example: drivers-license
    OnboardingDocumentUploadTokenRequest:
      type: object
      properties:
        name:
          type: string
          description: The Name of the Document being uploaded.
          example: Business document
        type:
          $ref: '#/components/schemas/DocumentUploadType'
        files:
          type: string
          format: binary
          description: >-
            The binary data of the Document being uploaded. The following file
            types are supported
            `bmp`,`csv`,`doc`,`docx`,`jpg`,`pdf`,`png`,`rtf`,`txt`,`xls` and
            `xlsx`. An HTTP `500 Internal Server Error` code with a JSON
            response will be returned when the Document is not uploaded.
        principal:
          type: string
          description: >-
            The unique identifier of the Principal you are uploading the
            Document for. This field is required if you upload the Document to
            one of the Principals added in the Onboarding Application.
          example: 64ca7b2e4ab69839f78db609
      required:
        - name
        - type
        - files
    OnboardingDocumentUploadRequest:
      type: object
      properties:
        name:
          type: string
          description: The Name of the Document being uploaded.
          example: Business document
        type:
          $ref: '#/components/schemas/DocumentUploadType'
        documentRequest:
          type: string
          description: >-
            The Document Request identifier if you are uploading the Document in
            response to a Document Request you created.
          example: 64c446af29cef96ce25bc519
        files:
          type: string
          format: binary
          description: >-
            The binary data of the Document being uploaded. The following file
            types are supported
            `bmp`,`csv`,`doc`,`docx`,`jpg`,`pdf`,`png`,`rtf`,`txt`,`xls` and
            `xlsx`. An HTTP `500 Internal Server Error` code with a JSON
            response will be returned when the Document is not uploaded.
        onboardingIsDeleted:
          type: string
          description: >-
            A boolean string. To upload a Document for soft deleted Onboarding,
            pass "true". This field is not required if you upload a Document for
            the active Onboarding.
          example: 'true'
        principal:
          type: string
          description: >-
            The unique identifier of the Principal you are uploading the
            Document for. This field is required if you upload the Document to
            one of the Principals added in the Onboarding Application.
          example: 64ca7b2e4ab69839f78db609
      required:
        - name
        - type
        - files
    Customer:
      title: Customer
      type: object
      description: >-
        In order to understand what a customer is in the context of this API we
        need to define the shape of our customer object. The following details
        the shape and fields involved.
      x-examples:
        example-1:
          id: string
          name: string
          email: string
          phone: string
          token: string
          addresses:
            - label: string
              city: string
              country: string
              line1: string
              line2: string
              postalCode: string
              state: string
              isDefault: true
          createdAt: string
          updatedAt: string
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        token:
          type: string
        addresses:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              city:
                type: string
              country:
                type: string
              line1:
                type: string
              line2:
                type: string
              postalCode:
                type: string
              state:
                type: string
              isDefault:
                type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
    NewCustomer:
      title: New Customer
      type: object
      description: ''
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        addresses:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              city:
                type: string
              country:
                type: string
              line1:
                type: string
              line2:
                type: string
              postalCode:
                type: string
              state:
                type: string
              isDefault:
                type: boolean
            required:
              - label
    BillingDetailsAddress:
      title: Address
      type: object
      required:
        - line1
        - city
        - state
        - country
        - postalCode
      properties:
        line1:
          type: string
        line2:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postalCode:
          type: string
    LookUpCustomer:
      type: object
      properties:
        type:
          type: string
          example: customer
        token:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        customerId:
          type: string
    PaymentAchSchema:
      title: AchSchema
      type: object
      properties:
        type:
          type: string
        token:
          type: string
        billingDetails:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
            address:
              type: object
              properties:
                line1:
                  type: string
                line2:
                  type: string
                city:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalCode:
                  type: string
        ach:
          type: object
          properties:
            bankAccountType:
              type: string
            lastFour:
              type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        label:
          type: string
        isDefault:
          type: string
    LookupNPaymentMethod:
      oneOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - $ref: '#/components/schemas/LookUpCustomer'
    BillingDetailsAddressSchema:
      title: Address
      type: object
      description: The Customer's provided Billing Address.
      properties:
        line1:
          type: string
          description: Line 1 of the address of the Customer.
          maxLength: 30
          example: Fairfield Ranch
        line2:
          type: string
          description: Line 2 of the address of the Customer.
          maxLength: 28
          example: 42-59B Building A
        city:
          type: string
          description: Name of the city.
          maxLength: 20
          example: Ontario
        state:
          type: string
          description: >-
            The two-digit country subdivision code where the Customer is
            located. Refer to the two-digit country subdivision code defined in
            ISO 3166-2 for the countries listed in ISO 3166-1.
          maxLength: 2
          example: CA
        postalCode:
          type: string
          description: >-
            The postal code where the Customer is located. Five-digit (example:
            33558) or nine-digit (33558-3321) format is acceptable for the USA.
            Six digits (A0A 0A0) or (A0A0A0) format is acceptable for Canada.
          maxLength: 10
          example: '91710'
        countryCode:
          type: string
          description: >-
            3-character alphabetical country code according to ISO 3166-1, eg:
            USA, CAN etc.
          pattern: ^[A-Z]{3}$
          example: USA
    BillingDetailsSchema:
      title: Billing Details
      type: object
      description: The Customer's provided Billing Details.
      properties:
        name:
          type: string
          description: Name of the customer.
          example: John Smith
        email:
          type: string
          description: Email of the customer.
          format: email
          example: jhon@acme.corp.com
        phone:
          type: string
          description: Phone number of the customer.
          maxLength: 20
          example: '5551234567'
        address:
          $ref: '#/components/schemas/BillingDetailsAddressSchema'
    CardDetailsSchema:
      title: Card details
      type: object
      description: The Customer's provided Card Details.
      properties:
        expiry:
          type: object
          properties:
            month:
              type: integer
              description: Card expiry month.
              format: uint32
              minimum: 1
              maximum: 12
              example: 10
            year:
              type: integer
              description: Card expiry year.
              format: uint32
              example: 2029
        brand:
          type: string
          description: The brand name of the credit card. It must be in lowercase.
          enum:
            - visa
            - mastercard
            - amex
            - discover
            - diners
            - jcb
            - union pay
          example: visa
        lastFour:
          type: string
          description: The last 4 digits of the supplied credit card.
          example: '0861'
        checks:
          type: object
          properties:
            cvcCheck:
              type: string
              description: The response code from any check on the CVD code.
              enum:
                - no-match
                - not-verified
                - full-match
              example: full-match
            addressCheck:
              type: string
              description: The response code from any AVS check.
              enum:
                - no-match
                - not-verified
                - partial-match
                - full-match
              example: no-match
        tokenType:
          type: string
          description: >-
            Indicates whether this card token is a `platform token` or a
            `network token`.
          enum:
            - platform
            - network
          example: platform
    AchDetailsSchema:
      title: ACH details
      type: object
      description: The Customer's provided Bank Account Details.
      properties:
        bankAccountType:
          type: string
          description: >-
            Indicates the type of bank account that was stored in Exact Payments
            vault.
          enum:
            - checking
            - savings
          example: checking
        lastFour:
          type: string
          description: The last 4-digits of the supplied bank account number.
          example: '5679'
        verified:
          type: boolean
          description: >-
            ACH Payment Methods can be verified or unverified, depending on how
            they were created. This indicates such status for the Payment
            Method.
          example: true
    PaymentMethod:
      oneOf:
        - title: Card Schema
          type: object
          properties:
            type:
              description: >-
                Indicates the type of Payment Method stored in Exact Payments
                Vault, `card` value will be returned for Card Payment Methods.
              type: string
              enum:
                - card
            token:
              type: string
              description: This is the token value that can be used for future payments.
              example: 9e7d093d-1d7a-4a1d-9e7c-89babc607479
            billingDetails:
              $ref: '#/components/schemas/BillingDetailsSchema'
            card:
              $ref: '#/components/schemas/CardDetailsSchema'
            createdAt:
              type: string
              description: The date and time when the Payment Method was created.
              format: date-time
              example: '2022-07-19T23:43:41.724Z'
            updatedAt:
              type: string
              description: The date and time when the Payment Method was last updated.
              format: date-time
              example: '2022-07-19T23:43:41.723Z'
            label:
              type: string
              description: >-
                When attached to a customer, a Payment Method can be
                differentiated by label rather than just its last 4-digits
                representation. This will allow the customers to identify their
                Payment Methods easily.
              example: Visa Card
            isDefault:
              type: boolean
              description: >-
                Indicates whether this is the default Payment Method associated
                with the Customer or not.
              example: true
        - title: ACH Schema
          type: object
          properties:
            type:
              type: string
              description: >-
                Indicates the type of Payment Method stored in Exact Payments
                Vault, `card` value will be returned for Card Payment Methods.
              enum:
                - ach
            token:
              type: string
              description: This is the token value that can be used for future Payments.
              example: d4c2b2ae-f3ef-44b3-9db3-8613e60ab255
            billingDetails:
              $ref: '#/components/schemas/BillingDetailsSchema'
            ach:
              $ref: '#/components/schemas/AchDetailsSchema'
            createdAt:
              type: string
              description: The date and time when the Payment Method was created.
              format: date-time
              example: '2022-07-19T23:43:41.724Z'
            updatedAt:
              type: string
              description: The date and time when the Payment Method was last updated.
              format: date-time
              example: '2022-07-19T23:43:41.723Z'
            label:
              type: string
              description: >-
                When attached to a customer, a Payment Method can be
                differentiated by label rather than just its last 4-digits
                representation. This will allow the customers to identify their
                Payment Methods easily.
              example: Checking Account
            isDefault:
              type: boolean
              description: >-
                Indicates whether this is the default Payment Method associated
                with the Customer or not.
              example: true
      x-examples:
        example-1:
          type: string
          token: string
          billingDetails:
            name: string
            email: string
            phone: string
            address:
              line1: string
              line2: string
              city: string
              state: string
              country: string
              postalCode: string
          card:
            expiry:
              month: 0
              year: 0
            brand: string
            lastFour: string
            checks:
              cvcCheck: true
              addressCheck: true
            tokenType: string
          createdAt: string
          updatedAt: string
          label: string
          isDefault: string
        example-2:
          type: string
          token: string
          billingDetails:
            name: string
            email: string
            phone: string
            address:
              line1: string
              line2: string
              city: string
              state: string
              country: string
              postalCode: string
          ach:
            bankAccountType: string
            lastFour: string
          createdAt: string
          updatedAt: string
          label: string
          isDefault: string
    NewPaymentMethod:
      title: Payment Method
      oneOf:
        - $ref: '#/components/schemas/CardSchema'
        - $ref: '#/components/schemas/AchSchema'
    Payment:
      title: Payment
      oneOf:
        - properties:
            paymentId:
              type: string
              description: Payment identifier.
              example: 64012aa39392e1542d5a3e94
            accountId:
              type: string
              description: Account identifier.
              example: 63ee4a296fd695eded58febe
            approved:
              type: boolean
              description: Payment approved or not.
              example: 'true'
            captured:
              type: boolean
              example: false
              description: >-
                Set this to `false` if you only want to authorize the amount.
                Defaults to `true`.
            captureDetails:
              description: The Payment identifiers of any capture transactions.
              type: object
              properties:
                captures:
                  type: array
                  example:
                    - 645d61a96d0f06842243be9a
                  description: Capture details of the Payment.
                  items:
                    type: string
                remaining:
                  type: number
                  example: 123
                  description: Remaining amount of the capture details.
            voided:
              type: boolean
              description: Payment voided value will be `true` or `false`.
              example: false
            voidDetails:
              description: The Payment identifiers of any void transactions.
              type: object
              properties:
                voids:
                  type: array
                  example:
                    - 645d61a96d0f06842243be9a
                  description: Void details of the Payment.
                  items:
                    type: string
            refunded:
              type: boolean
              description: Payment refunded value will be `true` or `false`.
              example: false
            refundDetails:
              description: The Payment identifiers of any refund transactions.
              type: object
              properties:
                refunds:
                  type: array
                  example:
                    - 645d61a96d0f06842243be9a
                  description: Refund details of the Payment.
                  items:
                    type: string
                remaining:
                  type: number
                  example: 123
                  description: Remaining amount of the refund details.
            settled:
              type: boolean
              example: false
              description: It shows transaction is settled or not.
            settledAt:
              type: string
              description: It shows the date and time if the transaction is settled.
              example: '2023-07-26T23:32:32Z'
            authorization:
              type: string
              example: ET3516
              description: Authorization Identification of the Payment.
            amount:
              type: number
              example: 100
              description: It shows the amount for the Payment.
            surchargeAmount:
              type: number
              example: 5
              description: It shows the surchargeAmount for the Payment.
            currencyCode:
              type: string
              example: CAD
              description: It shows the currency code of the country.
            sentToBank:
              type: boolean
              example: true
              description: It shows `true` or `false` based on the status of bank response.
            bankResponse:
              type: object
              description: It shows bank response details.
              properties:
                code:
                  type: string
                  example: AA
                  description: Code of the bank response.
                message:
                  type: string
                  example: APPROVAL
                  description: Message of the bank response.
            exactResponse:
              type: object
              description: It shows the exact response details
              properties:
                code:
                  type: string
                  example: '0000'
                  description: Code of the Exact response.
                message:
                  type: string
                  example: OK
                  description: Message of the Exact response.
            merchant:
              type: object
              description: It shows the merchant details.
              properties:
                name:
                  type: string
                  example: John Doe
                  description: Name of the merchant.
                address:
                  type: object
                  description: Merchant address.
                  properties:
                    line1:
                      type: string
                      example: Fairfield Ranch
                      description: Address Line1.
                    line2:
                      type: string
                      example: Wycliffe
                      description: Address Line2.
                    city:
                      type: string
                      example: Ontario
                      description: City name.
                    state:
                      type: string
                      example: CA
                      description: >-
                        The two-digit country subdivision code where the
                        customer is located. Refer to the two-digit country
                        subdivision code defined in ISO 3166-2 for the countries
                        listed in ISO 3166-1.
                    postalCode:
                      type: string
                      example: '91710'
                      description: >-
                        The postal code where the customer is located.
                        Five-digit (example: 33558) or nine-digit (33558-3321)
                        format is acceptable for the USA. Six digit(A0A 0A0) or
                        (A0A0A0) format is acceptable for Canada.
                    countryCode:
                      type: string
                      example: USA
                      description: >-
                        3-character alphabetical country code according to ISO
                        3166-1, eg: USA, CAN etc.
                url:
                  type: string
                  example: https://acmecorp.com
                  description: URL of the merchant.
            receipt:
              type: string
              example: axgjdhjhd87
              description: Receipt of the Payment.
            paymentMethodDetails:
              oneOf:
                - properties:
                    cardholder:
                      type: string
                      example: John Doe
                      description: Card holder name.
                    last4:
                      type: string
                      example: '3456'
                      description: Last 4 digits of the card.
                    expiryMonth:
                      type: string
                      example: '12'
                      description: Expiration month for the card.
                    expiryYear:
                      type: string
                      example: '2023'
                      description: Expiration year for the card.
                    cardBrand:
                      type: string
                      example: visa
                      description: Card brand of the card, for example, visa, master.
                    avsCheck:
                      type: object
                      properties:
                        code:
                          type: string
                          example: M
                          description: Code for the AVS check.
                        description:
                          type: string
                          example: Some description about AVS
                          description: Description about the AVS check.
                    cvdCheck:
                      type: object
                      properties:
                        code:
                          type: string
                          example: M
                          description: Code for the CVD check.
                        description:
                          type: string
                          example: Some description about CVD
                          description: Description about the CVD check.
                - properties:
                    token:
                      type: string
                      example: 2f40537f-769c-4f80-b3fb-b5cff67d457d
                      description: Payment method token for the Payment.
                    tokenType:
                      type: string
                      enum:
                        - exactpay
                        - processor
                      description: Type of the token.
                    cardBrand:
                      type: string
                      example: visa
                      description: Card brand of the card, for example, visa, master.
                    cardholder:
                      type: string
                      example: John Doe
                      description: Card holder name.
                    last4:
                      type: string
                      example: '3456'
                      description: Last 4 digits of the card.
                    expiryMonth:
                      type: string
                      example: '12'
                      description: Expiration month for the card.
                    expiryYear:
                      type: string
                      example: '2023'
                      description: Expiration year for the card.
                    cvdCheck:
                      type: object
                      properties:
                        code:
                          type: string
                          example: M
                          description: Code for the CVD check.
                        description:
                          type: string
                          example: Some description about CVD.
                          description: Description about the CVD check.
              type: object
            options:
              type: object
              properties:
                orderTrackingNumber:
                  type: string
                  description: It shows order tracking number.
                  example: abc123
                fraudSuspected:
                  type: string
                  description: It shows fraud suspected value as string.
                  example: aabb23
                ecommerceFlag:
                  type: string
                  description: >-
                    Used to classify the style of transaction being performed. 2
                    = Recurring, 3 = Installment.
                  example: '2'
                thirdPartyId:
                  type: string
                  description: It shows the third party identifier.
                  example: a39392
                specialPayment:
                  type: string
                  description: It shows any special payment involved.
                  example: '123'
                aftTransferType:
                  type: string
                  description: It shows the type of the transfer.
                  example: aft
                customerIp:
                  type: string
                  description: It shows the customer IP.
                  example: 122.168.98.12
                par:
                  type: string
                  description: It shows the par value.
                  example: '1234'
                splitShipmentNumber:
                  type: string
                  description: It shows the split shipment number.
                  example: cjksjk1219
                installmentNumber:
                  type: string
                  description: It shows the installment number.
                  example: jshdj87
            createdAt:
              type: string
              description: Date and time when the Payment is created.
              example: '2022-01-19T15:05:18.262Z'
        - properties:
            paymentId:
              type: string
              description: Payment identifier.
              example: 64012aa39392e1542d5a3e94
            accountId:
              type: string
              description: Account identifier.
              example: 63ee4a296fd695eded58febe
            approved:
              type: boolean
              description: Indicates if the Payment was approved or not.
              example: 'true'
            captured:
              type: boolean
              example: false
              description: >-
                Set this to `false` if you only want to authorize the amount.
                Defaults to `true`.
            voided:
              type: boolean
              description: Payment voided value will be `true` or `false`.
              example: false
            voidDetails:
              description: It shows Payment void details if Payment is voided
              type: object
              properties:
                voids:
                  type: array
                  items:
                    type: string
                    example: voided
            refunded:
              type: boolean
              description: Payment refunded value will be `true` or `false`.
              example: false
            settled:
              type: boolean
              example: false
              description: It shows transaction is settled or not.
            settledAt:
              type: string
              description: It shows the date and time if the transaction is settled.
              example: '2023-07-26T23:32:32Z'
            authorization:
              type: string
              example: ET3516
            amount:
              type: number
              example: 100
              description: It shows the amount for the Payment.
            currencyCode:
              type: string
              example: CAD
              description: It shows the currency code of the country.
            sentToBank:
              type: boolean
              example: true
              description: >-
                It shows `true` or `false` based on the status of the bank
                response.
            bankResponse:
              type: object
              description: It shows bank response details.
              properties:
                code:
                  type: string
                  example: AA
                message:
                  type: string
                  example: APPROVAL
            ach:
              type: object
              properties:
                clearing:
                  type: string
                  example: cleared
                  description: Some description about ACH clearing.
            createdAt:
              type: string
              description: It shows the date and time when it was created.
              example: '2023-07-26T23:32:32Z'
      type: object
    NewPayment:
      title: NewPayment
      type: object
      properties:
        amount:
          type: number
          example: 10
          description: The amount for the new Payment.
        taxAmount:
          type: number
          example: 5
          description: >-
            Tax value included in total amount. Sales tax in the US, or PST for
            Canadian merchants.
        surchargeAmount:
          type: number
          example: 3
          description: The surcharge amount for the new Payment.
        capture:
          type: boolean
          example: true
          description: Set this to false if you only want to authorize for the amount.
        language:
          type: string
          enum:
            - en
            - es
          description: The language for this Payment.
        paymentMethod:
          oneOf:
            - properties:
                token:
                  type: string
                  example: f0db7065-be66-4501-b49b-5eb56e265sdf
                  description: The tokenized payment method to use for Payment.
                creditCard:
                  type: object
                  properties:
                    cardholder:
                      type: string
                      example: John Doe
                      description: Card holder name on the credit card.
                    number:
                      type: string
                      example: '4111111111111111'
                      description: Credit card number.
                    expiryMonth:
                      type: string
                      example: '03'
                      description: Expiration month for the credit card.
                    expiryYear:
                      type: string
                      example: '2023'
                      description: Expiration year for the credit card.
                    cvd:
                      type: string
                      example: '456'
                      description: CVV or CVD for the credit card.
                    cvdIndicator:
                      type: integer
                      enum:
                        - 0
                        - 1
                        - 2
                        - 9
                      description: CVD indicator for the credit card.
                  required:
                    - number
                    - cardholder
                    - expiryMonth
                    - expiryYear
                ach:
                  type: object
                  properties:
                    routingNumber:
                      type: string
                      minLength: 1
                      example: '12345678'
                      description: >-
                        9-digit Routing Number for the Organization or Account
                        based in USA (or) 3-digit Institution number for the
                        Organization or Account based in Canada.
                    accountNumber:
                      type: string
                      minLength: 1
                      example: '11112222333'
                      description: Account number for the customer.
                    bankAccountType:
                      type: string
                      minLength: 1
                      example: checking
                      description: Type of the bank account.
                    plaidToken:
                      type: string
                      minLength: 1
                      example: processor-sandbox-45841cd3-3d54-422e-ba7b-9ae14c5c00cc
                      description: Token to verify the bank funding sources.
                  required:
                    - routingNumber
                    - accountNumber
                    - bankAccountType
                paypal:
                  type: object
                  properties:
                    payerId:
                      type: string
                      example: '5544667722'
                      description: Identification of the customer from PayPal.
                    grossAmountCurrencyId:
                      type: string
                      minLength: 1
                      description: >-
                        The gross amount currency identifier value from the
                        PayPal response.
                      example: '1234'
                    success:
                      type: boolean
                      description: Whether the payment succeeded at PayPal or not.
                      example: true
                    authorization:
                      type: string
                      minLength: 1
                      description: The authorization from the PayPal response.
                      example: auth123
                    message:
                      type: string
                      minLength: 1
                      description: The message from the PayPal response.
                      example: Paypal response text.
                    correlationId:
                      type: string
                      minLength: 1
                      description: The correlation identifier from the PayPal response.
                      example: corId123
                    timestamp:
                      type: string
                      minLength: 1
                      description: The timestamp value from the PayPal response.
                      example: '2023-07-26T23:32:32Z'
                    code:
                      type: string
                      minLength: 1
                      description: Any error code from the PayPal response.
                      example: '404'
                    order:
                      type: boolean
                      description: >-
                        Indicates whether or not the transaction performed in
                        PayPal was an order rather than an authorization. Please
                        look over PayPal's documentation for the difference
                        between the two and make sure you set this flag
                        appropriately, as a PayPal Order supports a different
                        set of follow-up transactions than a PayPal
                        Authorization. Defaults to `false`.
                      default: false
                      example: false
                  required:
                    - payerId
                    - success
                debitBillPay:
                  type: object
                  properties:
                    cardholder:
                      type: string
                      minLength: 1
                      example: John Doe
                      description: Card holder name.
                    number:
                      type: string
                      minLength: 1
                      example: '4111111111111111'
                      description: Card number.
                    expiryMonth:
                      type: string
                      minLength: 1
                      example: '02'
                      description: Expiration month for the card.
                    expiryYear:
                      type: string
                      minLength: 1
                      example: '23'
                      description: Expiration year for the card.
                    cvd:
                      type: string
                      example: '123'
                      description: CVV or CVD of the card.
                    cvdIndicator:
                      type: string
                      description: >-
                        `0` or `null` = Not Supported (Default), `1` = Value
                        provided by Cardholder, `2` = Value provided on card is
                        Illegible, `9` = Cardholder states data is not
                        available.
                      default: '0'
                      example: '1'
                  required:
                    - cardholder
                    - number
                    - expiryMonth
                    - expiryYear
                applePay:
                  type: object
                  properties:
                    cardholder:
                      type: string
                      minLength: 1
                      example: John Doe
                      description: Card holder name.
                    number:
                      type: string
                      minLength: 1
                      example: '4111111111111111'
                      description: Card number.
                    expiryMonth:
                      type: string
                      minLength: 1
                      example: '12'
                      description: Expiration month for the card.
                    expiryYear:
                      type: string
                      minLength: 1
                      example: '23'
                      description: Expiration year for the card.
                    transactionId:
                      type: string
                      minLength: 1
                      description: The transaction ID returned by Apple Pay.
                      example: ABVD93934123
                    cryptogram:
                      type: string
                      minLength: 1
                      description: >-
                        The cryptogram returned by Apple Pay. Note: if the
                        response from Apple contains an `eciIndicator` value,
                        you MUST pass this value to us using the
                        `ecommerce_flag` attribute in the `options` request
                        element.
                      example: kiwewruhflkjsdfblaseabc
                  required:
                    - number
                    - expiryMonth
                    - expiryYear
                    - transactionId
                    - cryptogram
                googlePay:
                  type: object
                  properties:
                    number:
                      type: string
                      minLength: 1
                      example: '5544332211'
                      description: Card number.
                    expiryMonth:
                      type: string
                      minLength: 1
                      example: '12'
                      description: Expiration month for the card.
                    expiryYear:
                      type: string
                      minLength: 1
                      example: '23'
                      description: Expiration year for the card.
                    cvd:
                      type: string
                      minLength: 1
                      description: >-
                        Not normally returned by Google Pay, but should be
                        included if present in the Google Pay response.
                      example: '1234'
                    cryptogram:
                      type: string
                      minLength: 1
                      description: >-
                        The cryptogram for tokenized cards. MUST be supplied if
                        returned by Google Pay.
                      example: kiwewruhflkjsdfblaseabc
                  required:
                    - number
                    - expiryMonth
                    - expiryYear
          type: object
        customer:
          type: object
          properties:
            name:
              type: string
              description: Required if it is a network token.
              example: John Doe
            email:
              type: string
              example: john@acmecorp.com
              description: Email of the customer.
            phone:
              type: string
              example: '8886178190'
              description: Phone number of the customer.
            phoneType:
              type: string
              enum:
                - H
                - W
                - D
                - 'N'
              description: >-
                `H` = Home, `W` = Work, `D` = Day, `N` = Night. Phone type is
                required when a phone number is supplied.
            address:
              type: object
              description: >-
                The customer's billing address. Will be used for AVS checks so
                postal/zip code is the minimum data required.
              properties:
                line1:
                  type: string
                  example: Fairfield Ranch
                  description: Line1 of the address.
                line2:
                  type: string
                  example: Wycliffe
                  description: line2 of the address.
                city:
                  type: string
                  example: Ontario
                  description: City name.
                state:
                  type: string
                  example: CA
                  description: >-
                    The two-digit country subdivision code where the customer is
                    located. Refer to the two-digit country subdivision code
                    defined in ISO 3166-2 for the countries listed in ISO
                    3166-1.
                postalCode:
                  type: string
                  example: '91710'
                  description: >-
                    The postal code where the customer is located. Five-digit
                    (example: 33558) or nine-digit (33558-3321) format is
                    acceptable for the USA. Six digit(A0A 0A0) or (A0A0A0)
                    format is acceptable for Canada.
                countryCode:
                  type: string
                  example: USA
                  description: >-
                    3-character alphabetical country code according to ISO
                    3166-1, eg: USA, CAN etc.
        reference:
          type: object
          description: >-
            Merchant defined values which can be used to internally identify the
            transaction. Whenever reference object is passing in the request
            body then please provide referenceNo inside of object as it is
            mandatory.
          properties:
            customerRef:
              type: string
              maxLength: 20
              example: ref123
              description: Identification number of customer.
            referenceNo:
              type: string
              maxLength: 20
              example: ref12345
              description: Reference number for the Payment.
            correlationId:
              type: string
              example: abc123
              maxLength: 60
              description: >-
                A merchant defined value that can be used to reverse a
                transaction which times out without returning a Payment
                identifier.
        storedCredentials:
          type: object
          properties:
            indicator:
              type: string
              example: '123'
              description: Indicator value of the stored credentials.
            initiation:
              type: string
              example: abc123
              description: Initiation value of the stored credentials.
            schedule:
              type: string
              example: abc123
              description: Value of the schedule.
            paymentId:
              type: string
              example: id123
              description: Identication number of the Payment.
            protectbuyIndicator:
              type: string
              example: xyz
              description: Protect buy indicator value for the stored credentials.
            originalAmount:
              type: number
              example: 123
              description: Original amount of the Payment.
        softDescriptor:
          type: object
          description: >-
            Override business information which would normally appear on a
            customer's statement, making it easier for customers to identify
            transactions.
          properties:
            dbaName:
              type: string
              example: name
              description: Name of the Doing Business As.
            street:
              type: string
              example: Fairfield Ranch
              description: Street name.
            city:
              type: string
              example: Ontario
              description: City name.
            state:
              type: string
              example: CA
              description: >-
                The two-digit country subdivision code where the customer is
                located. Refer to the two-digit country subdivision code defined
                in ISO 3166-2 for the countries listed in ISO 3166-1.
            postalCode:
              type: string
              example: '91710'
              description: Postal code of the city.
            countryCode:
              type: string
              example: USA
              description: >-
                3-character alphabetical country code according to ISO 3166-1,
                eg: USA, CAN etc.
            mcc:
              type: string
              example: '5699'
              description: >-
                Merchant category code (MCCs) is four-digit numbers that
                describe a business's primary business activities. Please refer
                to the endpoint [Merchant Category
                Codes](/operations/listMerchantCategoryCodes) to get the list of
                acceptable MCC codes by Exact Payments.
            merchantContactInfo:
              type: string
              description: Contact of the merchant.
              example: '8886178190'
            authTypeIndicator:
              type: string
              example: F
              description: >-
                F = Final Amount (amount is not expected to change for
                settlement). P = Pre-Authorization / Estimated Amount (amount
                may change between auth and settlement).
            taxId:
              type: string
              example: abc123
              description: The Tax Identifier of the merchant.
            mvvMaid:
              type: string
              example: '5679'
              description: Merchant Verification Value.
            phone:
              type: string
              example: '8886178190'
              description: Phone number of the cutomer/merchant.
            email:
              type: string
              example: john@acmecorp.com
              description: email of the cutomer/merchant.
            submerchantId:
              type: string
              example: xyz123
              description: Identication number of the submerchant.
        level3:
          type: object
          properties:
            taxAmount:
              type: number
              example: 10
              description: 'In smallest currency units, eg: cents in USD.'
            taxRate:
              type: number
              example: 5
              description: Tax rate of the Payment.
            altTaxAmount:
              type: number
              example: 4
              description: Tax amount of the Payment.
            altTaxId:
              type: string
              example: ref123
              description: Tax identification number of the merchant/customer.
            dutyAmount:
              type: number
              example: 2
              description: 'In smallest currency units, eg: cents in USD.'
            freightAmount:
              type: number
              example: 4
              description: 'In smallest currency units, eg: cents in USD.'
            discountAmount:
              type: number
              example: 2
              description: 'In smallest currency units, eg: cents in USD.'
            shipFromZip:
              type: string
              example: '901601'
              description: >-
                The postal code where the customer is located. Five-digit
                (example: 33558) or nine-digit (33558-3321) format is acceptable
                for the USA. Six digit(A0A 0A0) or (A0A0A0) format is acceptable
                for Canada.
            shipTo:
              type: object
              properties:
                customerNumber:
                  type: string
                  example: cust123
                  description: Customer number.
                name:
                  type: string
                  example: John Doe
                  description: Customer name.
                email:
                  type: string
                  example: john@example.com
                  description: Customer email.
                phone:
                  type: string
                  example: '8886178190'
                  description: Customer phone number.
                phoneType:
                  type: string
                  enum:
                    - H
                    - W
                    - D
                    - 'N'
                  description: >-
                    `H` = Home, `W` = Work, `D` = Day, `N` = Night. Phone type
                    is required when a phone number is supplied.
                address:
                  type: object
                  description: >-
                    The customer's billing address. Will be used for AVS checks
                    so postal/zip code is the minimum data required.
                  properties:
                    line1:
                      type: string
                      example: Fairfield Ranch
                      description: Address line 1.
                    line2:
                      type: string
                      description: Address line 2.
                      example: wycliffe
                    city:
                      type: string
                      example: Ontario
                      description: City of the customer.
                    state:
                      type: string
                      example: CA
                      description: State of the customer.
                    postalCode:
                      type: string
                      example: '91710'
                      description: >-
                        The postal code where the customer is located.
                        Five-digit (example: 33558) or nine-digit (33558-3321)
                        format is acceptable for the USA. Six digit(A0A 0A0) or
                        (A0A0A0) format is acceptable for Canada.
                    countryCode:
                      type: string
                      example: USA
                      description: >-
                        3-character alphabetical country code according to ISO
                        3166-1, eg: USA, CAN etc.
                  required:
                    - line1
                    - postalCode
            lineItems:
              type: array
              description: >-
                Optional and can be included in a Payment request when there are
                calculated charges such as taxes and shipping charges added on
                to a purchase.
              items:
                type: object
                properties:
                  commodityCode:
                    type: string
                    example: '123'
                    description: >-
                      Identification number to identify the goods and services
                      that are being purchased.
                  description:
                    type: string
                    description: Description for line item.
                    example: Some description
                  discountAmount:
                    type: string
                    example: '10'
                    description: 'In smallest currency units, eg: cents in USD.'
                  discountIndicator:
                    type: string
                    example: abc
                    description: Discount indicator value of the line items.
                  grossNetIndicator:
                    type: string
                    example: xyz
                    description: Gross Net Indicator value of the line items.
                  lineItemTotal:
                    type: number
                    example: 100
                    description: 'In smallest currency units, eg: cents in USD.'
                  productCode:
                    type: string
                    example: pd123
                    description: Code of the Product.
                  quantity:
                    type: string
                    example: '1'
                    description: If present, must be greater than zero.
                  taxAmount:
                    type: string
                    example: '1'
                    description: 'In smallest currency units, eg: cents in USD.'
                  taxRate:
                    type: string
                    example: '10'
                    description: Tax rate of the line items.
                  unitCost:
                    type: number
                    example: 10
                    description: >-
                      In smallest currency units, eg: cents in USD so 13.25 = 13
                      and one quarter cents.
                  unitOfMeasure:
                    type: string
                    example: unit
                    description: Unit of the measusre for the line items.
                  taxType:
                    type: string
                    example: type
                    description: Type of the tax.
        threeDSecure:
          type: object
          description: >-
            Merchants/Customers to complete an additional verification step with
            the card issuer when paying.
          properties:
            programProtocol:
              type: integer
              enum:
                - 1
                - 2
              description: Program protocol value.
            directoryServerTransactionId:
              type: string
              example: trans123
              description: Identification number of  directory server transaction.
            cavv:
              type: string
              example: cavv123
              description: Cavv value for `threeDSecure`.
            xid:
              type: string
              example: id123
              description: Identification value for the `threeDSecure`.
        options:
          type: object
          properties:
            ecommerceFlag:
              type: string
              description: >-
                Used to classify the style of transaction being performed. 2 =
                Recurring, 3 = Installment.
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '6'
                - '7'
                - '8'
                - R
                - I
                - X
            thirdPartyId:
              type: string
              example: partyid123
              description: Identication number of third party.
            customerIp:
              type: string
              example: 198.168.71.51
              description: IP of the customer.
            generateReceipt:
              type: boolean
              example: true
              description: Receipt generated or not will be shown in `true` or `false`.
            installmentNumber:
              type: string
              example: '12'
              description: Number for the installment.
      required:
        - amount
        - paymentMethod
    CardSchema:
      type: object
      x-examples:
        example-1:
          type: card
          billingDetails:
            name: string
            email: string
            phone: string
            address:
              line1: string
              line2: string
              city: string
              state: string
              country: string
              postalCode: string
          card:
            number: string
            cvc: string
            expiry:
              month: 0
              year: 0
            tokenType: platform
      title: CardSchema
      properties:
        type:
          type: string
        billingDetails:
          type: object
          required:
            - name
            - address
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
            address:
              type: object
              required:
                - line1
                - city
                - state
                - country
                - postalCode
              properties:
                line1:
                  type: string
                line2:
                  type: string
                city:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalCode:
                  type: string
        card:
          type: object
          required:
            - number
            - expiry
          properties:
            number:
              type: string
            cvc:
              type: string
            expiry:
              type: object
              required:
                - month
                - year
              properties:
                month:
                  type: integer
                year:
                  type: integer
            tokenType:
              type: string
            cvcIndicator:
              type: string
              enum:
                - present
                - not-present
                - illegible
      required:
        - type
        - billingDetails
        - card
    AchSchema:
      title: AchSchema
      x-stoplight:
        id: 85pfg4n8pjmwq
      type: object
      properties:
        type:
          type: string
        billingDetails:
          type: object
          required:
            - name
            - address
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
            businessName:
              type: string
            address:
              $ref: '#/components/schemas/BillingDetailsAddress'
        ach:
          type: object
          required:
            - routingNumber
            - accountNumber
            - bankAccountType
          properties:
            plaidToken:
              type: string
            routingNumber:
              type: string
            accountNumber:
              type: string
            bankAccountType:
              type: string
      required:
        - type
        - billingDetails
        - ach
    EftSchema:
      title: EftSchema
      x-stoplight:
        id: nesxtapl5n2v6
      type: object
      properties:
        type:
          type: string
        billingDetails:
          type: object
          required:
            - name
            - address
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
            businessName:
              type: string
            address:
              $ref: '#/components/schemas/BillingDetailsAddress'
        eft:
          type: object
          required:
            - institutionNumber
            - accountNumber
            - transitNumber
          properties:
            institutionNumber:
              type: string
            accountNumber:
              type: string
            transitNumber:
              type: string
      required:
        - type
        - billingDetails
        - eft
    DocumentSchema:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        type:
          type: string
        file:
          type: string
        ext:
          type: string
        mime:
          type: string
        onboarding:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        __v:
          type: integer
      x-examples:
        example-1:
          _id: 630fc301d369f04b977b0add
          name: Update 2
          type: other
          file: 630e37e8e8495640618df933/other-file.png
          ext: png
          mime: image/png
          onboarding: 630e37e8e8495640618df933
          createdAt: '2022-08-31T20:22:25.276Z'
          updatedAt: '2022-08-31T20:22:25.276Z'
          __v: 0
    Micro-depositVerificationRequest:
      title: Micro-depositVerificationRequest
      type: object
      properties:
        amount1:
          type: integer
          description: 'Amount in smallest currency unit, eg: cents.'
          format: int32
          minimum: 0
          maximum: 999999999
        amount2:
          type: integer
          description: 'Amount in smallest currency unit, eg: cents.'
          format: int32
          minimum: 0
          maximum: 999999999
    ReferencedPayment:
      title: ReferencedPayment
      x-stoplight:
        id: 18k76hh0qr4bd
      type: object
      properties:
        amount:
          type: integer
          description: |-
            Amount in smallest currency unit, for example, cents, including all
             surcharges, taxes etc.
          format: int32
          minimum: 0
          maximum: 999999999
          example: 100
        authorization:
          type: string
          description: >-
            Authorization code given in the payment response, required for card
            transaction captures.
          example: ET3516
        softDescriptor:
          type: object
          description: >-
            Override business information which would normally appear on a
            customer's statement, making it easier for customers to identify
            transactions.
          properties:
            dbaName:
              type: string
              example: name
              description: Name of the Doing Business As.
            street:
              type: string
              example: Fairfield Ranch
              description: Street name.
            city:
              type: string
              example: Ontario
              description: City name.
            state:
              type: string
              example: CA
              description: >-
                The two-digit country subdivision code where the customer is
                located. Refer to the two-digit country subdivision code defined
                in ISO 3166-2 for the countries listed in ISO 3166-1.
            postalCode:
              type: string
              example: '91710'
              description: >-
                The postal code where the customer is located. Five-digit
                (example: 33558) or nine-digit (33558-3321) format is acceptable
                for the USA. Six digit(A0A 0A0) or (A0A0A0) format is acceptable
                for Canada.
            countryCode:
              type: string
              description: >-
                3-character alphabetical country code according to ISO 3166-1,
                eg: USA, CAN etc.
              example: USA
            mcc:
              type: string
              example: mcc
              description: >-
                Merchant category code (MCCs) is four-digit numbers that
                describe a business's primary business activities. Please refer
                to the endpoint [Merchant Category
                Codes](/operations/listMerchantCategoryCodes) to get the list of
                acceptable MCC codes by Exact Payments.
            merchantContactInfo:
              type: string
              description: Contact of the merchant.
              example: '8886178190'
            authTypeIndicator:
              type: string
              example: F
              description: >-
                F = Final Amount (amount is not expected to change for
                settlement). P = Pre-Authorization / Estimated Amount (amount
                may change between auth and settlement).
            taxId:
              type: string
              example: abc123
              description: The Tax Identifier of the merchant.
            mvvMaid:
              type: string
              example: '5679'
              description: Merchant Verification Value.
            phone:
              type: string
              example: '8886178190'
              description: Phone number of the customer/merchant.
            email:
              type: string
              example: john@acmecorp.com
              description: email of the customer/merchant.
            submerchantId:
              type: string
              example: xyz123
              description: Identification number of the sub-merchant.
        reference:
          type: object
          description: >-
            Merchant defined values which can be used to internally identify the
            transaction.
          properties:
            customerRef:
              type: string
              maxLength: 20
              example: ref123
            referenceNo:
              type: string
              maxLength: 20
              example: ref12345
            correlationId:
              type: string
              example: abc123
              maxLength: 60
              description: >-
                A merchant-defined value that can be used to reverse a
                transaction which times out without returning a Payment
                identifier.
          required:
            - referenceNo
        options:
          type: object
          properties:
            ecommerceFlag:
              type: string
              description: >-
                Used to classify the style of transaction being performed. 2 =
                Recurring, 3 = Installment.
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '6'
                - '7'
                - '8'
                - R
                - I
                - X
            thirdPartyId:
              type: string
              example: partyid123
              description: Identification number of the third party.
            customerIp:
              type: string
              example: 138.84.54.82
              description: IP of the customer.
            generateReceipt:
              type: boolean
              example: true
              description: Receipt generated or not will be shown in `true` or `false`.
            installmentNumber:
              type: string
              example: '12'
              description: Number for the installment.
      required:
        - amount
    FilterOnboardings:
      type: object
      properties:
        account:
          type: array
          description: >-
            List of Organization identifiers that you have access to and which
            can be used to filter Onboardings Applications.
          items:
            type: string
          example:
            - 57f424bb7e534ff71f6e7356
            - 61e9b44edc6c7fa9167ab86b
            - 627422024aa3c7e92eb7e57c
            - 62d039075a01d467df2472d1
        status:
          type: array
          description: >-
            The list of Onboarding statuses an Organization can use to filter
            the Onboarding Applications.
          items:
            type: string
            $ref: '#/components/schemas/AccountStatus'
          example:
            - new
            - inProgress
            - pendingChecks
            - checking
            - bankBoarding
            - autoApproved
            - approved
            - pended
            - autoDeclined
            - declined
            - withdrawn
            - errored
            - terminated
            - accountClosed
    AccountStatus:
      type: string
      enum:
        - new
        - inProgress
        - pendingChecks
        - checking
        - bankBoarding
        - autoApproved
        - approved
        - pended
        - autoDeclined
        - declined
        - withdrawn
        - errored
        - terminated
        - accountClosed
    NotFoundError:
      type: object
      additionalProperties: false
      properties:
        code:
          type: string
          description: >-
            Error code that shows what kind of error occur during the execution
            of the endpoint.
        message:
          type: string
          description: Contains a detailed message on the actual error.
        type:
          type: string
          description: >-
            Specifies the type of error that ocurred in the API, this will give
            you more insight on what failed during the execution of the
            endpoint.
        requestId:
          type: string
          description: >-
            UUID that represents the id in Exact Payments system, you can use
            this when contacting support team to provide more information of an
            specific failure.
  examples:
    UnderwritingWorkflowRequestAllRulesExample:
      summary: Request to create a new Underwriting workflow including all rules
      value:
        name: All rules workflow
        entryRule: Plaid Identity
        rules:
          - name: Plaid Identity
            type: Plaid Identity
            options: {}
            onPass: Plaid Auth
            onFail: accept
          - name: Plaid Auth
            type: Plaid Auth
            options: {}
            onPass: Plaid Balance
            onFail: accept
          - name: Plaid Balance
            type: Plaid Balance
            options:
              minimumBalance: 10
            onPass: High Risk MCC
            onFail: review
          - name: High Risk MCC
            type: Business Information
            options:
              - field: merchant.mcc
                operator: in
                value1:
                  - '4411'
                  - '6050'
            onPass: reject
            onFail: Medium Risk MCC
          - name: Medium Risk MCC
            type: Business Information
            options:
              - field: merchant.mcc
                operator: in
                value1:
                  - '9700'
                  - '9701'
                  - '9702'
            onPass: Medium Risk Trulioo KYB
            onFail: Low Risk MCC
          - name: Low Risk MCC
            type: Business Information
            options:
              - field: merchant.mcc
                operator: in
                value1:
                  - '7542'
            onPass: review
            onFail: Low Risk Acceptable Delivery
          - name: Medium Risk Trulioo KYB
            type: Trulioo KYB
            options: {}
            onPass: review
            onFail: Medium Risk Trulioo KYC
          - name: Medium Risk Trulioo KYC
            type: Trulioo KYC
            options: {}
            onPass: Medium Risk Trulioo International Watchlist
            onFail: review
          - name: Medium Risk Trulioo International Watchlist
            type: Trulioo International Watchlist
            options: {}
            onPass: reject
            onFail: Medium Risk OFAC
          - name: Medium Risk OFAC
            type: OFAC
            options:
              min: 5
              max: 100
            onPass: Medium Risk Mastercard Match
            onFail: review
          - name: Medium Risk Mastercard Match
            type: Mastercard Match
            options:
              merchant:
                Name:
                  - M00
              principal:
                Name:
                  - M00
            onPass: review
            onFail: reject
          - name: Low Risk Acceptable Delivery
            type: Business Information
            options:
              - field: merchant.businessProfile.deliveryTimeframe
                operator: in
                value1:
                  - Within 7 days
            onPass: Low Risk Low Volume
            onFail: reject
          - name: Low Risk Low Volume
            type: Business Information
            options:
              - field: merchant.anticipatedTransAmounts.anticipatedMonthlyVolume
                operator: between
                value1: 500
                value2: 20000
              - field: merchant.anticipatedTransAmounts.averageTicketSize
                operator: between
                value1: 5
                value2: 500
            onPass: accept
            onFail: review
    UnderwritingWorkflowRequestBusinessInformationExample:
      summary: >-
        Request to create a new Underwriting Workflow Request using Business
        Information
      value:
        name: Business Information workflow
        entryRule: Business Rule
        rules:
          - name: Business Rule
            type: Business Information
            options:
              - field: merchant.mcc
                operator: in
                value1:
                  - '4411'
                  - '6050'
              - field: merchant.businessProfile.deliveryTimeframe
                operator: in
                value1:
                  - Within 7 days
              - field: merchant.anticipatedTransAmounts.anticipatedMonthlyVolume
                operator: between
                value1: 500
                value2: 20000
              - field: merchant.anticipatedTransAmounts.averageTicketSize
                operator: between
                value1: 5
                value2: 500
              - field: merchant.principal.address.city
                operator: eq
                value1: San Francisco
            onPass: reject
            onFail: accept
    UnderwritingWorkflowRequestMastercardMatchExample:
      summary: >-
        Request to create a new Underwriting Workflow Request using Mastercard
        Match
      value:
        name: Mastercard workflow
        entryRule: Medium Risk Mastercard Match
        rules:
          - name: Medium Risk Mastercard Match
            type: Mastercard Match
            options:
              merchant:
                Name:
                  - M00
              principal:
                Name:
                  - M00
            onPass: review
            onFail: reject
    UnderwritingWorkflowRequestOFACExample:
      summary: Request to create a new Underwriting Workflow using OFAC
      value:
        name: OFAC workflow
        entryRule: Medium Risk OFAC
        rules:
          - name: Medium Risk OFAC
            type: OFAC
            options:
              min: 5
              max: 100
            onPass: accept
            onFail: review
    UnderwritingWorkflowRequestPlaidAuthExample:
      summary: Request to create a new Underwriting Workflow using Plaid Auth
      value:
        name: Plaid Auth workflow
        entryRule: Plaid Auth
        rules:
          - name: Plaid Auth
            type: Plaid Auth
            options: {}
            onPass: accept
            onFail: accept
    UnderwritingWorkflowRequestPlaidBalanceExample:
      summary: Request to create a new Underwriting Workflow using Plaid Balance
      value:
        name: Plaid Balance workflow
        entryRule: Plaid Balance
        rules:
          - name: Plaid Balance
            type: Plaid Balance
            options:
              minimumBalance: 10
            onPass: reject
            onFail: review
    UnderwritingWorkflowRequestPlaidIdentityExample:
      summary: Request to create a new Underwriting Workflow using Plaid Identity
      value:
        name: Plaid Identity workflow
        entryRule: Plaid Identity
        rules:
          - name: Plaid Identity
            type: Plaid Identity
            options: {}
            onPass: accept
            onFail: accept
    UnderwritingWorkflowRequestTruliooInternationalWatchlistExample:
      summary: >-
        Request to create a new Underwriting Workflow using Trulioo
        International Watchlist
      value:
        name: International Watchlist workflow
        entryRule: Medium Risk Trulioo International Watchlist
        rules:
          - name: Medium Risk Trulioo International Watchlist
            type: Trulioo International Watchlist
            options: {}
            onPass: reject
            onFail: accept
    UnderwritingWorkflowRequestTruliooKYBExample:
      summary: Request to create a new Underwriting Workflow using Trulioo KYB
      value:
        name: KYB workflow
        entryRule: Medium Risk Trulioo KYB
        rules:
          - name: Medium Risk Trulioo KYB
            type: Trulioo KYB
            options: {}
            onPass: review
            onFail: accept
    UnderwritingWorkflowRequestTruliooKYCExample:
      summary: Request to create a new Underwriting Workflow using Trulioo KYC
      value:
        name: KYC workflow
        entryRule: Medium Risk Trulioo KYC
        rules:
          - name: Medium Risk Trulioo KYC
            type: Trulioo KYC
            options: {}
            onPass: accept
            onFail: reject
    CreatePaymentMethodRequest:
      value:
        billingDetails:
          address:
            city: Knoxville
            country: USA
            line1: Bond Street
            line2: somewhere
            postalCode: '37920'
            state: TN
          email: steve.tack@3pillarglobal.com
          name: steve tack
          phone: '5545844859'
        type: card
        card:
          number: '4111111111111111'
          expiry:
            month: 12
            year: 2029
          cvc: '275'
          tokenType: platform
    CreateAchPaymentMethodRequest:
      value:
        billingDetails:
          address:
            city: Knoxville
            country: USA
            line1: Bond Street
            line2: somewhere
            postalCode: '37920'
            state: TN
          email: steve.tack@3pillarglobal.com
          name: steve tack
          phone: '5545844859'
        type: ach
        ach:
          routingNumber: '091000022'
          accountNumber: '123456'
          bankAccountType: checking
    CreateAchPaymentMethodResponse:
      value:
        type: ach
        token: 5a9e9824-4528-407a-87f3-68a2c68ba719
        updatedAt: '2023-03-02T22:41:02.943Z'
        createdAt: '2023-02-27T22:37:46.941Z'
        billingDetails:
          email: steve.tack@3pillarglobal.com
          name: steve tack
          phone: '5545844859'
          address:
            city: Knoxville
            country: USA
            line1: Bond Street
            line2: somewhere
            postalCode: '37920'
            state: TN
        ach:
          bankAccountType: checking
          lastFour: '3456'
          verified: true
    CreatePaymentMethodResponse:
      value:
        type: card
        token: 5a9e9824-4528-407a-87f3-68a2c68ba719
        updatedAt: '2023-03-02T22:41:02.943Z'
        createdAt: '2023-02-27T22:37:46.941Z'
        billingDetails:
          email: steve.tack@3pillarglobal.com
          name: steve tack
          phone: '5545844859'
          address:
            city: Knoxville
            country: USA
            line1: Bond Street
            line2: somewhere
            postalCode: '37920'
            state: TN
        card:
          brand: visa
          lastFour: '5293'
          checks:
            cvcCheck: full-match
            addressCheck: full-match
          expiry:
            month: 12
            year: 2029
          tokenType: platform
    GetPaymentsResponse:
      value:
        - id: 63f006479392e1542d5a33fb
          paymentId: 63f006479392e1542d5a33fb
          terminalId: 63f0034e242f3756854c7344
          merchantId: 63f00246242f3756854c7343
          accountId: 63ee4a296fd695eded58febe
          type: payment
          status: awaiting-payment
          approved: false
          captured: false
          voided: false
          refunded: false
          settled: false
          amount: 10000
          sentToBank: false
          createdAt: '2023-02-17T22:57:11.655Z'
          reference:
            referenceNo: '11928102'
        - id: 63f00ac2eba43fcd804c465c
          paymentId: 63f00ac2eba43fcd804c465c
          terminalId: 63f0034e242f3756854c7344
          merchantId: 63f00246242f3756854c7343
          accountId: 63ee4a296fd695eded58febe
          type: payment
          status: awaiting-payment
          approved: false
          captured: false
          voided: false
          refunded: false
          settled: false
          amount: 10000
          sentToBank: false
          createdAt: '2023-02-17T23:16:18.037Z'
          reference:
            referenceNo: '12345'
    CreatePaymentRequest:
      value:
        amount: 10000
        capture: false
        paymentMethod:
          token: 2f40537f-769c-4f80-b3fb-b5cff67d457d
        options:
          ecommerceFlag: '7'
        reference:
          customerRef: ref123
          referenceNo: '96381504'
    CreatePaymentResponse:
      value:
        id: 64012aa39392e1542d5a3e94
        paymentId: 64012aa39392e1542d5a3e94
        terminalId: 63f0034e242f3756854c7344
        merchantId: 63f00246242f3756854c7343
        accountId: 63ee4a296fd695eded58febe
        type: payment
        status: completed
        approved: true
        captured: false
        voided: false
        refunded: false
        settled: false
        authorization: ET3516
        amount: 100
        sentToBank: true
        createdAt: '2023-03-02T23:00:51.616Z'
        reference:
          customerRef: ref123
          referenceNo: '96381504'
        bankResponse:
          code: AA
          message: APPROVAL
        exactResponse:
          code: '0000'
          message: OK
        paymentMethodDetails:
          cardholder: ruben meza
          last4: '0861'
          cardBrand: visa
          expiryMonth: 12
          expiryYear: 2023
          cvdCheck:
            code: M
            description: Card is authentic
          avsCheck:
            code: X
            description: Some description
        options:
          ecommerceFlag: '2'
          thirdPartyId: djshjdy382
        merchant:
          name: Tokenization test
          address:
            line1: ' 1 BUSINESS ST'
            line2: ''
            city: Knoxville
            state: Tennessee
            postalCode: '37920'
            countryCode: United States
          url: https://company.com
        terminal:
          gatewayId: O63428-77
    SecondaryPaymentRequest:
      value:
        amount: 100
        authorization: ET3516
    ACHVoidRequest:
      value:
        amount: 100
    ReportQueryResponse:
      value:
        runAt: '2023-06-05T07:03:00.297Z'
        id: 6480fe85201b3d645059aa42
        domain: funding
        organization: 62747e0886e15057b1eb1714
        parameters:
          user: 6463e4bcc176abf4f43ac9ab
          start: '2020-01-01T00:00:00.000Z'
          end: '2023-06-01T00:00:00.000Z'
          accounts:
            - 62747e0886e15057b1eb1714
        expiresAt: '2024-06-07T22:02:45.522Z'
        name: Report-funding-2023-06-07T22:02:45.482Z
        status: completed
        failedAttempts: 0
        createdAt: '2023-06-07T22:02:45.522Z'
        updatedAt: '2023-06-07T22:02:51.271Z'
        result:
          size: 8
    AccountReportDetailsResponse:
      value:
        - clientIp: '::ffff:127.0.0.6'
          organization: null
          status: bankBoarding
          statusChangeReason: null
          kycResults:
            - name: rule 1
              type: Business Information
              status: Failed
              performedAt: '2022-01-13T23:43:32.644Z'
              _id: 61e0b9249f01508913cdd806
              originalResponse: |-
                {
                  "merchant.mcc": {
                    "fieldValue": "5961",
                    "options": {
                      "field": "merchant.mcc",
                      "operator": "",
                      "value1": [
                        "1750"
                      ]
                    },
                    "checkResult": "Not Match"
                  }
                }
          merchant:
            principal:
              - firstName: Justin
                lastName: Williams
                title: Mr
                telephone: '2212144456'
                email: email@principal.com
                currentOwnershipYears: 1
                currentOwnershipMonths: 2
                driversLicense: '0812319884104'
                driversLicenseState: IL
                percentOfOwnership: 50
                address:
                  line1: 42 Main AVENUE
                  city: PHOENIX
                  postalCode: '85008'
                  country: USA
                  countrySubdivision: AZ
                _id: 61e0b9249f01508913cdd7fd
            name: Some Test 604
            businessRegistrationNumber: '888596928'
            dbaName: ANOTHER MERCHANT
            establishedDate: '2021-07-21T16:24:22.678Z'
            numberOfEmployees: 100
            telephone: '2255441120'
            email: erick.gamez@3pillarglobal.com
            onlinePresence: http://www.rejectedcompany.com
            facebook: www.facebook.com/approvedcompany
            twitter: www.twitter.com/approvedcompany
            linkedIn: www.linkedin.com/in/approvedcompany
            entityType: LLC
            anticipatedTransAmounts:
              averageTicketSize: 300
              maxTicketSize: 100
              anticipatedMonthlyVolume: 1000
            mcc: '5961'
            address:
              line1: 42 ELM AVENUE
              city: PHOENIX
              postalCode: '85008'
              country: USA
              countrySubdivision: AZ
            businessProfile:
              servicesDescription: Services description
              currentlyAcceptingPayments: true
              currentProcessor: FirstData
              currentGateway: FirstData
              acceptanceMethods:
                moto: 25
                internet: 25
                swipe: 25
                keyed: 25
                _id: 61e0b9249f01508913cdd7fb
              recurringServices: true
              recurringServicesDescription: Recurring Services description
              refundPolicyDescription: Refund policy
              paymentTime: Upon Purchase
              deliveryTimeframe: Within 7 days
            bankingDetails:
              bankName: My Bank
              routingNumber: '55443321'
              bankNumber: '1234567890'
              plaidAccessToken: ''
          createdAt: '2022-01-13T23:43:32.493Z'
    TransactionReportDetailsResponse:
      value:
        - account: Some Test 604
          approved: true
          captured: true
          captureDetails: null
          refunded: false
          refundDetails: null
          voided: false
          voidDetails: null
          settled: true
          settledAt: '2022-12-07T23:26:17.370Z'
          paymentId: 6462c180a8056e458324de9b
          authorization: ET123452
          amount: 20.17
          feeAmount: null
          currencyCode: USD
          sentToBank: true
          paymentMethodDetails:
            cardBrand: visa
            cardholder: Test User
            last4: '1111'
            expiryMonth: 12
            expiryYear: 2023
            cvdCheck:
              code: M
              description: Card is authentic
            avsCheck:
              code: 'Y'
              description: Street address and 5-digit postal code match
          bankResponse:
            code: AA
            message: Approved Transaction
          exactResponse: null
          terminal: null
          eCommerceFlag: null
          createdAt: '2022-12-16T21:20:06.925Z'
          type: payment
    ChargebackReportDetailsResponse:
      value:
        - organization: null
          paymentReference: '300600000316681'
          paymentDate: 1/6/23
          accountNumber: '******2202'
          routingNumber: '00113011258'
          fundAmt: -233.96
          batchReference: null
          batchType: C
          customerBatchReference: null
          customerName: EXACT PAYMENTS
          merchantNumber: '8025274492'
          externalMid: null
          storeNumber: '11111'
          chain: '01598'
          batchAmt: -28.99
          amount: -28.99
          surchgAmount: null
          convnceAmt: null
          cardType: '009'
          chargeType: '00020'
          chargeTypeDescription: CHARGEBACKS
          cardPlan: visa
          cardNo: 415417******1251
          chkNum: null
          transactionDate: '12052022'
          settlementDate: null
          authorizationCode: null
          chargebackControlNo: '1049718764'
          rocText: null
          trnAci: null
          cardSchemeRef: '302339837578935'
          trnRefNum: '24006004146'
          settlementMethod: ACH
          currencyCode: USD
          cbAcqRefId: '24755422340133401650958'
          chgbkRsnCode: '10.4'
          chgbkRsnDesc: disputed my cardholder
          merRef: null
          purchId: null
          custCod: null
          trnArn: null
          termId: null
          entNum: null
          createdAt: '2023-03-01T17:07:59.396Z'
          updatedAt: '2023-03-01T17:07:59.396Z'
    SettlementReportDetailsResponse:
      value:
        - account: UAT payments test account
          approved: true
          captured: true
          captureDetails: null
          refunded: false
          refundDetails: null
          voided: false
          voidDetails: null
          settled: true
          settledAt: '2022-12-29T21:20:06.925Z'
          paymentId: 639ce1062c1c5d35a2e50384
          authorization: ET123452
          amount: 20.17
          feeAmount: null
          currencyCode: USD
          sentToBank: true
          paymentMethodDetails:
            cardBrand: visa
            cardholder: Test User
            last4: '1111'
            expiryMonth: 12
            expiryYear: 2023
            cvdCheck:
              code: M
              description: Card is authentic
            avsCheck:
              code: 'Y'
              description: Street address and 5-digit postal code match.
          bankResponse:
            code: AA
            message: Approved Transaction
          exactResponse: null
          terminal: null
          eCommerceFlag: null
          createdAt: '2022-12-16T21:20:06.925Z'
          type: payment
          customerRef: null
          referenceNo: ExactJs
          surchargeAmount: null
    FundingReportDetailsResponse:
      value:
        - id: 645d61a96d0f06842243be9a
          account: UAT payments test account
          channel: ach
          amount: 195
          currency: USD
          status: success
          createdAt: '2023-05-11T21:44:10.208Z'
    PaymentMethodNotFoundResponse:
      value:
        code: payment-method-not-found-error
        message: payment-method-not-found
        type: resource-not-found-error
        requestId: 25343606-a05f-4db2-92f9-9dd80777973f
x-extension-2: null
x-extension-3: null

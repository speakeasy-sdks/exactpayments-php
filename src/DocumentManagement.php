<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace TheLogicStudio\ExactPayments;

class DocumentManagement 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Request Document
     * 
     * Create a Document Request asking the Organization or Account for additional verification.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\CreateDocumentRequestRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\CreateDocumentRequestSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\CreateDocumentRequestResponse
     */
	public function createDocumentRequest(
        ?\TheLogicStudio\ExactPayments\Models\Operations\CreateDocumentRequestRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\CreateDocumentRequestSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\CreateDocumentRequestResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document-request', \TheLogicStudio\ExactPayments\Models\Operations\CreateDocumentRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\CreateDocumentRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onboardingDocumentRequestCreate = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\OnboardingDocumentRequestCreateOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestMinifiedZodError = $serializer->deserialize((string)$httpResponse->getBody(), 'array<TheLogicStudio\ExactPayments\Models\Shared\ZodError>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete Document
     * 
     * Delete an uploaded document associated with a specific document ID.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentByIdRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentByIdSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentByIdResponse
     */
	public function deleteDocumentById(
        ?\TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentByIdRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentByIdSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentByIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}', \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'text/plain';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete Document Request
     * 
     * Delete a Document Request for an Onboarding Application for the given Organization, Onboarding, and Document Request identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentRequestByIdRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentRequestByIdSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentRequestByIdResponse
     */
	public function deleteDocumentRequestById(
        ?\TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentRequestByIdRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentRequestByIdSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentRequestByIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document-request/{documentRequestId}', \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentRequestByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'text/plain';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\DeleteDocumentRequestByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Download Document
     * 
     * Download a specific Document for the given Organization, Onboarding Application, and Document identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdResponse
     */
	public function getDocumentById(
        ?\TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}/download', \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.8, application/zip;q=0.5, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/zip')) {
                $response->getDocumentById200ApplicationZipBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseSystemError = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseSystemError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List Uploaded Documents
     * 
     * Retrieve a list of Documents for the given Organization and Onboarding Application identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsResponse
     */
	public function getDocuments(
        ?\TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document', \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.7, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\GetDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documents = $serializer->deserialize((string)$httpResponse->getBody(), 'array<TheLogicStudio\ExactPayments\Models\Shared\Document>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseSystemError = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseSystemError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Download All Documents
     * 
     * Download all Documents for the given Organization and Onboarding Application identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsResponse
     */
	public function getDownloadAllDocuments(
        ?\TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document/download', \TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.8, application/zip;q=0.5, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\GetDownloadAllDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/zip')) {
                $response->getDownloadAllDocuments200ApplicationZipBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseSystemError = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseSystemError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List Document Requests
     * 
     * Retrieve a list of Document Requests for the given Organization and Onboarding Application identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsResponse
     */
	public function getListDocumentRequests(
        ?\TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document-request', \TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.7, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\GetListDocumentRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onboardingDocumentRequestsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<TheLogicStudio\ExactPayments\Models\Shared\OnboardingDocumentRequestResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseSystemError = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseSystemError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Document
     * 
     * Retrieve a specific uploaded Document for the given Organization and Onboarding Application identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentResponse
     */
	public function getRetrieveDocument(
        ?\TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}', \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.7, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->document = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\Document', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Document Request
     * 
     * Retrieve a specific Document Request for the given Organization and Onboarding Application identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequestRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequestSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequestResponse
     */
	public function getRetrieveDocumentRequest(
        ?\TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequestRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequestSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequestResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document-request/{documentRequestId}', \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.7, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\GetRetrieveDocumentRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onboardingDocumentRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\OnboardingDocumentRequestResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseSystemError = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseSystemError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List Document Requests by Token
     * 
     * List the Document Requests associated with the Token found in the Upload Document link URL sent via the Document Request email using [Request Document](/operations/createDocumentRequest) API endpoint.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\ListDocumentRequestByTokenRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\ListDocumentRequestByTokenResponse
     */
	public function listDocumentRequestByToken(
        ?\TheLogicStudio\ExactPayments\Models\Operations\ListDocumentRequestByTokenRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\ListDocumentRequestByTokenResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/document-request/{documentRequestToken}', \TheLogicStudio\ExactPayments\Models\Operations\ListDocumentRequestByTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\ListDocumentRequestByTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDocumentRequestByToken200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<TheLogicStudio\ExactPayments\Models\Operations\ListDocumentRequestByToken200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update Document Type
     * 
     * Update the `type` of a specific Document for the given Organization, Onboarding Application, and Document identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\PutUpdateDocumentTypeByIdRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\PutUpdateDocumentTypeByIdSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\PutUpdateDocumentTypeByIdResponse
     */
	public function putUpdateDocumentTypeById(
        ?\TheLogicStudio\ExactPayments\Models\Operations\PutUpdateDocumentTypeByIdRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\PutUpdateDocumentTypeByIdSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\PutUpdateDocumentTypeByIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}', \TheLogicStudio\ExactPayments\Models\Operations\PutUpdateDocumentTypeByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.7, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\PutUpdateDocumentTypeByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->badRequestUpdateDocumentType = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseSystemError = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseSystemError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update Document Request
     * 
     * Update a Document Request for an Onboarding Application for the given Organization, Onboarding, and Document Request identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\UpdateDocumentRequestRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\UpdateDocumentRequestSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\UpdateDocumentRequestResponse
     */
	public function updateDocumentRequest(
        ?\TheLogicStudio\ExactPayments\Models\Operations\UpdateDocumentRequestRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\UpdateDocumentRequestSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\UpdateDocumentRequestResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document-request/{documentRequestId}', \TheLogicStudio\ExactPayments\Models\Operations\UpdateDocumentRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "onboardingDocumentRequestUpdate", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\UpdateDocumentRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestMinifiedZodError = $serializer->deserialize((string)$httpResponse->getBody(), 'array<TheLogicStudio\ExactPayments\Models\Shared\ZodError>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Upload Document
     * 
     * Upload a Document for an Onboarding Application for the given Organization and Onboarding identifiers.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentRequest $request
     * @param \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentSecurity $security
     * @return \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentResponse
     */
	public function uploadDocument(
        ?\TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentRequest $request,
        \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentSecurity $security,
    ): \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organization/{organizationId}/onboarding/{onboardingId}/document', \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "onboardingDocumentUploadRequest", "multipart");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.7, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->uploadDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\UploadDocumentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestMinifiedZodError = $serializer->deserialize((string)$httpResponse->getBody(), 'array<TheLogicStudio\ExactPayments\Models\Shared\ZodError>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->badRequestUploadDocument = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseUploadDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseUploadDocument', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 413) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->payloadTooLarge = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 415) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->unsupportedMediaType = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseSystemError = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseSystemError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Upload Document using Token
     * 
     * Upload a Document for an Onboarding Application using the Token value returned in [Create Onboarding](/operations/createOnboarding) response.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentByTokenRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentByTokenResponse
     */
	public function uploadDocumentByToken(
        ?\TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentByTokenRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentByTokenResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/document/{token}', \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentByTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "onboardingDocumentUploadTokenRequest", "multipart");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0.7, plain/text;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\UploadDocumentByTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->uploadDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\UploadDocumentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestMinifiedZodError = $serializer->deserialize((string)$httpResponse->getBody(), 'array<TheLogicStudio\ExactPayments\Models\Shared\ZodError>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->badRequestUploadDocument = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->unauthorized = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseUploadDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseUploadDocument', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->notFound = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 413) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->payloadTooLarge = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 415) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->unsupportedMediaType = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contextErrorResponseSystemError = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\ContextErrorResponseSystemError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->internalServerError = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->serviceUnavailable = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}
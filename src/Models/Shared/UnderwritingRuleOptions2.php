<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace TheLogicStudio\ExactPayments\Models\Shared;


/**
 * UnderwritingRuleOptions2 - The options that will be used to evaluate the rule.
 * 
 * @package TheLogicStudio\ExactPayments\Models\Shared
 * @access public
 */
class UnderwritingRuleOptions2
{
    /**
     * The field that will be used to evaluate the rule
     * 
     * @var \TheLogicStudio\ExactPayments\Models\Shared\UnderwritingRuleOptionsField $field
     */
	#[\JMS\Serializer\Annotation\SerializedName('field')]
    #[\JMS\Serializer\Annotation\Type('enum<TheLogicStudio\ExactPayments\Models\Shared\UnderwritingRuleOptionsField>')]
    public UnderwritingRuleOptionsField $field;
    
    /**
     * The operator that will be used to evaluate the rule\
     * 
     * startsWith - The field value must start with the value1\
     * endsWith - The field value must end with the value1\
     * eq - The field value must be equal to the value1\
     * contains - The field value must contain the value1\
     * exclude - The field value must not contain the value1\
     * gt - The field value must be greater than the value1\
     * gte - The field value must be greater than or equal to the value1\
     * lt - The field value must be less than the value1\
     * lte - The field value must be less than or equal to the value1\
     * between - The field value must be between the value1 and value2\
     * in - The field value must be in the list of values1\
     * intersection - The field value must be in the intersection of the list of values1
     * 
     * 
     * @var \TheLogicStudio\ExactPayments\Models\Shared\UnderwritingRuleOptionsOperator $operator
     */
	#[\JMS\Serializer\Annotation\SerializedName('operator')]
    #[\JMS\Serializer\Annotation\Type('enum<TheLogicStudio\ExactPayments\Models\Shared\UnderwritingRuleOptionsOperator>')]
    public UnderwritingRuleOptionsOperator $operator;
    
    /**
     * The first value that will be used to evaluate the rule
     * 
     * @var mixed $value1
     */
	#[\JMS\Serializer\Annotation\SerializedName('value1')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    public mixed $value1;
    
    /**
     * The second value that will be used to evaluate the rule
     * 
     * @var mixed $value2
     */
	#[\JMS\Serializer\Annotation\SerializedName('value2')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $value2 = null;
    
	public function __construct()
	{
		$this->field = \TheLogicStudio\ExactPayments\Models\Shared\UnderwritingRuleOptionsField::MerchantAddressCountry;
		$this->operator = \TheLogicStudio\ExactPayments\Models\Shared\UnderwritingRuleOptionsOperator::StartsWith;
		$this->value1 = null;
		$this->value2 = null;
	}
}

<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace TheLogicStudio\ExactPayments\Models\Shared;


/**
 * ZodError - Each issue documents a problem that occurred during validation.
 * 
 * @package TheLogicStudio\ExactPayments\Models\Shared
 * @access public
 */
class ZodError
{
    /**
     * Validation error code. The retrieved value will drive which extra fields will be shown.
     * 
     * @var ?\TheLogicStudio\ExactPayments\Models\Shared\ZodErrorCode $code
     */
	#[\JMS\Serializer\Annotation\SerializedName('code')]
    #[\JMS\Serializer\Annotation\Type('enum<TheLogicStudio\ExactPayments\Models\Shared\ZodErrorCode>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ZodErrorCode $code = null;
    
    /**
     * Expected field type. It is only retrieved when `code = invalid_type`.
     * 
     * @var ?\TheLogicStudio\ExactPayments\Models\Shared\ZodErrorExpected $expected
     */
	#[\JMS\Serializer\Annotation\SerializedName('expected')]
    #[\JMS\Serializer\Annotation\Type('enum<TheLogicStudio\ExactPayments\Models\Shared\ZodErrorExpected>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ZodErrorExpected $expected = null;
    
    /**
     * Whether the minimum or maximum is included in the range of acceptable values. It is only retrieved when `code = too_small` or `code = too_big`.
     * 
     * @var ?bool $inclusive
     */
	#[\JMS\Serializer\Annotation\SerializedName('inclusive')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $inclusive = null;
    
    /**
     * The list of unsupported fields. It is only retrieved when `code = unrecognized_keys`.
     * 
     * @var ?array<string> $keys
     */
	#[\JMS\Serializer\Annotation\SerializedName('keys')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $keys = null;
    
    /**
     * The expected maximum length/value. It is only retrieved when `code = too_big`.
     * 
     * @var ?float $maximum
     */
	#[\JMS\Serializer\Annotation\SerializedName('maximum')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $maximum = null;
    
    /**
     * Message explaining the validation error.
     * 
     * @var ?string $message
     */
	#[\JMS\Serializer\Annotation\SerializedName('message')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $message = null;
    
    /**
     * The expected minimum length/value. It is only retrieved when `code = too_small`.
     * 
     * @var ?float $minimum
     */
	#[\JMS\Serializer\Annotation\SerializedName('minimum')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $minimum = null;
    
    /**
     * The set of acceptable string values for this field. It is only retrieved when `code = invalid_enum_value.
     * 
     * @var ?array<string> $options
     */
	#[\JMS\Serializer\Annotation\SerializedName('options')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $options = null;
    
    /**
     * Field location in the request body.
     * 
     * @var ?array<string> $path
     */
	#[\JMS\Serializer\Annotation\SerializedName('path')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $path = null;
    
    /**
     * Field type received. It is only retrieved when `code = invalid_type`.
     * 
     * @var ?\TheLogicStudio\ExactPayments\Models\Shared\ZodErrorReceived $received
     */
	#[\JMS\Serializer\Annotation\SerializedName('received')]
    #[\JMS\Serializer\Annotation\Type('enum<TheLogicStudio\ExactPayments\Models\Shared\ZodErrorReceived>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ZodErrorReceived $received = null;
    
    /**
     * The type of the data failing validation. It is only retrieved when `code = too_small` or `code = too_big`.
     * 
     * @var ?\TheLogicStudio\ExactPayments\Models\Shared\ZodErrorType $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<TheLogicStudio\ExactPayments\Models\Shared\ZodErrorType>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ZodErrorType $type = null;
    
    /**
     * A field supporting more than one possible value type or string value will retrieve this array property of objects with the same shape as this definition. It is only retrieved when `code = invalid_union`.
     * 
     * @var ?array<\TheLogicStudio\ExactPayments\Models\Shared\ZodErrorUnionErrors> $unionErrors
     */
	#[\JMS\Serializer\Annotation\SerializedName('unionErrors')]
    #[\JMS\Serializer\Annotation\Type('array<TheLogicStudio\ExactPayments\Models\Shared\ZodErrorUnionErrors>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $unionErrors = null;
    
    /**
     * String-specific format validator failed. It is only retrieved when `code = invalid_string`.
     * 
     * @var ?\TheLogicStudio\ExactPayments\Models\Shared\ZodErrorValidation $validation
     */
	#[\JMS\Serializer\Annotation\SerializedName('validation')]
    #[\JMS\Serializer\Annotation\Type('enum<TheLogicStudio\ExactPayments\Models\Shared\ZodErrorValidation>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ZodErrorValidation $validation = null;
    
	public function __construct()
	{
		$this->code = null;
		$this->expected = null;
		$this->inclusive = null;
		$this->keys = null;
		$this->maximum = null;
		$this->message = null;
		$this->minimum = null;
		$this->options = null;
		$this->path = null;
		$this->received = null;
		$this->type = null;
		$this->unionErrors = null;
		$this->validation = null;
	}
}

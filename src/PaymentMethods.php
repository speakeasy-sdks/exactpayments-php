<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace TheLogicStudio\ExactPayments;

class PaymentMethods 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Delete a Payment Method for a given Account
     * 
     * API to allow an Organization to delete a Payment Method for a merchant (accountId).
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\AccountDeletePaymentMethodRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\AccountDeletePaymentMethodResponse
     */
	public function accountDeletePaymentMethod(
        ?\TheLogicStudio\ExactPayments\Models\Operations\AccountDeletePaymentMethodRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\AccountDeletePaymentMethodResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/account/{accountId}/payment-method/{tokenId}', \TheLogicStudio\ExactPayments\Models\Operations\AccountDeletePaymentMethodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\AccountDeletePaymentMethodResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * Retrieve a Payment Method for a given Account
     * 
     * API to allow an Organization to retrieve a Payment Method of a specific merchant (accountId).
     * 
     * Please note that the Organization(partner) needs to authenticate using the partner or org token.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\AccountGetPaymentMethodRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\AccountGetPaymentMethodResponse
     */
	public function accountGetPaymentMethod(
        ?\TheLogicStudio\ExactPayments\Models\Operations\AccountGetPaymentMethodRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\AccountGetPaymentMethodResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/account/{accountId}/payment-method/{tokenId}', \TheLogicStudio\ExactPayments\Models\Operations\AccountGetPaymentMethodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\AccountGetPaymentMethodResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lookupNPaymentMethod = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * Create Payment Method for a given Account
     * 
     * API to allow an Organization to create a payment token (Payment Method) for a merchant (accountId).
     * 
     * Note that if you are storing card information, the field `card.tokenType` can be set to various values which control where the card data will be stored. `platform` means that Exact Payments will store the card, and this is of no additional charge. `network` means that the card will be stored with a card network provider, and as an added benefit will be updated should the card be renewed or the meta data for the card change. In order to use `network` as the card token type, this feature must be enabled on your account.
     * 
     * If you are storing ACH related account information, then the data will only be stored on the `platform`.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\AccountPostPaymentMethodRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\AccountPostPaymentMethodResponse
     */
	public function accountPostPaymentMethod(
        ?\TheLogicStudio\ExactPayments\Models\Operations\AccountPostPaymentMethodRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\AccountPostPaymentMethodResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/account/{accountId}/payment-method', \TheLogicStudio\ExactPayments\Models\Operations\AccountPostPaymentMethodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\AccountPostPaymentMethodResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentMethod = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 428 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * Verify micro-deposits on an ACH Payment Method for a given Account
     * 
     * API for an Organization to verify micro-deposits on an ACH Payment Method for a merchant (accountId).
     * 
     * Before using an ACH Payment Method, the customer must verify ownership of the account. We send two small deposits to the bank account and the account owner will need to confirm the amounts received in their account.
     * 
     * The amounts can then be submitted through this endpoint to complete account verification.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\AccountPostVerifyMicrodepositsRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\AccountPostVerifyMicrodepositsResponse
     */
	public function accountPostVerifyMicrodeposits(
        ?\TheLogicStudio\ExactPayments\Models\Operations\AccountPostVerifyMicrodepositsRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\AccountPostVerifyMicrodepositsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/account/{accountId}/payment-method/{payment-token}/verify', \TheLogicStudio\ExactPayments\Models\Operations\AccountPostVerifyMicrodepositsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "microDepositVerificationRequest", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\AccountPostVerifyMicrodepositsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentAchSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\PaymentAchSchema', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requestFailure = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\RequestFailure', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a Payment Method
     * 
     * API to allow a merchant to delete a Payment Method.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\DeletePaymentMethodRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\DeletePaymentMethodResponse
     */
	public function deletePaymentMethod(
        ?\TheLogicStudio\ExactPayments\Models\Operations\DeletePaymentMethodRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\DeletePaymentMethodResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/payment-method/{tokenId}', \TheLogicStudio\ExactPayments\Models\Operations\DeletePaymentMethodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\DeletePaymentMethodResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * Retrieve a Payment Method
     * 
     * API to allow a merchant to retrieve a specific Payment Method.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\GetPaymentMethodRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\GetPaymentMethodResponse
     */
	public function getPaymentMethod(
        ?\TheLogicStudio\ExactPayments\Models\Operations\GetPaymentMethodRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\GetPaymentMethodResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/payment-method/{tokenId}', \TheLogicStudio\ExactPayments\Models\Operations\GetPaymentMethodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\GetPaymentMethodResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lookupNPaymentMethod = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * Create Payment Method
     * 
     * API to allow a merchant to create a payment token (Payment Method).
     * 
     * Note that if you are storing card information, the field `card.tokenType` can be set to various values which control where the card data will be stored. `platform` means that Exact Payments will store the card, and this is of no additional charge. `network` means that the card will be stored with a card network provider, and as an added benefit will be updated should the card be renewed or the meta data for the card change. In order to use `network` as the card token type, this feature must be enabled on your account.
     * 
     * If you are storing ACH related account information, then the data will only be stored on the `platform`.
     * 
     * @param mixed $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\PostPaymentMethodResponse
     */
	public function postPaymentMethod(
        mixed $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\PostPaymentMethodResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/payment-method');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\PostPaymentMethodResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentMethod = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 428 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * Verify micro-deposits on an ACH Payment Method
     * 
     * API for a merchant to verify micro-deposits on an ACH Payment Method.
     * 
     * Before using an ACH Payment Method, the customer must verify ownership of the account. We send two small deposits to the bank account and the account owner will need to confirm the amounts received in their account.
     * 
     * The amounts can then be submitted through this endpoint to complete account verification.
     * 
     * @param \TheLogicStudio\ExactPayments\Models\Operations\PostVerifyMicrodepositsRequest $request
     * @return \TheLogicStudio\ExactPayments\Models\Operations\PostVerifyMicrodepositsResponse
     */
	public function postVerifyMicrodeposits(
        ?\TheLogicStudio\ExactPayments\Models\Operations\PostVerifyMicrodepositsRequest $request,
    ): \TheLogicStudio\ExactPayments\Models\Operations\PostVerifyMicrodepositsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/payment-method/{payment-token}/verify', \TheLogicStudio\ExactPayments\Models\Operations\PostVerifyMicrodepositsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "microDepositVerificationRequest", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \TheLogicStudio\ExactPayments\Models\Operations\PostVerifyMicrodepositsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentAchSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\PaymentAchSchema', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requestFailure = $serializer->deserialize((string)$httpResponse->getBody(), 'TheLogicStudio\ExactPayments\Models\Shared\RequestFailure', 'json');
            }
        }

        return $response;
    }
}